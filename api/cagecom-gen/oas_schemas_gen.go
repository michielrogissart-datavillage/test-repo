// Code generated by ogen, DO NOT EDIT.

package api

type ApiKey struct {
	APIKey string
}

// GetAPIKey returns the value of APIKey.
func (s *ApiKey) GetAPIKey() string {
	return s.APIKey
}

// SetAPIKey sets the value of APIKey.
func (s *ApiKey) SetAPIKey(val string) {
	s.APIKey = val
}

// Someone who provides code.
// Ref: #
type CodeProvider struct {
	Role     OptString               `json:"role"`
	Settings OptCodeProviderSettings `json:"settings"`
	Source   OptCodeProviderSource   `json:"source"`
}

// GetRole returns the value of Role.
func (s *CodeProvider) GetRole() OptString {
	return s.Role
}

// GetSettings returns the value of Settings.
func (s *CodeProvider) GetSettings() OptCodeProviderSettings {
	return s.Settings
}

// GetSource returns the value of Source.
func (s *CodeProvider) GetSource() OptCodeProviderSource {
	return s.Source
}

// SetRole sets the value of Role.
func (s *CodeProvider) SetRole(val OptString) {
	s.Role = val
}

// SetSettings sets the value of Settings.
func (s *CodeProvider) SetSettings(val OptCodeProviderSettings) {
	s.Settings = val
}

// SetSource sets the value of Source.
func (s *CodeProvider) SetSource(val OptCodeProviderSource) {
	s.Source = val
}

type CodeProviderSettings struct {
	Description OptString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *CodeProviderSettings) GetDescription() OptString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *CodeProviderSettings) SetDescription(val OptString) {
	s.Description = val
}

type CodeProviderSource struct {
	Registry string `json:"registry"`
	Image    string `json:"image"`
	Tag      string `json:"tag"`
	// A value that will be interpreted as an ImagePullSecret. An example would be a github access token
	// that has at least the scope `packages:read`, base64 encoded as `username:token`. If no value is
	// provided no ImagePullSecret will be used when deploying the cage.
	Secret OptString `json:"secret"`
}

// GetRegistry returns the value of Registry.
func (s *CodeProviderSource) GetRegistry() string {
	return s.Registry
}

// GetImage returns the value of Image.
func (s *CodeProviderSource) GetImage() string {
	return s.Image
}

// GetTag returns the value of Tag.
func (s *CodeProviderSource) GetTag() string {
	return s.Tag
}

// GetSecret returns the value of Secret.
func (s *CodeProviderSource) GetSecret() OptString {
	return s.Secret
}

// SetRegistry sets the value of Registry.
func (s *CodeProviderSource) SetRegistry(val string) {
	s.Registry = val
}

// SetImage sets the value of Image.
func (s *CodeProviderSource) SetImage(val string) {
	s.Image = val
}

// SetTag sets the value of Tag.
func (s *CodeProviderSource) SetTag(val string) {
	s.Tag = val
}

// SetSecret sets the value of Secret.
func (s *CodeProviderSource) SetSecret(val OptString) {
	s.Secret = val
}

// Merged schema.
// Ref: #
type Collaborator struct {
	ClientId string `json:"clientId"`
	// A name given the collaborator. This value is intended to be read by humans.
	Name OptString `json:"name"`
	// A label given the collaborator. This value is intended to refered to in code.
	Label OptString `json:"label"`
	// A configuration of the collaborator. This is an object representing key-value pairs that will be
	// available in the cage as environment variables.
	Configuration OptCollaboratorConfiguration `json:"configuration"`
	ID            string                       `json:"id"`
	OneOf         CollaboratorSum
}

// GetClientId returns the value of ClientId.
func (s *Collaborator) GetClientId() string {
	return s.ClientId
}

// GetName returns the value of Name.
func (s *Collaborator) GetName() OptString {
	return s.Name
}

// GetLabel returns the value of Label.
func (s *Collaborator) GetLabel() OptString {
	return s.Label
}

// GetConfiguration returns the value of Configuration.
func (s *Collaborator) GetConfiguration() OptCollaboratorConfiguration {
	return s.Configuration
}

// GetID returns the value of ID.
func (s *Collaborator) GetID() string {
	return s.ID
}

// GetOneOf returns the value of OneOf.
func (s *Collaborator) GetOneOf() CollaboratorSum {
	return s.OneOf
}

// SetClientId sets the value of ClientId.
func (s *Collaborator) SetClientId(val string) {
	s.ClientId = val
}

// SetName sets the value of Name.
func (s *Collaborator) SetName(val OptString) {
	s.Name = val
}

// SetLabel sets the value of Label.
func (s *Collaborator) SetLabel(val OptString) {
	s.Label = val
}

// SetConfiguration sets the value of Configuration.
func (s *Collaborator) SetConfiguration(val OptCollaboratorConfiguration) {
	s.Configuration = val
}

// SetID sets the value of ID.
func (s *Collaborator) SetID(val string) {
	s.ID = val
}

// SetOneOf sets the value of OneOf.
func (s *Collaborator) SetOneOf(val CollaboratorSum) {
	s.OneOf = val
}

// A configuration of the collaborator. This is an object representing key-value pairs that will be
// available in the cage as environment variables.
type CollaboratorConfiguration map[string]string

func (s *CollaboratorConfiguration) init() CollaboratorConfiguration {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// CollaboratorSum represents sum type.
type CollaboratorSum struct {
	Type         CollaboratorSumType // switch on this field
	CodeProvider CodeProvider
	DataProvider DataProvider
	DataConsumer DataConsumer
}

// CollaboratorSumType is oneOf type of CollaboratorSum.
type CollaboratorSumType string

// Possible values for CollaboratorSumType.
const (
	CodeProviderCollaboratorSum CollaboratorSumType = "CodeProvider"
	DataProviderCollaboratorSum CollaboratorSumType = "DataProvider"
	DataConsumerCollaboratorSum CollaboratorSumType = "DataConsumer"
)

// IsCodeProvider reports whether CollaboratorSum is CodeProvider.
func (s CollaboratorSum) IsCodeProvider() bool { return s.Type == CodeProviderCollaboratorSum }

// IsDataProvider reports whether CollaboratorSum is DataProvider.
func (s CollaboratorSum) IsDataProvider() bool { return s.Type == DataProviderCollaboratorSum }

// IsDataConsumer reports whether CollaboratorSum is DataConsumer.
func (s CollaboratorSum) IsDataConsumer() bool { return s.Type == DataConsumerCollaboratorSum }

// SetCodeProvider sets CollaboratorSum to CodeProvider.
func (s *CollaboratorSum) SetCodeProvider(v CodeProvider) {
	s.Type = CodeProviderCollaboratorSum
	s.CodeProvider = v
}

// GetCodeProvider returns CodeProvider and true boolean if CollaboratorSum is CodeProvider.
func (s CollaboratorSum) GetCodeProvider() (v CodeProvider, ok bool) {
	if !s.IsCodeProvider() {
		return v, false
	}
	return s.CodeProvider, true
}

// NewCodeProviderCollaboratorSum returns new CollaboratorSum from CodeProvider.
func NewCodeProviderCollaboratorSum(v CodeProvider) CollaboratorSum {
	var s CollaboratorSum
	s.SetCodeProvider(v)
	return s
}

// SetDataProvider sets CollaboratorSum to DataProvider.
func (s *CollaboratorSum) SetDataProvider(v DataProvider) {
	s.Type = DataProviderCollaboratorSum
	s.DataProvider = v
}

// GetDataProvider returns DataProvider and true boolean if CollaboratorSum is DataProvider.
func (s CollaboratorSum) GetDataProvider() (v DataProvider, ok bool) {
	if !s.IsDataProvider() {
		return v, false
	}
	return s.DataProvider, true
}

// NewDataProviderCollaboratorSum returns new CollaboratorSum from DataProvider.
func NewDataProviderCollaboratorSum(v DataProvider) CollaboratorSum {
	var s CollaboratorSum
	s.SetDataProvider(v)
	return s
}

// SetDataConsumer sets CollaboratorSum to DataConsumer.
func (s *CollaboratorSum) SetDataConsumer(v DataConsumer) {
	s.Type = DataConsumerCollaboratorSum
	s.DataConsumer = v
}

// GetDataConsumer returns DataConsumer and true boolean if CollaboratorSum is DataConsumer.
func (s CollaboratorSum) GetDataConsumer() (v DataConsumer, ok bool) {
	if !s.IsDataConsumer() {
		return v, false
	}
	return s.DataConsumer, true
}

// NewDataConsumerCollaboratorSum returns new CollaboratorSum from DataConsumer.
func NewDataConsumerCollaboratorSum(v DataConsumer) CollaboratorSum {
	var s CollaboratorSum
	s.SetDataConsumer(v)
	return s
}

// Someone who consumes data.
// Ref: #
type DataConsumer struct {
	Role     OptString               `json:"role"`
	Settings OptDataConsumerSettings `json:"settings"`
}

// GetRole returns the value of Role.
func (s *DataConsumer) GetRole() OptString {
	return s.Role
}

// GetSettings returns the value of Settings.
func (s *DataConsumer) GetSettings() OptDataConsumerSettings {
	return s.Settings
}

// SetRole sets the value of Role.
func (s *DataConsumer) SetRole(val OptString) {
	s.Role = val
}

// SetSettings sets the value of Settings.
func (s *DataConsumer) SetSettings(val OptDataConsumerSettings) {
	s.Settings = val
}

type DataConsumerSettings struct {
	Description OptString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *DataConsumerSettings) GetDescription() OptString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *DataConsumerSettings) SetDescription(val OptString) {
	s.Description = val
}

// Someone who provides Data.
// Ref: #
type DataProvider struct {
	Role     OptString               `json:"role"`
	Settings OptDataProviderSettings `json:"settings"`
}

// GetRole returns the value of Role.
func (s *DataProvider) GetRole() OptString {
	return s.Role
}

// GetSettings returns the value of Settings.
func (s *DataProvider) GetSettings() OptDataProviderSettings {
	return s.Settings
}

// SetRole sets the value of Role.
func (s *DataProvider) SetRole(val OptString) {
	s.Role = val
}

// SetSettings sets the value of Settings.
func (s *DataProvider) SetSettings(val OptDataProviderSettings) {
	s.Settings = val
}

type DataProviderSettings struct {
	Description OptString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *DataProviderSettings) GetDescription() OptString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *DataProviderSettings) SetDescription(val OptString) {
	s.Description = val
}

type GetCollaboratorsOKApplicationJSON []Collaborator

func (*GetCollaboratorsOKApplicationJSON) getCollaboratorsRes() {}

type NotFoundError struct {
	ErrorMessage string `json:"error_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *NotFoundError) GetErrorMessage() string {
	return s.ErrorMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *NotFoundError) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

func (*NotFoundError) getCollaboratorsRes() {}

// NewOptCodeProviderSettings returns new OptCodeProviderSettings with value set to v.
func NewOptCodeProviderSettings(v CodeProviderSettings) OptCodeProviderSettings {
	return OptCodeProviderSettings{
		Value: v,
		Set:   true,
	}
}

// OptCodeProviderSettings is optional CodeProviderSettings.
type OptCodeProviderSettings struct {
	Value CodeProviderSettings
	Set   bool
}

// IsSet returns true if OptCodeProviderSettings was set.
func (o OptCodeProviderSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeProviderSettings) Reset() {
	var v CodeProviderSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeProviderSettings) SetTo(v CodeProviderSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeProviderSettings) Get() (v CodeProviderSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeProviderSettings) Or(d CodeProviderSettings) CodeProviderSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeProviderSource returns new OptCodeProviderSource with value set to v.
func NewOptCodeProviderSource(v CodeProviderSource) OptCodeProviderSource {
	return OptCodeProviderSource{
		Value: v,
		Set:   true,
	}
}

// OptCodeProviderSource is optional CodeProviderSource.
type OptCodeProviderSource struct {
	Value CodeProviderSource
	Set   bool
}

// IsSet returns true if OptCodeProviderSource was set.
func (o OptCodeProviderSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeProviderSource) Reset() {
	var v CodeProviderSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeProviderSource) SetTo(v CodeProviderSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeProviderSource) Get() (v CodeProviderSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeProviderSource) Or(d CodeProviderSource) CodeProviderSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollaboratorConfiguration returns new OptCollaboratorConfiguration with value set to v.
func NewOptCollaboratorConfiguration(v CollaboratorConfiguration) OptCollaboratorConfiguration {
	return OptCollaboratorConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptCollaboratorConfiguration is optional CollaboratorConfiguration.
type OptCollaboratorConfiguration struct {
	Value CollaboratorConfiguration
	Set   bool
}

// IsSet returns true if OptCollaboratorConfiguration was set.
func (o OptCollaboratorConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollaboratorConfiguration) Reset() {
	var v CollaboratorConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollaboratorConfiguration) SetTo(v CollaboratorConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollaboratorConfiguration) Get() (v CollaboratorConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollaboratorConfiguration) Or(d CollaboratorConfiguration) CollaboratorConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataConsumerSettings returns new OptDataConsumerSettings with value set to v.
func NewOptDataConsumerSettings(v DataConsumerSettings) OptDataConsumerSettings {
	return OptDataConsumerSettings{
		Value: v,
		Set:   true,
	}
}

// OptDataConsumerSettings is optional DataConsumerSettings.
type OptDataConsumerSettings struct {
	Value DataConsumerSettings
	Set   bool
}

// IsSet returns true if OptDataConsumerSettings was set.
func (o OptDataConsumerSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataConsumerSettings) Reset() {
	var v DataConsumerSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataConsumerSettings) SetTo(v DataConsumerSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataConsumerSettings) Get() (v DataConsumerSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataConsumerSettings) Or(d DataConsumerSettings) DataConsumerSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataProviderSettings returns new OptDataProviderSettings with value set to v.
func NewOptDataProviderSettings(v DataProviderSettings) OptDataProviderSettings {
	return OptDataProviderSettings{
		Value: v,
		Set:   true,
	}
}

// OptDataProviderSettings is optional DataProviderSettings.
type OptDataProviderSettings struct {
	Value DataProviderSettings
	Set   bool
}

// IsSet returns true if OptDataProviderSettings was set.
func (o OptDataProviderSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataProviderSettings) Reset() {
	var v DataProviderSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataProviderSettings) SetTo(v DataProviderSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataProviderSettings) Get() (v DataProviderSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataProviderSettings) Or(d DataProviderSettings) DataProviderSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type UnauthorizedError struct {
	ErrorMessage string `json:"error_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *UnauthorizedError) GetErrorMessage() string {
	return s.ErrorMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *UnauthorizedError) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

func (*UnauthorizedError) getCollaboratorsRes() {}
