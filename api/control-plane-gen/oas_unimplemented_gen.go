// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"

	ht "github.com/ogen-go/ogen/http"
)

// UnimplementedHandler is no-op Handler which returns http.ErrNotImplemented.
type UnimplementedHandler struct{}

var _ Handler = UnimplementedHandler{}

// CreateCollaborationSpace implements CreateCollaborationSpace operation.
//
// Create a new collaboration space owned by the client the user is authenticated for.
//
// POST /collaboration-spaces
func (UnimplementedHandler) CreateCollaborationSpace(ctx context.Context, req *CollaborationSpaceCreate) (r CreateCollaborationSpaceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateCollaborator implements CreateCollaborator operation.
//
// Add a new collaborator to a collaboration space. Allowed if the client owns the space.
//
// POST /collaboration-spaces/{spaceId}/collaborators
func (UnimplementedHandler) CreateCollaborator(ctx context.Context, req *CollaboratorCreate, params CreateCollaboratorParams) (r CreateCollaboratorRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateDataContract implements CreateDataContract operation.
//
// Create a new data contract based on an ODCS description. It will be owned by the client the
// account is authenticated for.
//
// POST /data-contracts
func (UnimplementedHandler) CreateDataContract(ctx context.Context, req CreateDataContractReq) (r CreateDataContractRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateInvites implements CreateInvites operation.
//
// Invite another client as a collaborator of a space.
//
// POST /invites
func (UnimplementedHandler) CreateInvites(ctx context.Context) error {
	return ht.ErrNotImplemented
}

// CreateProperty implements CreateProperty operation.
//
// Create a new property based on an ODCS description. Allowed if the client is the owner of the
// contract.
//
// POST /data-contracts/{contractId}/schema/{schemaId}/properties
func (UnimplementedHandler) CreateProperty(ctx context.Context, req *PropertyCreate, params CreatePropertyParams) (r CreatePropertyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// CreateSchema implements CreateSchema operation.
//
// Create a new schema based on an ODCS description. Allowed if the client is the owner of the
// contract.
//
// POST /data-contracts/{contractId}/schema
func (UnimplementedHandler) CreateSchema(ctx context.Context, req *SchemaCreate, params CreateSchemaParams) (r CreateSchemaRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteCage implements DeleteCage operation.
//
// Shut down the confidential cluster running the algorithm of a collaboration space.
//
// DELETE /collaboration-spaces/{spaceId}/deployment
func (UnimplementedHandler) DeleteCage(ctx context.Context, params DeleteCageParams) (r DeleteCageRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteCollaborationSpace implements DeleteCollaborationSpace operation.
//
// Delete a collaboration space by id. Allowed if the client owns the space.
//
// DELETE /collaboration-spaces/{spaceId}
func (UnimplementedHandler) DeleteCollaborationSpace(ctx context.Context, params DeleteCollaborationSpaceParams) (r DeleteCollaborationSpaceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteCollaborator implements DeleteCollaborator operation.
//
// Delete a collaborator by ID. Allowed if the client owns the collaborator.
//
// DELETE /collaboration-spaces/{spaceId}/collaborators/{collaboratorId}
func (UnimplementedHandler) DeleteCollaborator(ctx context.Context, params DeleteCollaboratorParams) (r DeleteCollaboratorRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteDataContract implements DeleteDataContract operation.
//
// Delete a data contract by ID. Allowed if the client owns the contract.
//
// DELETE /data-contracts/{contractId}
func (UnimplementedHandler) DeleteDataContract(ctx context.Context, params DeleteDataContractParams) (r DeleteDataContractRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteInvite implements DeleteInvite operation.
//
// Delete invite.
//
// DELETE /invites/{inviteId}
func (UnimplementedHandler) DeleteInvite(ctx context.Context, params DeleteInviteParams) (r DeleteInviteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteProperty implements DeleteProperty operation.
//
// Delete a property by ID. Allowed if the client owns the contract.
//
// DELETE /data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}
func (UnimplementedHandler) DeleteProperty(ctx context.Context, params DeletePropertyParams) (r DeletePropertyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeleteSchema implements DeleteSchema operation.
//
// Delete a schema by ID. Allowed if the client owns the contract.
//
// DELETE /data-contracts/{contractId}/schema/{schemaId}
func (UnimplementedHandler) DeleteSchema(ctx context.Context, params DeleteSchemaParams) (r DeleteSchemaRes, _ error) {
	return r, ht.ErrNotImplemented
}

// DeployCage implements DeployCage operation.
//
// Starts a confidential cluster if necessary and deploys the version of the algorithm as configured
// in the collaboration space model.
//
// POST /collaboration-spaces/{spaceId}/deployment
func (UnimplementedHandler) DeployCage(ctx context.Context, params DeployCageParams) (r DeployCageRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAlgorithmLogs implements GetAlgorithmLogs operation.
//
// Get `tail_lines` most recent lines of the output written by the algorithm.
//
// GET /collaboration-spaces/{spaceId}/algo/logs
func (UnimplementedHandler) GetAlgorithmLogs(ctx context.Context, params GetAlgorithmLogsParams) (r GetAlgorithmLogsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetAttestationReport implements GetAttestationReport operation.
//
// Get an attestation report of the virtual machine.
//
// GET /collaboration-spaces/{spaceId}/attestation-token
func (UnimplementedHandler) GetAttestationReport(ctx context.Context, params GetAttestationReportParams) (r GetAttestationReportRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetClient implements GetClient operation.
//
// Get all information related to a client.
//
// GET /clients/{clientId}
func (UnimplementedHandler) GetClient(ctx context.Context, params GetClientParams) (r GetClientRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCollaborationSpace implements GetCollaborationSpace operation.
//
// Get a collaboration space by ID. Allowed if the client either owns it or is a collaborator.
//
// GET /collaboration-spaces/{spaceId}
func (UnimplementedHandler) GetCollaborationSpace(ctx context.Context, params GetCollaborationSpaceParams) (r GetCollaborationSpaceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCollaborationSpaceAppId implements GetCollaborationSpaceAppId operation.
//
// Get the JSON-LD application document to authenticate the application in a Solid eco-system.
//
// GET /.well-known/collaboration-spaces/{spaceId}/appid
func (UnimplementedHandler) GetCollaborationSpaceAppId(ctx context.Context, params GetCollaborationSpaceAppIdParams) (r GetCollaborationSpaceAppIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCollaborationSpaceWebId implements GetCollaborationSpaceWebId operation.
//
// Get the turtle document describing the collaboration space as an agent in a Solid eco-system. The
// URI serves as WebID of the agent.
//
// GET /.well-known/collaboration-spaces/{spaceId}/webid
func (UnimplementedHandler) GetCollaborationSpaceWebId(ctx context.Context, params GetCollaborationSpaceWebIdParams) (r GetCollaborationSpaceWebIdRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCollaborationSpaces implements GetCollaborationSpaces operation.
//
// Get all collaboration spaces the user has access to.
//
// GET /collaboration-spaces
func (UnimplementedHandler) GetCollaborationSpaces(ctx context.Context) (r GetCollaborationSpacesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCollaborator implements GetCollaborator operation.
//
// Get a collaborator by ID. Allowed if the client is owner or collaborator of the collaboration
// space.
//
// GET /collaboration-spaces/{spaceId}/collaborators/{collaboratorId}
func (UnimplementedHandler) GetCollaborator(ctx context.Context, params GetCollaboratorParams) (r GetCollaboratorRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetCollaborators implements GetCollaborators operation.
//
// Get all collaborators of a collaboration space. Allowed if the client owns it or is a collaborator.
//
// GET /collaboration-spaces/{spaceId}/collaborators
func (UnimplementedHandler) GetCollaborators(ctx context.Context, params GetCollaboratorsParams) (r GetCollaboratorsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDataContract implements GetDataContract operation.
//
// Get a data contract by ID.
//
// GET /data-contracts/{contractId}
func (UnimplementedHandler) GetDataContract(ctx context.Context, params GetDataContractParams) (r GetDataContractRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDataContracts implements GetDataContracts operation.
//
// Get all data contracts your account has access to, optionally filtering by name.
//
// GET /data-contracts
func (UnimplementedHandler) GetDataContracts(ctx context.Context, params GetDataContractsParams) (r GetDataContractsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDeployment implements GetDeployment operation.
//
// Get information of the current deployment of the cage. An object is returned that contains the
// status of the deployment as well as the status of individual pods of the platform.
//
// GET /collaboration-spaces/{spaceId}/deployment
func (UnimplementedHandler) GetDeployment(ctx context.Context, params GetDeploymentParams) (r GetDeploymentRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetDeploymentLogs implements GetDeploymentLogs operation.
//
// Get `tail_lines` most recent lines of the output generated by the deployment of a cage.
//
// GET /collaboration-spaces/{spaceId}/deployment/logs
func (UnimplementedHandler) GetDeploymentLogs(ctx context.Context, params GetDeploymentLogsParams) (r GetDeploymentLogsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetInvite implements GetInvite operation.
//
// GET /invites/{inviteId}
func (UnimplementedHandler) GetInvite(ctx context.Context, params GetInviteParams) error {
	return ht.ErrNotImplemented
}

// GetInviteStatus implements GetInviteStatus operation.
//
// GET /invites/{inviteId}/status
func (UnimplementedHandler) GetInviteStatus(ctx context.Context, params GetInviteStatusParams) error {
	return ht.ErrNotImplemented
}

// GetInvites implements GetInvites operation.
//
// GET /invites
func (UnimplementedHandler) GetInvites(ctx context.Context) (r GetInvitesRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetNotifications implements GetNotifications operation.
//
// Get all notifications related to a client.
//
// GET /clients/{clientId}/notifications
func (UnimplementedHandler) GetNotifications(ctx context.Context, params GetNotificationsParams) (r GetNotificationsRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetProperty implements GetProperty operation.
//
// Get the ODCS description of a property by ID.
//
// GET /data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}
func (UnimplementedHandler) GetProperty(ctx context.Context, params GetPropertyParams) (r GetPropertyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPublicClient implements GetPublicClient operation.
//
// Get public information about a client based on a human readable label.
//
// GET /.well-known/clients/{clientLabel}
func (UnimplementedHandler) GetPublicClient(ctx context.Context, params GetPublicClientParams) (r GetPublicClientRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetPublicKey implements GetPublicKey operation.
//
// Get the public key linked to a collaboration space.
//
// GET /collaboration-spaces/{spaceId}/keys/public-key
func (UnimplementedHandler) GetPublicKey(ctx context.Context, params GetPublicKeyParams) (r GetPublicKeyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// GetSchema implements GetSchema operation.
//
// Get the ODCS description of a schema by ID.
//
// GET /data-contracts/{contractId}/schema/{schemaId}
func (UnimplementedHandler) GetSchema(ctx context.Context, params GetSchemaParams) (r GetSchemaRes, _ error) {
	return r, ht.ErrNotImplemented
}

// PublishEvent implements PublishEvent operation.
//
// Publish an event to the confidential environment of the collaboration space.
//
// POST /collaboration-spaces/{spaceId}/event
func (UnimplementedHandler) PublishEvent(ctx context.Context, req *PublishEventReq, params PublishEventParams) (r PublishEventRes, _ error) {
	return r, ht.ErrNotImplemented
}

// RotateKeys implements RotateKeys operation.
//
// Rotates the keys of the secret manager supporting the space.
//
// POST /collaboration-spaces/{spaceId}/keys
func (UnimplementedHandler) RotateKeys(ctx context.Context, params RotateKeysParams) (r RotateKeysRes, _ error) {
	return r, ht.ErrNotImplemented
}

// StoreSecret implements StoreSecret operation.
//
// Stores the content of the request as a secret in the cage. Secrets that already exist will be
// overwritten.  A secret can be encrypted with the public key of the cage. The cage will then have
// access to the decrypted version. This encryption should be done client side such that the platform
// never sees the decrypted data.
//
// PUT /collaboration-spaces/{spaceId}/secrets/{secretId}
func (UnimplementedHandler) StoreSecret(ctx context.Context, req *StoreSecretReq, params StoreSecretParams) (r StoreSecretRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateCollaborationSpace implements UpdateCollaborationSpace operation.
//
// Update a collaboration space by ID. Allowed if the client owns the space.
//
// PATCH /collaboration-spaces/{spaceId}
func (UnimplementedHandler) UpdateCollaborationSpace(ctx context.Context, req *CollaborationSpaceUpdate, params UpdateCollaborationSpaceParams) (r UpdateCollaborationSpaceRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateCollaborator implements UpdateCollaborator operation.
//
// Update a collaborator by ID. Allowed if the client owns the collaborator.
//
// PATCH /collaboration-spaces/{spaceId}/collaborators/{collaboratorId}
func (UnimplementedHandler) UpdateCollaborator(ctx context.Context, req *CollaboratorUpdate, params UpdateCollaboratorParams) (r UpdateCollaboratorRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateDataContract implements UpdateDataContract operation.
//
// Update ODCS properties of a data contract by ID. Nested fields are overwritten when specified.
// Allowed if the client is the owner.
//
// PATCH /data-contracts/{contractId}
func (UnimplementedHandler) UpdateDataContract(ctx context.Context, req *DataContractUpdate, params UpdateDataContractParams) (r UpdateDataContractRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateInvite implements UpdateInvite operation.
//
// PATCH /invites/{inviteId}
func (UnimplementedHandler) UpdateInvite(ctx context.Context, params UpdateInviteParams) (r UpdateInviteRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateInviteStatus implements UpdateInviteStatus operation.
//
// PATCH /invites/{inviteId}/status
func (UnimplementedHandler) UpdateInviteStatus(ctx context.Context, params UpdateInviteStatusParams) (r UpdateInviteStatusRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateProperty implements UpdateProperty operation.
//
// Update ODCS properties of a property by ID. Allowed if the client owns the contract.
//
// PATCH /data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}
func (UnimplementedHandler) UpdateProperty(ctx context.Context, req *PropertyUpdate, params UpdatePropertyParams) (r UpdatePropertyRes, _ error) {
	return r, ht.ErrNotImplemented
}

// UpdateSchema implements UpdateSchema operation.
//
// Update ODCS properties of a schema by ID. Nested fields will be overwritten if specified. Allowed
// if the client owns the contract.
//
// PATCH /data-contracts/{contractId}/schema/{schemaId}
func (UnimplementedHandler) UpdateSchema(ctx context.Context, req *SchemaUpdate, params UpdateSchemaParams) (r UpdateSchemaRes, _ error) {
	return r, ht.ErrNotImplemented
}
