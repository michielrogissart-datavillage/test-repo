// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/url"
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	ht "github.com/ogen-go/ogen/http"
)

// Ref: #
// AnyType represents sum type.
type AnyType struct {
	Type     AnyTypeType // switch on this field
	String   string
	Float64  float64
	Int      int
	Bool     bool
	AnyArray []jx.Raw
	AnyType5 AnyType5
}

// AnyTypeType is oneOf type of AnyType.
type AnyTypeType string

// Possible values for AnyTypeType.
const (
	StringAnyType   AnyTypeType = "string"
	Float64AnyType  AnyTypeType = "float64"
	IntAnyType      AnyTypeType = "int"
	BoolAnyType     AnyTypeType = "bool"
	AnyArrayAnyType AnyTypeType = "[]jx.Raw"
	AnyType5AnyType AnyTypeType = "AnyType5"
)

// IsString reports whether AnyType is string.
func (s AnyType) IsString() bool { return s.Type == StringAnyType }

// IsFloat64 reports whether AnyType is float64.
func (s AnyType) IsFloat64() bool { return s.Type == Float64AnyType }

// IsInt reports whether AnyType is int.
func (s AnyType) IsInt() bool { return s.Type == IntAnyType }

// IsBool reports whether AnyType is bool.
func (s AnyType) IsBool() bool { return s.Type == BoolAnyType }

// IsAnyArray reports whether AnyType is []jx.Raw.
func (s AnyType) IsAnyArray() bool { return s.Type == AnyArrayAnyType }

// IsAnyType5 reports whether AnyType is AnyType5.
func (s AnyType) IsAnyType5() bool { return s.Type == AnyType5AnyType }

// SetString sets AnyType to string.
func (s *AnyType) SetString(v string) {
	s.Type = StringAnyType
	s.String = v
}

// GetString returns string and true boolean if AnyType is string.
func (s AnyType) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringAnyType returns new AnyType from string.
func NewStringAnyType(v string) AnyType {
	var s AnyType
	s.SetString(v)
	return s
}

// SetFloat64 sets AnyType to float64.
func (s *AnyType) SetFloat64(v float64) {
	s.Type = Float64AnyType
	s.Float64 = v
}

// GetFloat64 returns float64 and true boolean if AnyType is float64.
func (s AnyType) GetFloat64() (v float64, ok bool) {
	if !s.IsFloat64() {
		return v, false
	}
	return s.Float64, true
}

// NewFloat64AnyType returns new AnyType from float64.
func NewFloat64AnyType(v float64) AnyType {
	var s AnyType
	s.SetFloat64(v)
	return s
}

// SetInt sets AnyType to int.
func (s *AnyType) SetInt(v int) {
	s.Type = IntAnyType
	s.Int = v
}

// GetInt returns int and true boolean if AnyType is int.
func (s AnyType) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntAnyType returns new AnyType from int.
func NewIntAnyType(v int) AnyType {
	var s AnyType
	s.SetInt(v)
	return s
}

// SetBool sets AnyType to bool.
func (s *AnyType) SetBool(v bool) {
	s.Type = BoolAnyType
	s.Bool = v
}

// GetBool returns bool and true boolean if AnyType is bool.
func (s AnyType) GetBool() (v bool, ok bool) {
	if !s.IsBool() {
		return v, false
	}
	return s.Bool, true
}

// NewBoolAnyType returns new AnyType from bool.
func NewBoolAnyType(v bool) AnyType {
	var s AnyType
	s.SetBool(v)
	return s
}

// SetAnyArray sets AnyType to []jx.Raw.
func (s *AnyType) SetAnyArray(v []jx.Raw) {
	s.Type = AnyArrayAnyType
	s.AnyArray = v
}

// GetAnyArray returns []jx.Raw and true boolean if AnyType is []jx.Raw.
func (s AnyType) GetAnyArray() (v []jx.Raw, ok bool) {
	if !s.IsAnyArray() {
		return v, false
	}
	return s.AnyArray, true
}

// NewAnyArrayAnyType returns new AnyType from []jx.Raw.
func NewAnyArrayAnyType(v []jx.Raw) AnyType {
	var s AnyType
	s.SetAnyArray(v)
	return s
}

// SetAnyType5 sets AnyType to AnyType5.
func (s *AnyType) SetAnyType5(v AnyType5) {
	s.Type = AnyType5AnyType
	s.AnyType5 = v
}

// GetAnyType5 returns AnyType5 and true boolean if AnyType is AnyType5.
func (s AnyType) GetAnyType5() (v AnyType5, ok bool) {
	if !s.IsAnyType5() {
		return v, false
	}
	return s.AnyType5, true
}

// NewAnyType5AnyType returns new AnyType from AnyType5.
func NewAnyType5AnyType(v AnyType5) AnyType {
	var s AnyType
	s.SetAnyType5(v)
	return s
}

type AnyType5 struct{}

// Data can be fetched with API call.
// Ref: #
type ApiServer struct {
	// Type of the server.
	Type string `json:"type"`
	// The url to the API.
	Location url.URL `json:"location"`
}

// GetType returns the value of Type.
func (s *ApiServer) GetType() string {
	return s.Type
}

// GetLocation returns the value of Location.
func (s *ApiServer) GetLocation() url.URL {
	return s.Location
}

// SetType sets the value of Type.
func (s *ApiServer) SetType(val string) {
	s.Type = val
}

// SetLocation sets the value of Location.
func (s *ApiServer) SetLocation(val url.URL) {
	s.Location = val
}

// Link to source that provides more details on the dataset; examples would be a link to an external
// definition, a training video, a GitHub repo, Collibra, or another tool. Authoritative definitions
// follow the same structure in the standard.
// Ref: #
type AuthorativeDefinition struct {
	// URL to the authority.
	URL string `json:"url"`
	// Type of definition for authority: v2.3 adds standard values: `businessDefinition`,
	// `transformationImplementation`, `videoTutorial`, `tutorial`, and `implementation`.
	Type string `json:"type"`
}

// GetURL returns the value of URL.
func (s *AuthorativeDefinition) GetURL() string {
	return s.URL
}

// GetType returns the value of Type.
func (s *AuthorativeDefinition) GetType() string {
	return s.Type
}

// SetURL sets the value of URL.
func (s *AuthorativeDefinition) SetURL(val string) {
	s.URL = val
}

// SetType sets the value of Type.
func (s *AuthorativeDefinition) SetType(val string) {
	s.Type = val
}

type BadRequestError struct {
	ErrorMessage string `json:"error_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *BadRequestError) GetErrorMessage() string {
	return s.ErrorMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *BadRequestError) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

func (*BadRequestError) deployCageRes()         {}
func (*BadRequestError) publishEventRes()       {}
func (*BadRequestError) updateCollaboratorRes() {}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Someone who provides code.
// Ref: #
type CodeProvider struct {
	Role     OptString               `json:"role"`
	Settings OptCodeProviderSettings `json:"settings"`
	Source   OptCodeProviderSource   `json:"source"`
}

// GetRole returns the value of Role.
func (s *CodeProvider) GetRole() OptString {
	return s.Role
}

// GetSettings returns the value of Settings.
func (s *CodeProvider) GetSettings() OptCodeProviderSettings {
	return s.Settings
}

// GetSource returns the value of Source.
func (s *CodeProvider) GetSource() OptCodeProviderSource {
	return s.Source
}

// SetRole sets the value of Role.
func (s *CodeProvider) SetRole(val OptString) {
	s.Role = val
}

// SetSettings sets the value of Settings.
func (s *CodeProvider) SetSettings(val OptCodeProviderSettings) {
	s.Settings = val
}

// SetSource sets the value of Source.
func (s *CodeProvider) SetSource(val OptCodeProviderSource) {
	s.Source = val
}

type CodeProviderSettings struct {
	Description OptString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *CodeProviderSettings) GetDescription() OptString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *CodeProviderSettings) SetDescription(val OptString) {
	s.Description = val
}

type CodeProviderSource struct {
	Registry string `json:"registry"`
	Image    string `json:"image"`
	Tag      string `json:"tag"`
	// A value that will be interpreted as an ImagePullSecret. An example would be a github access token
	// that has at least the scope `packages:read`, base64 encoded as `username:token`. If no value is
	// provided no ImagePullSecret will be used when deploying the cage.
	Secret OptString `json:"secret"`
}

// GetRegistry returns the value of Registry.
func (s *CodeProviderSource) GetRegistry() string {
	return s.Registry
}

// GetImage returns the value of Image.
func (s *CodeProviderSource) GetImage() string {
	return s.Image
}

// GetTag returns the value of Tag.
func (s *CodeProviderSource) GetTag() string {
	return s.Tag
}

// GetSecret returns the value of Secret.
func (s *CodeProviderSource) GetSecret() OptString {
	return s.Secret
}

// SetRegistry sets the value of Registry.
func (s *CodeProviderSource) SetRegistry(val string) {
	s.Registry = val
}

// SetImage sets the value of Image.
func (s *CodeProviderSource) SetImage(val string) {
	s.Image = val
}

// SetTag sets the value of Tag.
func (s *CodeProviderSource) SetTag(val string) {
	s.Tag = val
}

// SetSecret sets the value of Secret.
func (s *CodeProviderSource) SetSecret(val OptString) {
	s.Secret = val
}

// Merged schema.
// Ref: #
type CollaborationSpace struct {
	Name          string         `json:"name"`
	Category      OptString      `json:"category"`
	ID            string         `json:"id"`
	Collaborators []Collaborator `json:"collaborators"`
}

// GetName returns the value of Name.
func (s *CollaborationSpace) GetName() string {
	return s.Name
}

// GetCategory returns the value of Category.
func (s *CollaborationSpace) GetCategory() OptString {
	return s.Category
}

// GetID returns the value of ID.
func (s *CollaborationSpace) GetID() string {
	return s.ID
}

// GetCollaborators returns the value of Collaborators.
func (s *CollaborationSpace) GetCollaborators() []Collaborator {
	return s.Collaborators
}

// SetName sets the value of Name.
func (s *CollaborationSpace) SetName(val string) {
	s.Name = val
}

// SetCategory sets the value of Category.
func (s *CollaborationSpace) SetCategory(val OptString) {
	s.Category = val
}

// SetID sets the value of ID.
func (s *CollaborationSpace) SetID(val string) {
	s.ID = val
}

// SetCollaborators sets the value of Collaborators.
func (s *CollaborationSpace) SetCollaborators(val []Collaborator) {
	s.Collaborators = val
}

func (*CollaborationSpace) getCollaborationSpaceRes() {}

// Merged schema.
// Ref: #
type CollaborationSpaceCreate struct {
	Name          string               `json:"name"`
	Category      OptString            `json:"category"`
	Collaborators []CollaboratorCreate `json:"collaborators"`
}

// GetName returns the value of Name.
func (s *CollaborationSpaceCreate) GetName() string {
	return s.Name
}

// GetCategory returns the value of Category.
func (s *CollaborationSpaceCreate) GetCategory() OptString {
	return s.Category
}

// GetCollaborators returns the value of Collaborators.
func (s *CollaborationSpaceCreate) GetCollaborators() []CollaboratorCreate {
	return s.Collaborators
}

// SetName sets the value of Name.
func (s *CollaborationSpaceCreate) SetName(val string) {
	s.Name = val
}

// SetCategory sets the value of Category.
func (s *CollaborationSpaceCreate) SetCategory(val OptString) {
	s.Category = val
}

// SetCollaborators sets the value of Collaborators.
func (s *CollaborationSpaceCreate) SetCollaborators(val []CollaboratorCreate) {
	s.Collaborators = val
}

// Merged schema.
// Ref: #
type CollaborationSpaceUpdate struct {
	Name          OptString            `json:"name"`
	Category      OptString            `json:"category"`
	Collaborators []CollaboratorCreate `json:"collaborators"`
}

// GetName returns the value of Name.
func (s *CollaborationSpaceUpdate) GetName() OptString {
	return s.Name
}

// GetCategory returns the value of Category.
func (s *CollaborationSpaceUpdate) GetCategory() OptString {
	return s.Category
}

// GetCollaborators returns the value of Collaborators.
func (s *CollaborationSpaceUpdate) GetCollaborators() []CollaboratorCreate {
	return s.Collaborators
}

// SetName sets the value of Name.
func (s *CollaborationSpaceUpdate) SetName(val OptString) {
	s.Name = val
}

// SetCategory sets the value of Category.
func (s *CollaborationSpaceUpdate) SetCategory(val OptString) {
	s.Category = val
}

// SetCollaborators sets the value of Collaborators.
func (s *CollaborationSpaceUpdate) SetCollaborators(val []CollaboratorCreate) {
	s.Collaborators = val
}

// Merged schema.
// Ref: #
type Collaborator struct {
	ClientId string `json:"clientId"`
	// A name given the collaborator. This value is intended to be read by humans.
	Name OptString `json:"name"`
	// A label given the collaborator. This value is intended to refered to in code.
	Label OptString `json:"label"`
	// A configuration of the collaborator. This is an object representing key-value pairs that will be
	// available in the cage as environment variables.
	Configuration OptCollaboratorConfiguration `json:"configuration"`
	ID            string                       `json:"id"`
	OneOf         CollaboratorSum
}

// GetClientId returns the value of ClientId.
func (s *Collaborator) GetClientId() string {
	return s.ClientId
}

// GetName returns the value of Name.
func (s *Collaborator) GetName() OptString {
	return s.Name
}

// GetLabel returns the value of Label.
func (s *Collaborator) GetLabel() OptString {
	return s.Label
}

// GetConfiguration returns the value of Configuration.
func (s *Collaborator) GetConfiguration() OptCollaboratorConfiguration {
	return s.Configuration
}

// GetID returns the value of ID.
func (s *Collaborator) GetID() string {
	return s.ID
}

// GetOneOf returns the value of OneOf.
func (s *Collaborator) GetOneOf() CollaboratorSum {
	return s.OneOf
}

// SetClientId sets the value of ClientId.
func (s *Collaborator) SetClientId(val string) {
	s.ClientId = val
}

// SetName sets the value of Name.
func (s *Collaborator) SetName(val OptString) {
	s.Name = val
}

// SetLabel sets the value of Label.
func (s *Collaborator) SetLabel(val OptString) {
	s.Label = val
}

// SetConfiguration sets the value of Configuration.
func (s *Collaborator) SetConfiguration(val OptCollaboratorConfiguration) {
	s.Configuration = val
}

// SetID sets the value of ID.
func (s *Collaborator) SetID(val string) {
	s.ID = val
}

// SetOneOf sets the value of OneOf.
func (s *Collaborator) SetOneOf(val CollaboratorSum) {
	s.OneOf = val
}

func (*Collaborator) getCollaboratorRes() {}

// A configuration of the collaborator. This is an object representing key-value pairs that will be
// available in the cage as environment variables.
type CollaboratorConfiguration map[string]string

func (s *CollaboratorConfiguration) init() CollaboratorConfiguration {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #
type CollaboratorCreate struct {
	ClientId string `json:"clientId"`
	// A name given the collaborator. This value is intended to be read by humans.
	Name OptString `json:"name"`
	// A label given the collaborator. This value is intended to refered to in code.
	Label OptString `json:"label"`
	// A configuration of the collaborator. This is an object representing key-value pairs that will be
	// available in the cage as environment variables.
	Configuration OptCollaboratorCreateConfiguration `json:"configuration"`
	OneOf         CollaboratorCreateSum
}

// GetClientId returns the value of ClientId.
func (s *CollaboratorCreate) GetClientId() string {
	return s.ClientId
}

// GetName returns the value of Name.
func (s *CollaboratorCreate) GetName() OptString {
	return s.Name
}

// GetLabel returns the value of Label.
func (s *CollaboratorCreate) GetLabel() OptString {
	return s.Label
}

// GetConfiguration returns the value of Configuration.
func (s *CollaboratorCreate) GetConfiguration() OptCollaboratorCreateConfiguration {
	return s.Configuration
}

// GetOneOf returns the value of OneOf.
func (s *CollaboratorCreate) GetOneOf() CollaboratorCreateSum {
	return s.OneOf
}

// SetClientId sets the value of ClientId.
func (s *CollaboratorCreate) SetClientId(val string) {
	s.ClientId = val
}

// SetName sets the value of Name.
func (s *CollaboratorCreate) SetName(val OptString) {
	s.Name = val
}

// SetLabel sets the value of Label.
func (s *CollaboratorCreate) SetLabel(val OptString) {
	s.Label = val
}

// SetConfiguration sets the value of Configuration.
func (s *CollaboratorCreate) SetConfiguration(val OptCollaboratorCreateConfiguration) {
	s.Configuration = val
}

// SetOneOf sets the value of OneOf.
func (s *CollaboratorCreate) SetOneOf(val CollaboratorCreateSum) {
	s.OneOf = val
}

// A configuration of the collaborator. This is an object representing key-value pairs that will be
// available in the cage as environment variables.
type CollaboratorCreateConfiguration map[string]string

func (s *CollaboratorCreateConfiguration) init() CollaboratorCreateConfiguration {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// CollaboratorCreateSum represents sum type.
type CollaboratorCreateSum struct {
	Type         CollaboratorCreateSumType // switch on this field
	CodeProvider CodeProvider
	DataProvider DataProvider
	DataConsumer DataConsumer
}

// CollaboratorCreateSumType is oneOf type of CollaboratorCreateSum.
type CollaboratorCreateSumType string

// Possible values for CollaboratorCreateSumType.
const (
	CodeProviderCollaboratorCreateSum CollaboratorCreateSumType = "CodeProvider"
	DataProviderCollaboratorCreateSum CollaboratorCreateSumType = "DataProvider"
	DataConsumerCollaboratorCreateSum CollaboratorCreateSumType = "DataConsumer"
)

// IsCodeProvider reports whether CollaboratorCreateSum is CodeProvider.
func (s CollaboratorCreateSum) IsCodeProvider() bool {
	return s.Type == CodeProviderCollaboratorCreateSum
}

// IsDataProvider reports whether CollaboratorCreateSum is DataProvider.
func (s CollaboratorCreateSum) IsDataProvider() bool {
	return s.Type == DataProviderCollaboratorCreateSum
}

// IsDataConsumer reports whether CollaboratorCreateSum is DataConsumer.
func (s CollaboratorCreateSum) IsDataConsumer() bool {
	return s.Type == DataConsumerCollaboratorCreateSum
}

// SetCodeProvider sets CollaboratorCreateSum to CodeProvider.
func (s *CollaboratorCreateSum) SetCodeProvider(v CodeProvider) {
	s.Type = CodeProviderCollaboratorCreateSum
	s.CodeProvider = v
}

// GetCodeProvider returns CodeProvider and true boolean if CollaboratorCreateSum is CodeProvider.
func (s CollaboratorCreateSum) GetCodeProvider() (v CodeProvider, ok bool) {
	if !s.IsCodeProvider() {
		return v, false
	}
	return s.CodeProvider, true
}

// NewCodeProviderCollaboratorCreateSum returns new CollaboratorCreateSum from CodeProvider.
func NewCodeProviderCollaboratorCreateSum(v CodeProvider) CollaboratorCreateSum {
	var s CollaboratorCreateSum
	s.SetCodeProvider(v)
	return s
}

// SetDataProvider sets CollaboratorCreateSum to DataProvider.
func (s *CollaboratorCreateSum) SetDataProvider(v DataProvider) {
	s.Type = DataProviderCollaboratorCreateSum
	s.DataProvider = v
}

// GetDataProvider returns DataProvider and true boolean if CollaboratorCreateSum is DataProvider.
func (s CollaboratorCreateSum) GetDataProvider() (v DataProvider, ok bool) {
	if !s.IsDataProvider() {
		return v, false
	}
	return s.DataProvider, true
}

// NewDataProviderCollaboratorCreateSum returns new CollaboratorCreateSum from DataProvider.
func NewDataProviderCollaboratorCreateSum(v DataProvider) CollaboratorCreateSum {
	var s CollaboratorCreateSum
	s.SetDataProvider(v)
	return s
}

// SetDataConsumer sets CollaboratorCreateSum to DataConsumer.
func (s *CollaboratorCreateSum) SetDataConsumer(v DataConsumer) {
	s.Type = DataConsumerCollaboratorCreateSum
	s.DataConsumer = v
}

// GetDataConsumer returns DataConsumer and true boolean if CollaboratorCreateSum is DataConsumer.
func (s CollaboratorCreateSum) GetDataConsumer() (v DataConsumer, ok bool) {
	if !s.IsDataConsumer() {
		return v, false
	}
	return s.DataConsumer, true
}

// NewDataConsumerCollaboratorCreateSum returns new CollaboratorCreateSum from DataConsumer.
func NewDataConsumerCollaboratorCreateSum(v DataConsumer) CollaboratorCreateSum {
	var s CollaboratorCreateSum
	s.SetDataConsumer(v)
	return s
}

// CollaboratorSum represents sum type.
type CollaboratorSum struct {
	Type         CollaboratorSumType // switch on this field
	CodeProvider CodeProvider
	DataProvider DataProvider
	DataConsumer DataConsumer
}

// CollaboratorSumType is oneOf type of CollaboratorSum.
type CollaboratorSumType string

// Possible values for CollaboratorSumType.
const (
	CodeProviderCollaboratorSum CollaboratorSumType = "CodeProvider"
	DataProviderCollaboratorSum CollaboratorSumType = "DataProvider"
	DataConsumerCollaboratorSum CollaboratorSumType = "DataConsumer"
)

// IsCodeProvider reports whether CollaboratorSum is CodeProvider.
func (s CollaboratorSum) IsCodeProvider() bool { return s.Type == CodeProviderCollaboratorSum }

// IsDataProvider reports whether CollaboratorSum is DataProvider.
func (s CollaboratorSum) IsDataProvider() bool { return s.Type == DataProviderCollaboratorSum }

// IsDataConsumer reports whether CollaboratorSum is DataConsumer.
func (s CollaboratorSum) IsDataConsumer() bool { return s.Type == DataConsumerCollaboratorSum }

// SetCodeProvider sets CollaboratorSum to CodeProvider.
func (s *CollaboratorSum) SetCodeProvider(v CodeProvider) {
	s.Type = CodeProviderCollaboratorSum
	s.CodeProvider = v
}

// GetCodeProvider returns CodeProvider and true boolean if CollaboratorSum is CodeProvider.
func (s CollaboratorSum) GetCodeProvider() (v CodeProvider, ok bool) {
	if !s.IsCodeProvider() {
		return v, false
	}
	return s.CodeProvider, true
}

// NewCodeProviderCollaboratorSum returns new CollaboratorSum from CodeProvider.
func NewCodeProviderCollaboratorSum(v CodeProvider) CollaboratorSum {
	var s CollaboratorSum
	s.SetCodeProvider(v)
	return s
}

// SetDataProvider sets CollaboratorSum to DataProvider.
func (s *CollaboratorSum) SetDataProvider(v DataProvider) {
	s.Type = DataProviderCollaboratorSum
	s.DataProvider = v
}

// GetDataProvider returns DataProvider and true boolean if CollaboratorSum is DataProvider.
func (s CollaboratorSum) GetDataProvider() (v DataProvider, ok bool) {
	if !s.IsDataProvider() {
		return v, false
	}
	return s.DataProvider, true
}

// NewDataProviderCollaboratorSum returns new CollaboratorSum from DataProvider.
func NewDataProviderCollaboratorSum(v DataProvider) CollaboratorSum {
	var s CollaboratorSum
	s.SetDataProvider(v)
	return s
}

// SetDataConsumer sets CollaboratorSum to DataConsumer.
func (s *CollaboratorSum) SetDataConsumer(v DataConsumer) {
	s.Type = DataConsumerCollaboratorSum
	s.DataConsumer = v
}

// GetDataConsumer returns DataConsumer and true boolean if CollaboratorSum is DataConsumer.
func (s CollaboratorSum) GetDataConsumer() (v DataConsumer, ok bool) {
	if !s.IsDataConsumer() {
		return v, false
	}
	return s.DataConsumer, true
}

// NewDataConsumerCollaboratorSum returns new CollaboratorSum from DataConsumer.
func NewDataConsumerCollaboratorSum(v DataConsumer) CollaboratorSum {
	var s CollaboratorSum
	s.SetDataConsumer(v)
	return s
}

// Abstract Collaborator.
// Ref: #
type CollaboratorUpdate struct {
	ClientId OptString `json:"clientId"`
	// A name given the collaborator. This value is intended to be read by humans.
	Name OptString `json:"name"`
	// A label given the collaborator. This value is intended to refered to in code.
	Label OptString `json:"label"`
	// A configuration of the collaborator. This is an object representing key-value pairs that will be
	// available in the cage as environment variables.
	Configuration OptCollaboratorUpdateConfiguration `json:"configuration"`
	OneOf         CollaboratorUpdateSum
}

// GetClientId returns the value of ClientId.
func (s *CollaboratorUpdate) GetClientId() OptString {
	return s.ClientId
}

// GetName returns the value of Name.
func (s *CollaboratorUpdate) GetName() OptString {
	return s.Name
}

// GetLabel returns the value of Label.
func (s *CollaboratorUpdate) GetLabel() OptString {
	return s.Label
}

// GetConfiguration returns the value of Configuration.
func (s *CollaboratorUpdate) GetConfiguration() OptCollaboratorUpdateConfiguration {
	return s.Configuration
}

// GetOneOf returns the value of OneOf.
func (s *CollaboratorUpdate) GetOneOf() CollaboratorUpdateSum {
	return s.OneOf
}

// SetClientId sets the value of ClientId.
func (s *CollaboratorUpdate) SetClientId(val OptString) {
	s.ClientId = val
}

// SetName sets the value of Name.
func (s *CollaboratorUpdate) SetName(val OptString) {
	s.Name = val
}

// SetLabel sets the value of Label.
func (s *CollaboratorUpdate) SetLabel(val OptString) {
	s.Label = val
}

// SetConfiguration sets the value of Configuration.
func (s *CollaboratorUpdate) SetConfiguration(val OptCollaboratorUpdateConfiguration) {
	s.Configuration = val
}

// SetOneOf sets the value of OneOf.
func (s *CollaboratorUpdate) SetOneOf(val CollaboratorUpdateSum) {
	s.OneOf = val
}

// A configuration of the collaborator. This is an object representing key-value pairs that will be
// available in the cage as environment variables.
type CollaboratorUpdateConfiguration map[string]string

func (s *CollaboratorUpdateConfiguration) init() CollaboratorUpdateConfiguration {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// CollaboratorUpdateSum represents sum type.
type CollaboratorUpdateSum struct {
	Type         CollaboratorUpdateSumType // switch on this field
	CodeProvider CodeProvider
	DataProvider DataProvider
	DataConsumer DataConsumer
}

// CollaboratorUpdateSumType is oneOf type of CollaboratorUpdateSum.
type CollaboratorUpdateSumType string

// Possible values for CollaboratorUpdateSumType.
const (
	CodeProviderCollaboratorUpdateSum CollaboratorUpdateSumType = "CodeProvider"
	DataProviderCollaboratorUpdateSum CollaboratorUpdateSumType = "DataProvider"
	DataConsumerCollaboratorUpdateSum CollaboratorUpdateSumType = "DataConsumer"
)

// IsCodeProvider reports whether CollaboratorUpdateSum is CodeProvider.
func (s CollaboratorUpdateSum) IsCodeProvider() bool {
	return s.Type == CodeProviderCollaboratorUpdateSum
}

// IsDataProvider reports whether CollaboratorUpdateSum is DataProvider.
func (s CollaboratorUpdateSum) IsDataProvider() bool {
	return s.Type == DataProviderCollaboratorUpdateSum
}

// IsDataConsumer reports whether CollaboratorUpdateSum is DataConsumer.
func (s CollaboratorUpdateSum) IsDataConsumer() bool {
	return s.Type == DataConsumerCollaboratorUpdateSum
}

// SetCodeProvider sets CollaboratorUpdateSum to CodeProvider.
func (s *CollaboratorUpdateSum) SetCodeProvider(v CodeProvider) {
	s.Type = CodeProviderCollaboratorUpdateSum
	s.CodeProvider = v
}

// GetCodeProvider returns CodeProvider and true boolean if CollaboratorUpdateSum is CodeProvider.
func (s CollaboratorUpdateSum) GetCodeProvider() (v CodeProvider, ok bool) {
	if !s.IsCodeProvider() {
		return v, false
	}
	return s.CodeProvider, true
}

// NewCodeProviderCollaboratorUpdateSum returns new CollaboratorUpdateSum from CodeProvider.
func NewCodeProviderCollaboratorUpdateSum(v CodeProvider) CollaboratorUpdateSum {
	var s CollaboratorUpdateSum
	s.SetCodeProvider(v)
	return s
}

// SetDataProvider sets CollaboratorUpdateSum to DataProvider.
func (s *CollaboratorUpdateSum) SetDataProvider(v DataProvider) {
	s.Type = DataProviderCollaboratorUpdateSum
	s.DataProvider = v
}

// GetDataProvider returns DataProvider and true boolean if CollaboratorUpdateSum is DataProvider.
func (s CollaboratorUpdateSum) GetDataProvider() (v DataProvider, ok bool) {
	if !s.IsDataProvider() {
		return v, false
	}
	return s.DataProvider, true
}

// NewDataProviderCollaboratorUpdateSum returns new CollaboratorUpdateSum from DataProvider.
func NewDataProviderCollaboratorUpdateSum(v DataProvider) CollaboratorUpdateSum {
	var s CollaboratorUpdateSum
	s.SetDataProvider(v)
	return s
}

// SetDataConsumer sets CollaboratorUpdateSum to DataConsumer.
func (s *CollaboratorUpdateSum) SetDataConsumer(v DataConsumer) {
	s.Type = DataConsumerCollaboratorUpdateSum
	s.DataConsumer = v
}

// GetDataConsumer returns DataConsumer and true boolean if CollaboratorUpdateSum is DataConsumer.
func (s CollaboratorUpdateSum) GetDataConsumer() (v DataConsumer, ok bool) {
	if !s.IsDataConsumer() {
		return v, false
	}
	return s.DataConsumer, true
}

// NewDataConsumerCollaboratorUpdateSum returns new CollaboratorUpdateSum from DataConsumer.
func NewDataConsumerCollaboratorUpdateSum(v DataConsumer) CollaboratorUpdateSum {
	var s CollaboratorUpdateSum
	s.SetDataConsumer(v)
	return s
}

// ODCS description of a data contract.
// Ref: #
type CreateDataContractReqApplicationYaml struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s CreateDataContractReqApplicationYaml) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*CreateDataContractReqApplicationYaml) createDataContractReq() {}

type CreatedResource struct {
	ID string `json:"id"`
}

// GetID returns the value of ID.
func (s *CreatedResource) GetID() string {
	return s.ID
}

// SetID sets the value of ID.
func (s *CreatedResource) SetID(val string) {
	s.ID = val
}

// CreatedResourceHeaders wraps CreatedResource with response headers.
type CreatedResourceHeaders struct {
	Location string
	Response CreatedResource
}

// GetLocation returns the value of Location.
func (s *CreatedResourceHeaders) GetLocation() string {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *CreatedResourceHeaders) GetResponse() CreatedResource {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *CreatedResourceHeaders) SetLocation(val string) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *CreatedResourceHeaders) SetResponse(val CreatedResource) {
	s.Response = val
}

func (*CreatedResourceHeaders) createCollaborationSpaceRes() {}
func (*CreatedResourceHeaders) createCollaboratorRes()       {}
func (*CreatedResourceHeaders) createDataContractRes()       {}
func (*CreatedResourceHeaders) createPropertyRes()           {}
func (*CreatedResourceHeaders) createSchemaRes()             {}

// Ref: #
type CustomProperty struct {
	// The name of the key. Names should be in camel case–the same as if they were permanent properties
	// in the contract.
	Property OptString `json:"property"`
	// The value of the key.
	Value OptNilAnyType `json:"value"`
}

// GetProperty returns the value of Property.
func (s *CustomProperty) GetProperty() OptString {
	return s.Property
}

// GetValue returns the value of Value.
func (s *CustomProperty) GetValue() OptNilAnyType {
	return s.Value
}

// SetProperty sets the value of Property.
func (s *CustomProperty) SetProperty(val OptString) {
	s.Property = val
}

// SetValue sets the value of Value.
func (s *CustomProperty) SetValue(val OptNilAnyType) {
	s.Value = val
}

// Customise how data is fetched.
// Ref: #
type CustomServer struct {
	// Type of the server.
	Type string `json:"type"`
	// A URL to a location.
	Location OptURI `json:"location"`
	// Relative or absolute path to the data file(s).
	Path OptString `json:"path"`
	// Account used by the server.
	Account OptString `json:"account"`
	// Name of the catalog.
	Catalog OptString `json:"catalog"`
	// Name of the database.
	Database OptString `json:"database"`
	// Name of the dataset.
	Dataset OptString `json:"dataset"`
	// Delimiter.
	Delimiter OptString `json:"delimiter"`
	// Server endpoint.
	EndpointUrl OptURI `json:"endpointUrl"`
	// File format.
	Format OptString `json:"format"`
	// Host name or IP address.
	Host OptString `json:"host"`
	// Port to the server. No default value is assumed for custom servers.
	Port OptInt `json:"port"`
	// Project name.
	Project OptString `json:"project"`
	// Cloud region.
	Region OptString `json:"region"`
	// Region name.
	RegionName OptString `json:"regionName"`
	// Name of the schema.
	Schema OptString `json:"schema"`
	// Name of the service.
	ServiceName OptString `json:"serviceName"`
	// Staging directory.
	StagingDir OptString `json:"stagingDir"`
	// Name of the cluster or warehouse.
	Warehouse OptString `json:"warehouse"`
}

// GetType returns the value of Type.
func (s *CustomServer) GetType() string {
	return s.Type
}

// GetLocation returns the value of Location.
func (s *CustomServer) GetLocation() OptURI {
	return s.Location
}

// GetPath returns the value of Path.
func (s *CustomServer) GetPath() OptString {
	return s.Path
}

// GetAccount returns the value of Account.
func (s *CustomServer) GetAccount() OptString {
	return s.Account
}

// GetCatalog returns the value of Catalog.
func (s *CustomServer) GetCatalog() OptString {
	return s.Catalog
}

// GetDatabase returns the value of Database.
func (s *CustomServer) GetDatabase() OptString {
	return s.Database
}

// GetDataset returns the value of Dataset.
func (s *CustomServer) GetDataset() OptString {
	return s.Dataset
}

// GetDelimiter returns the value of Delimiter.
func (s *CustomServer) GetDelimiter() OptString {
	return s.Delimiter
}

// GetEndpointUrl returns the value of EndpointUrl.
func (s *CustomServer) GetEndpointUrl() OptURI {
	return s.EndpointUrl
}

// GetFormat returns the value of Format.
func (s *CustomServer) GetFormat() OptString {
	return s.Format
}

// GetHost returns the value of Host.
func (s *CustomServer) GetHost() OptString {
	return s.Host
}

// GetPort returns the value of Port.
func (s *CustomServer) GetPort() OptInt {
	return s.Port
}

// GetProject returns the value of Project.
func (s *CustomServer) GetProject() OptString {
	return s.Project
}

// GetRegion returns the value of Region.
func (s *CustomServer) GetRegion() OptString {
	return s.Region
}

// GetRegionName returns the value of RegionName.
func (s *CustomServer) GetRegionName() OptString {
	return s.RegionName
}

// GetSchema returns the value of Schema.
func (s *CustomServer) GetSchema() OptString {
	return s.Schema
}

// GetServiceName returns the value of ServiceName.
func (s *CustomServer) GetServiceName() OptString {
	return s.ServiceName
}

// GetStagingDir returns the value of StagingDir.
func (s *CustomServer) GetStagingDir() OptString {
	return s.StagingDir
}

// GetWarehouse returns the value of Warehouse.
func (s *CustomServer) GetWarehouse() OptString {
	return s.Warehouse
}

// SetType sets the value of Type.
func (s *CustomServer) SetType(val string) {
	s.Type = val
}

// SetLocation sets the value of Location.
func (s *CustomServer) SetLocation(val OptURI) {
	s.Location = val
}

// SetPath sets the value of Path.
func (s *CustomServer) SetPath(val OptString) {
	s.Path = val
}

// SetAccount sets the value of Account.
func (s *CustomServer) SetAccount(val OptString) {
	s.Account = val
}

// SetCatalog sets the value of Catalog.
func (s *CustomServer) SetCatalog(val OptString) {
	s.Catalog = val
}

// SetDatabase sets the value of Database.
func (s *CustomServer) SetDatabase(val OptString) {
	s.Database = val
}

// SetDataset sets the value of Dataset.
func (s *CustomServer) SetDataset(val OptString) {
	s.Dataset = val
}

// SetDelimiter sets the value of Delimiter.
func (s *CustomServer) SetDelimiter(val OptString) {
	s.Delimiter = val
}

// SetEndpointUrl sets the value of EndpointUrl.
func (s *CustomServer) SetEndpointUrl(val OptURI) {
	s.EndpointUrl = val
}

// SetFormat sets the value of Format.
func (s *CustomServer) SetFormat(val OptString) {
	s.Format = val
}

// SetHost sets the value of Host.
func (s *CustomServer) SetHost(val OptString) {
	s.Host = val
}

// SetPort sets the value of Port.
func (s *CustomServer) SetPort(val OptInt) {
	s.Port = val
}

// SetProject sets the value of Project.
func (s *CustomServer) SetProject(val OptString) {
	s.Project = val
}

// SetRegion sets the value of Region.
func (s *CustomServer) SetRegion(val OptString) {
	s.Region = val
}

// SetRegionName sets the value of RegionName.
func (s *CustomServer) SetRegionName(val OptString) {
	s.RegionName = val
}

// SetSchema sets the value of Schema.
func (s *CustomServer) SetSchema(val OptString) {
	s.Schema = val
}

// SetServiceName sets the value of ServiceName.
func (s *CustomServer) SetServiceName(val OptString) {
	s.ServiceName = val
}

// SetStagingDir sets the value of StagingDir.
func (s *CustomServer) SetStagingDir(val OptString) {
	s.StagingDir = val
}

// SetWarehouse sets the value of Warehouse.
func (s *CustomServer) SetWarehouse(val OptString) {
	s.Warehouse = val
}

// Someone who consumes data.
// Ref: #
type DataConsumer struct {
	Role     OptString               `json:"role"`
	Settings OptDataConsumerSettings `json:"settings"`
}

// GetRole returns the value of Role.
func (s *DataConsumer) GetRole() OptString {
	return s.Role
}

// GetSettings returns the value of Settings.
func (s *DataConsumer) GetSettings() OptDataConsumerSettings {
	return s.Settings
}

// SetRole sets the value of Role.
func (s *DataConsumer) SetRole(val OptString) {
	s.Role = val
}

// SetSettings sets the value of Settings.
func (s *DataConsumer) SetSettings(val OptDataConsumerSettings) {
	s.Settings = val
}

type DataConsumerSettings struct {
	Description OptString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *DataConsumerSettings) GetDescription() OptString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *DataConsumerSettings) SetDescription(val OptString) {
	s.Description = val
}

// Merged schema.
// Ref: #
type DataContract struct {
	// A unique identifier used in the Datavillage DCP to identify a data contract.
	ID string `json:"id"`
	// Id of the client owning the data contract.
	ClientId     string                   `json:"clientId"`
	DataContract DataContractDataContract `json:"dataContract"`
}

// GetID returns the value of ID.
func (s *DataContract) GetID() string {
	return s.ID
}

// GetClientId returns the value of ClientId.
func (s *DataContract) GetClientId() string {
	return s.ClientId
}

// GetDataContract returns the value of DataContract.
func (s *DataContract) GetDataContract() DataContractDataContract {
	return s.DataContract
}

// SetID sets the value of ID.
func (s *DataContract) SetID(val string) {
	s.ID = val
}

// SetClientId sets the value of ClientId.
func (s *DataContract) SetClientId(val string) {
	s.ClientId = val
}

// SetDataContract sets the value of DataContract.
func (s *DataContract) SetDataContract(val DataContractDataContract) {
	s.DataContract = val
}

func (*DataContract) getDataContractRes() {}

// Merged schema.
// Ref: #
type DataContractCreate struct {
	// Current version of the data contract.
	Version string `json:"version"`
	// Name of the data contract.
	Name string `json:"name"`
	// Current status of the dataset. Valid values are `production`, `test`, or `development`.
	Status string `json:"status"`
	// A unique identifier used to reduce the risk of dataset name collisions, such as a UUID. This only
	// has meaning for the data owner and is not used to identify data contracts in the Datavillage DCP.
	ID string `json:"id"`
	// Version of the standard used to build data contract. Default value is v3.0.0.
	ApiVersion DataContractCreateApiVersion `json:"apiVersion"`
	Kind       DataContractCreateKind       `json:"kind"`
	// Indicates the property the data is primarily associated with. Value is case insensitive.
	Tenant OptString `json:"tenant"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags []string `json:"tags"`
	// The name of the data product.
	DataProduct OptString      `json:"dataProduct"`
	Description OptDescription `json:"description"`
	Price       OptPrice       `json:"price"`
	// Name of the logical data domain.
	Domain OptString `json:"domain"`
	// Element (using the element path notation) to do the checks on.
	SlaDefaultElement OptString `json:"slaDefaultElement"`
	// Timestamp in UTC of when the data contract was created.
	ContractCreatedTs OptDateTime `json:"contractCreatedTs"`
	// List of servers where the datasets reside.
	Servers []ODCSServer   `json:"servers"`
	Schema  []SchemaCreate `json:"schema"`
}

// GetVersion returns the value of Version.
func (s *DataContractCreate) GetVersion() string {
	return s.Version
}

// GetName returns the value of Name.
func (s *DataContractCreate) GetName() string {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *DataContractCreate) GetStatus() string {
	return s.Status
}

// GetID returns the value of ID.
func (s *DataContractCreate) GetID() string {
	return s.ID
}

// GetApiVersion returns the value of ApiVersion.
func (s *DataContractCreate) GetApiVersion() DataContractCreateApiVersion {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *DataContractCreate) GetKind() DataContractCreateKind {
	return s.Kind
}

// GetTenant returns the value of Tenant.
func (s *DataContractCreate) GetTenant() OptString {
	return s.Tenant
}

// GetTags returns the value of Tags.
func (s *DataContractCreate) GetTags() []string {
	return s.Tags
}

// GetDataProduct returns the value of DataProduct.
func (s *DataContractCreate) GetDataProduct() OptString {
	return s.DataProduct
}

// GetDescription returns the value of Description.
func (s *DataContractCreate) GetDescription() OptDescription {
	return s.Description
}

// GetPrice returns the value of Price.
func (s *DataContractCreate) GetPrice() OptPrice {
	return s.Price
}

// GetDomain returns the value of Domain.
func (s *DataContractCreate) GetDomain() OptString {
	return s.Domain
}

// GetSlaDefaultElement returns the value of SlaDefaultElement.
func (s *DataContractCreate) GetSlaDefaultElement() OptString {
	return s.SlaDefaultElement
}

// GetContractCreatedTs returns the value of ContractCreatedTs.
func (s *DataContractCreate) GetContractCreatedTs() OptDateTime {
	return s.ContractCreatedTs
}

// GetServers returns the value of Servers.
func (s *DataContractCreate) GetServers() []ODCSServer {
	return s.Servers
}

// GetSchema returns the value of Schema.
func (s *DataContractCreate) GetSchema() []SchemaCreate {
	return s.Schema
}

// SetVersion sets the value of Version.
func (s *DataContractCreate) SetVersion(val string) {
	s.Version = val
}

// SetName sets the value of Name.
func (s *DataContractCreate) SetName(val string) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *DataContractCreate) SetStatus(val string) {
	s.Status = val
}

// SetID sets the value of ID.
func (s *DataContractCreate) SetID(val string) {
	s.ID = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *DataContractCreate) SetApiVersion(val DataContractCreateApiVersion) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *DataContractCreate) SetKind(val DataContractCreateKind) {
	s.Kind = val
}

// SetTenant sets the value of Tenant.
func (s *DataContractCreate) SetTenant(val OptString) {
	s.Tenant = val
}

// SetTags sets the value of Tags.
func (s *DataContractCreate) SetTags(val []string) {
	s.Tags = val
}

// SetDataProduct sets the value of DataProduct.
func (s *DataContractCreate) SetDataProduct(val OptString) {
	s.DataProduct = val
}

// SetDescription sets the value of Description.
func (s *DataContractCreate) SetDescription(val OptDescription) {
	s.Description = val
}

// SetPrice sets the value of Price.
func (s *DataContractCreate) SetPrice(val OptPrice) {
	s.Price = val
}

// SetDomain sets the value of Domain.
func (s *DataContractCreate) SetDomain(val OptString) {
	s.Domain = val
}

// SetSlaDefaultElement sets the value of SlaDefaultElement.
func (s *DataContractCreate) SetSlaDefaultElement(val OptString) {
	s.SlaDefaultElement = val
}

// SetContractCreatedTs sets the value of ContractCreatedTs.
func (s *DataContractCreate) SetContractCreatedTs(val OptDateTime) {
	s.ContractCreatedTs = val
}

// SetServers sets the value of Servers.
func (s *DataContractCreate) SetServers(val []ODCSServer) {
	s.Servers = val
}

// SetSchema sets the value of Schema.
func (s *DataContractCreate) SetSchema(val []SchemaCreate) {
	s.Schema = val
}

func (*DataContractCreate) createDataContractReq() {}

// Version of the standard used to build data contract. Default value is v3.0.0.
type DataContractCreateApiVersion string

const (
	DataContractCreateApiVersionV300 DataContractCreateApiVersion = "v3.0.0"
	DataContractCreateApiVersionV222 DataContractCreateApiVersion = "v2.2.2"
	DataContractCreateApiVersionV221 DataContractCreateApiVersion = "v2.2.1"
	DataContractCreateApiVersionV220 DataContractCreateApiVersion = "v2.2.0"
)

// AllValues returns all DataContractCreateApiVersion values.
func (DataContractCreateApiVersion) AllValues() []DataContractCreateApiVersion {
	return []DataContractCreateApiVersion{
		DataContractCreateApiVersionV300,
		DataContractCreateApiVersionV222,
		DataContractCreateApiVersionV221,
		DataContractCreateApiVersionV220,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataContractCreateApiVersion) MarshalText() ([]byte, error) {
	switch s {
	case DataContractCreateApiVersionV300:
		return []byte(s), nil
	case DataContractCreateApiVersionV222:
		return []byte(s), nil
	case DataContractCreateApiVersionV221:
		return []byte(s), nil
	case DataContractCreateApiVersionV220:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataContractCreateApiVersion) UnmarshalText(data []byte) error {
	switch DataContractCreateApiVersion(data) {
	case DataContractCreateApiVersionV300:
		*s = DataContractCreateApiVersionV300
		return nil
	case DataContractCreateApiVersionV222:
		*s = DataContractCreateApiVersionV222
		return nil
	case DataContractCreateApiVersionV221:
		*s = DataContractCreateApiVersionV221
		return nil
	case DataContractCreateApiVersionV220:
		*s = DataContractCreateApiVersionV220
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DataContractCreateKind string

const (
	DataContractCreateKindDataContract DataContractCreateKind = "DataContract"
)

// AllValues returns all DataContractCreateKind values.
func (DataContractCreateKind) AllValues() []DataContractCreateKind {
	return []DataContractCreateKind{
		DataContractCreateKindDataContract,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataContractCreateKind) MarshalText() ([]byte, error) {
	switch s {
	case DataContractCreateKindDataContract:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataContractCreateKind) UnmarshalText(data []byte) error {
	switch DataContractCreateKind(data) {
	case DataContractCreateKindDataContract:
		*s = DataContractCreateKindDataContract
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
type DataContractDataContract struct {
	// Current version of the data contract.
	Version string `json:"version"`
	// Name of the data contract.
	Name string `json:"name"`
	// Current status of the dataset. Valid values are `production`, `test`, or `development`.
	Status string `json:"status"`
	// A unique identifier used to reduce the risk of dataset name collisions, such as a UUID. This only
	// has meaning for the data owner and is not used to identify data contracts in the Datavillage DCP.
	ID string `json:"id"`
	// Version of the standard used to build data contract. Default value is v3.0.0.
	ApiVersion DataContractDataContractApiVersion `json:"apiVersion"`
	Kind       DataContractDataContractKind       `json:"kind"`
	// Indicates the property the data is primarily associated with. Value is case insensitive.
	Tenant OptString `json:"tenant"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags []string `json:"tags"`
	// The name of the data product.
	DataProduct OptString      `json:"dataProduct"`
	Description OptDescription `json:"description"`
	Price       OptPrice       `json:"price"`
	// Name of the logical data domain.
	Domain OptString `json:"domain"`
	// Element (using the element path notation) to do the checks on.
	SlaDefaultElement OptString `json:"slaDefaultElement"`
	// Timestamp in UTC of when the data contract was created.
	ContractCreatedTs OptDateTime `json:"contractCreatedTs"`
	// List of servers where the datasets reside.
	Servers []ODCSServer `json:"servers"`
	Schema  []Schema     `json:"schema"`
}

// GetVersion returns the value of Version.
func (s *DataContractDataContract) GetVersion() string {
	return s.Version
}

// GetName returns the value of Name.
func (s *DataContractDataContract) GetName() string {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *DataContractDataContract) GetStatus() string {
	return s.Status
}

// GetID returns the value of ID.
func (s *DataContractDataContract) GetID() string {
	return s.ID
}

// GetApiVersion returns the value of ApiVersion.
func (s *DataContractDataContract) GetApiVersion() DataContractDataContractApiVersion {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *DataContractDataContract) GetKind() DataContractDataContractKind {
	return s.Kind
}

// GetTenant returns the value of Tenant.
func (s *DataContractDataContract) GetTenant() OptString {
	return s.Tenant
}

// GetTags returns the value of Tags.
func (s *DataContractDataContract) GetTags() []string {
	return s.Tags
}

// GetDataProduct returns the value of DataProduct.
func (s *DataContractDataContract) GetDataProduct() OptString {
	return s.DataProduct
}

// GetDescription returns the value of Description.
func (s *DataContractDataContract) GetDescription() OptDescription {
	return s.Description
}

// GetPrice returns the value of Price.
func (s *DataContractDataContract) GetPrice() OptPrice {
	return s.Price
}

// GetDomain returns the value of Domain.
func (s *DataContractDataContract) GetDomain() OptString {
	return s.Domain
}

// GetSlaDefaultElement returns the value of SlaDefaultElement.
func (s *DataContractDataContract) GetSlaDefaultElement() OptString {
	return s.SlaDefaultElement
}

// GetContractCreatedTs returns the value of ContractCreatedTs.
func (s *DataContractDataContract) GetContractCreatedTs() OptDateTime {
	return s.ContractCreatedTs
}

// GetServers returns the value of Servers.
func (s *DataContractDataContract) GetServers() []ODCSServer {
	return s.Servers
}

// GetSchema returns the value of Schema.
func (s *DataContractDataContract) GetSchema() []Schema {
	return s.Schema
}

// SetVersion sets the value of Version.
func (s *DataContractDataContract) SetVersion(val string) {
	s.Version = val
}

// SetName sets the value of Name.
func (s *DataContractDataContract) SetName(val string) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *DataContractDataContract) SetStatus(val string) {
	s.Status = val
}

// SetID sets the value of ID.
func (s *DataContractDataContract) SetID(val string) {
	s.ID = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *DataContractDataContract) SetApiVersion(val DataContractDataContractApiVersion) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *DataContractDataContract) SetKind(val DataContractDataContractKind) {
	s.Kind = val
}

// SetTenant sets the value of Tenant.
func (s *DataContractDataContract) SetTenant(val OptString) {
	s.Tenant = val
}

// SetTags sets the value of Tags.
func (s *DataContractDataContract) SetTags(val []string) {
	s.Tags = val
}

// SetDataProduct sets the value of DataProduct.
func (s *DataContractDataContract) SetDataProduct(val OptString) {
	s.DataProduct = val
}

// SetDescription sets the value of Description.
func (s *DataContractDataContract) SetDescription(val OptDescription) {
	s.Description = val
}

// SetPrice sets the value of Price.
func (s *DataContractDataContract) SetPrice(val OptPrice) {
	s.Price = val
}

// SetDomain sets the value of Domain.
func (s *DataContractDataContract) SetDomain(val OptString) {
	s.Domain = val
}

// SetSlaDefaultElement sets the value of SlaDefaultElement.
func (s *DataContractDataContract) SetSlaDefaultElement(val OptString) {
	s.SlaDefaultElement = val
}

// SetContractCreatedTs sets the value of ContractCreatedTs.
func (s *DataContractDataContract) SetContractCreatedTs(val OptDateTime) {
	s.ContractCreatedTs = val
}

// SetServers sets the value of Servers.
func (s *DataContractDataContract) SetServers(val []ODCSServer) {
	s.Servers = val
}

// SetSchema sets the value of Schema.
func (s *DataContractDataContract) SetSchema(val []Schema) {
	s.Schema = val
}

// Version of the standard used to build data contract. Default value is v3.0.0.
type DataContractDataContractApiVersion string

const (
	DataContractDataContractApiVersionV300 DataContractDataContractApiVersion = "v3.0.0"
	DataContractDataContractApiVersionV222 DataContractDataContractApiVersion = "v2.2.2"
	DataContractDataContractApiVersionV221 DataContractDataContractApiVersion = "v2.2.1"
	DataContractDataContractApiVersionV220 DataContractDataContractApiVersion = "v2.2.0"
)

// AllValues returns all DataContractDataContractApiVersion values.
func (DataContractDataContractApiVersion) AllValues() []DataContractDataContractApiVersion {
	return []DataContractDataContractApiVersion{
		DataContractDataContractApiVersionV300,
		DataContractDataContractApiVersionV222,
		DataContractDataContractApiVersionV221,
		DataContractDataContractApiVersionV220,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataContractDataContractApiVersion) MarshalText() ([]byte, error) {
	switch s {
	case DataContractDataContractApiVersionV300:
		return []byte(s), nil
	case DataContractDataContractApiVersionV222:
		return []byte(s), nil
	case DataContractDataContractApiVersionV221:
		return []byte(s), nil
	case DataContractDataContractApiVersionV220:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataContractDataContractApiVersion) UnmarshalText(data []byte) error {
	switch DataContractDataContractApiVersion(data) {
	case DataContractDataContractApiVersionV300:
		*s = DataContractDataContractApiVersionV300
		return nil
	case DataContractDataContractApiVersionV222:
		*s = DataContractDataContractApiVersionV222
		return nil
	case DataContractDataContractApiVersionV221:
		*s = DataContractDataContractApiVersionV221
		return nil
	case DataContractDataContractApiVersionV220:
		*s = DataContractDataContractApiVersionV220
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DataContractDataContractKind string

const (
	DataContractDataContractKindDataContract DataContractDataContractKind = "DataContract"
)

// AllValues returns all DataContractDataContractKind values.
func (DataContractDataContractKind) AllValues() []DataContractDataContractKind {
	return []DataContractDataContractKind{
		DataContractDataContractKindDataContract,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataContractDataContractKind) MarshalText() ([]byte, error) {
	switch s {
	case DataContractDataContractKindDataContract:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataContractDataContractKind) UnmarshalText(data []byte) error {
	switch DataContractDataContractKind(data) {
	case DataContractDataContractKindDataContract:
		*s = DataContractDataContractKindDataContract
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #
type DataContractSummary struct {
	// A unique identifier used in the Datavillage DCP to identify a data contract.
	ID string `json:"id"`
	// Id of the client owning the data contract.
	ClientId            string                                 `json:"clientId"`
	DataContractSummary DataContractSummaryDataContractSummary `json:"dataContractSummary"`
}

// GetID returns the value of ID.
func (s *DataContractSummary) GetID() string {
	return s.ID
}

// GetClientId returns the value of ClientId.
func (s *DataContractSummary) GetClientId() string {
	return s.ClientId
}

// GetDataContractSummary returns the value of DataContractSummary.
func (s *DataContractSummary) GetDataContractSummary() DataContractSummaryDataContractSummary {
	return s.DataContractSummary
}

// SetID sets the value of ID.
func (s *DataContractSummary) SetID(val string) {
	s.ID = val
}

// SetClientId sets the value of ClientId.
func (s *DataContractSummary) SetClientId(val string) {
	s.ClientId = val
}

// SetDataContractSummary sets the value of DataContractSummary.
func (s *DataContractSummary) SetDataContractSummary(val DataContractSummaryDataContractSummary) {
	s.DataContractSummary = val
}

type DataContractSummaryDataContractSummary struct {
	// Current version of the data contract.
	Version string `json:"version"`
	// Name of the data contract.
	Name string `json:"name"`
	// Current status of the dataset. Valid values are `production`, `test`, or `development`.
	Status string `json:"status"`
}

// GetVersion returns the value of Version.
func (s *DataContractSummaryDataContractSummary) GetVersion() string {
	return s.Version
}

// GetName returns the value of Name.
func (s *DataContractSummaryDataContractSummary) GetName() string {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *DataContractSummaryDataContractSummary) GetStatus() string {
	return s.Status
}

// SetVersion sets the value of Version.
func (s *DataContractSummaryDataContractSummary) SetVersion(val string) {
	s.Version = val
}

// SetName sets the value of Name.
func (s *DataContractSummaryDataContractSummary) SetName(val string) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *DataContractSummaryDataContractSummary) SetStatus(val string) {
	s.Status = val
}

// Merged schema.
// Ref: #
type DataContractUpdate struct {
	// Current version of the data contract.
	Version OptString `json:"version"`
	// Name of the data contract.
	Name OptString `json:"name"`
	// Current status of the dataset. Valid values are `production`, `test`, or `development`.
	Status OptString `json:"status"`
	// A unique identifier used to reduce the risk of dataset name collisions, such as a UUID. This only
	// has meaning for the data owner and is not used to identify data contracts in the Datavillage DCP.
	ID OptString `json:"id"`
	// Version of the standard used to build data contract. Default value is v3.0.0.
	ApiVersion OptDataContractUpdateApiVersion `json:"apiVersion"`
	Kind       OptDataContractUpdateKind       `json:"kind"`
	// Indicates the property the data is primarily associated with. Value is case insensitive.
	Tenant OptString `json:"tenant"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags []string `json:"tags"`
	// The name of the data product.
	DataProduct OptString      `json:"dataProduct"`
	Description OptDescription `json:"description"`
	Price       OptPrice       `json:"price"`
	// Name of the logical data domain.
	Domain OptString `json:"domain"`
	// Element (using the element path notation) to do the checks on.
	SlaDefaultElement OptString `json:"slaDefaultElement"`
	// Timestamp in UTC of when the data contract was created.
	ContractCreatedTs OptDateTime `json:"contractCreatedTs"`
	// List of servers where the datasets reside.
	Servers []ODCSServer   `json:"servers"`
	Schema  []SchemaCreate `json:"schema"`
}

// GetVersion returns the value of Version.
func (s *DataContractUpdate) GetVersion() OptString {
	return s.Version
}

// GetName returns the value of Name.
func (s *DataContractUpdate) GetName() OptString {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *DataContractUpdate) GetStatus() OptString {
	return s.Status
}

// GetID returns the value of ID.
func (s *DataContractUpdate) GetID() OptString {
	return s.ID
}

// GetApiVersion returns the value of ApiVersion.
func (s *DataContractUpdate) GetApiVersion() OptDataContractUpdateApiVersion {
	return s.ApiVersion
}

// GetKind returns the value of Kind.
func (s *DataContractUpdate) GetKind() OptDataContractUpdateKind {
	return s.Kind
}

// GetTenant returns the value of Tenant.
func (s *DataContractUpdate) GetTenant() OptString {
	return s.Tenant
}

// GetTags returns the value of Tags.
func (s *DataContractUpdate) GetTags() []string {
	return s.Tags
}

// GetDataProduct returns the value of DataProduct.
func (s *DataContractUpdate) GetDataProduct() OptString {
	return s.DataProduct
}

// GetDescription returns the value of Description.
func (s *DataContractUpdate) GetDescription() OptDescription {
	return s.Description
}

// GetPrice returns the value of Price.
func (s *DataContractUpdate) GetPrice() OptPrice {
	return s.Price
}

// GetDomain returns the value of Domain.
func (s *DataContractUpdate) GetDomain() OptString {
	return s.Domain
}

// GetSlaDefaultElement returns the value of SlaDefaultElement.
func (s *DataContractUpdate) GetSlaDefaultElement() OptString {
	return s.SlaDefaultElement
}

// GetContractCreatedTs returns the value of ContractCreatedTs.
func (s *DataContractUpdate) GetContractCreatedTs() OptDateTime {
	return s.ContractCreatedTs
}

// GetServers returns the value of Servers.
func (s *DataContractUpdate) GetServers() []ODCSServer {
	return s.Servers
}

// GetSchema returns the value of Schema.
func (s *DataContractUpdate) GetSchema() []SchemaCreate {
	return s.Schema
}

// SetVersion sets the value of Version.
func (s *DataContractUpdate) SetVersion(val OptString) {
	s.Version = val
}

// SetName sets the value of Name.
func (s *DataContractUpdate) SetName(val OptString) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *DataContractUpdate) SetStatus(val OptString) {
	s.Status = val
}

// SetID sets the value of ID.
func (s *DataContractUpdate) SetID(val OptString) {
	s.ID = val
}

// SetApiVersion sets the value of ApiVersion.
func (s *DataContractUpdate) SetApiVersion(val OptDataContractUpdateApiVersion) {
	s.ApiVersion = val
}

// SetKind sets the value of Kind.
func (s *DataContractUpdate) SetKind(val OptDataContractUpdateKind) {
	s.Kind = val
}

// SetTenant sets the value of Tenant.
func (s *DataContractUpdate) SetTenant(val OptString) {
	s.Tenant = val
}

// SetTags sets the value of Tags.
func (s *DataContractUpdate) SetTags(val []string) {
	s.Tags = val
}

// SetDataProduct sets the value of DataProduct.
func (s *DataContractUpdate) SetDataProduct(val OptString) {
	s.DataProduct = val
}

// SetDescription sets the value of Description.
func (s *DataContractUpdate) SetDescription(val OptDescription) {
	s.Description = val
}

// SetPrice sets the value of Price.
func (s *DataContractUpdate) SetPrice(val OptPrice) {
	s.Price = val
}

// SetDomain sets the value of Domain.
func (s *DataContractUpdate) SetDomain(val OptString) {
	s.Domain = val
}

// SetSlaDefaultElement sets the value of SlaDefaultElement.
func (s *DataContractUpdate) SetSlaDefaultElement(val OptString) {
	s.SlaDefaultElement = val
}

// SetContractCreatedTs sets the value of ContractCreatedTs.
func (s *DataContractUpdate) SetContractCreatedTs(val OptDateTime) {
	s.ContractCreatedTs = val
}

// SetServers sets the value of Servers.
func (s *DataContractUpdate) SetServers(val []ODCSServer) {
	s.Servers = val
}

// SetSchema sets the value of Schema.
func (s *DataContractUpdate) SetSchema(val []SchemaCreate) {
	s.Schema = val
}

// Version of the standard used to build data contract. Default value is v3.0.0.
type DataContractUpdateApiVersion string

const (
	DataContractUpdateApiVersionV300 DataContractUpdateApiVersion = "v3.0.0"
	DataContractUpdateApiVersionV222 DataContractUpdateApiVersion = "v2.2.2"
	DataContractUpdateApiVersionV221 DataContractUpdateApiVersion = "v2.2.1"
	DataContractUpdateApiVersionV220 DataContractUpdateApiVersion = "v2.2.0"
)

// AllValues returns all DataContractUpdateApiVersion values.
func (DataContractUpdateApiVersion) AllValues() []DataContractUpdateApiVersion {
	return []DataContractUpdateApiVersion{
		DataContractUpdateApiVersionV300,
		DataContractUpdateApiVersionV222,
		DataContractUpdateApiVersionV221,
		DataContractUpdateApiVersionV220,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataContractUpdateApiVersion) MarshalText() ([]byte, error) {
	switch s {
	case DataContractUpdateApiVersionV300:
		return []byte(s), nil
	case DataContractUpdateApiVersionV222:
		return []byte(s), nil
	case DataContractUpdateApiVersionV221:
		return []byte(s), nil
	case DataContractUpdateApiVersionV220:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataContractUpdateApiVersion) UnmarshalText(data []byte) error {
	switch DataContractUpdateApiVersion(data) {
	case DataContractUpdateApiVersionV300:
		*s = DataContractUpdateApiVersionV300
		return nil
	case DataContractUpdateApiVersionV222:
		*s = DataContractUpdateApiVersionV222
		return nil
	case DataContractUpdateApiVersionV221:
		*s = DataContractUpdateApiVersionV221
		return nil
	case DataContractUpdateApiVersionV220:
		*s = DataContractUpdateApiVersionV220
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type DataContractUpdateKind string

const (
	DataContractUpdateKindDataContract DataContractUpdateKind = "DataContract"
)

// AllValues returns all DataContractUpdateKind values.
func (DataContractUpdateKind) AllValues() []DataContractUpdateKind {
	return []DataContractUpdateKind{
		DataContractUpdateKindDataContract,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataContractUpdateKind) MarshalText() ([]byte, error) {
	switch s {
	case DataContractUpdateKindDataContract:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataContractUpdateKind) UnmarshalText(data []byte) error {
	switch DataContractUpdateKind(data) {
	case DataContractUpdateKindDataContract:
		*s = DataContractUpdateKindDataContract
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Someone who provides Data.
// Ref: #
type DataProvider struct {
	Role     OptString               `json:"role"`
	Settings OptDataProviderSettings `json:"settings"`
}

// GetRole returns the value of Role.
func (s *DataProvider) GetRole() OptString {
	return s.Role
}

// GetSettings returns the value of Settings.
func (s *DataProvider) GetSettings() OptDataProviderSettings {
	return s.Settings
}

// SetRole sets the value of Role.
func (s *DataProvider) SetRole(val OptString) {
	s.Role = val
}

// SetSettings sets the value of Settings.
func (s *DataProvider) SetSettings(val OptDataProviderSettings) {
	s.Settings = val
}

type DataProviderSettings struct {
	Description OptString `json:"description"`
}

// GetDescription returns the value of Description.
func (s *DataProviderSettings) GetDescription() OptString {
	return s.Description
}

// SetDescription sets the value of Description.
func (s *DataProviderSettings) SetDescription(val OptString) {
	s.Description = val
}

type DataQuality []DataQualityItem

type DataQualityItem struct {
	// Consequences of the rule failure.
	BusinessImpact OptString `json:"businessImpact"`
	// Describe the quality check to be completed.
	Description OptString `json:"description"`
	// The key performance indicator (KPI) or dimension for data quality.
	Dimension OptDataQualityItemDimension `json:"dimension"`
	Method    OptString                   `json:"method"`
	// Name of the data quality check.
	Name OptString `json:"name"`
	// Rule execution schedule details.
	Schedule OptString `json:"schedule"`
	// The name or type of scheduler used to start the data quality check.
	Scheduler OptString `json:"scheduler"`
	// The severance of the quality rule.
	Severity OptString `json:"severity"`
	// Unit the rule is using, popular values are `rows` or `percent`, but any value is allowed.
	Unit OptString `json:"unit"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags                     []string                `json:"tags"`
	AuthoritativeDefinitions []AuthorativeDefinition `json:"authoritativeDefinitions"`
	// Additional properties required for rule execution.
	CustomProperties []CustomProperty `json:"customProperties"`
	OneOf            DataQualityItemSum
}

// GetBusinessImpact returns the value of BusinessImpact.
func (s *DataQualityItem) GetBusinessImpact() OptString {
	return s.BusinessImpact
}

// GetDescription returns the value of Description.
func (s *DataQualityItem) GetDescription() OptString {
	return s.Description
}

// GetDimension returns the value of Dimension.
func (s *DataQualityItem) GetDimension() OptDataQualityItemDimension {
	return s.Dimension
}

// GetMethod returns the value of Method.
func (s *DataQualityItem) GetMethod() OptString {
	return s.Method
}

// GetName returns the value of Name.
func (s *DataQualityItem) GetName() OptString {
	return s.Name
}

// GetSchedule returns the value of Schedule.
func (s *DataQualityItem) GetSchedule() OptString {
	return s.Schedule
}

// GetScheduler returns the value of Scheduler.
func (s *DataQualityItem) GetScheduler() OptString {
	return s.Scheduler
}

// GetSeverity returns the value of Severity.
func (s *DataQualityItem) GetSeverity() OptString {
	return s.Severity
}

// GetUnit returns the value of Unit.
func (s *DataQualityItem) GetUnit() OptString {
	return s.Unit
}

// GetTags returns the value of Tags.
func (s *DataQualityItem) GetTags() []string {
	return s.Tags
}

// GetAuthoritativeDefinitions returns the value of AuthoritativeDefinitions.
func (s *DataQualityItem) GetAuthoritativeDefinitions() []AuthorativeDefinition {
	return s.AuthoritativeDefinitions
}

// GetCustomProperties returns the value of CustomProperties.
func (s *DataQualityItem) GetCustomProperties() []CustomProperty {
	return s.CustomProperties
}

// GetOneOf returns the value of OneOf.
func (s *DataQualityItem) GetOneOf() DataQualityItemSum {
	return s.OneOf
}

// SetBusinessImpact sets the value of BusinessImpact.
func (s *DataQualityItem) SetBusinessImpact(val OptString) {
	s.BusinessImpact = val
}

// SetDescription sets the value of Description.
func (s *DataQualityItem) SetDescription(val OptString) {
	s.Description = val
}

// SetDimension sets the value of Dimension.
func (s *DataQualityItem) SetDimension(val OptDataQualityItemDimension) {
	s.Dimension = val
}

// SetMethod sets the value of Method.
func (s *DataQualityItem) SetMethod(val OptString) {
	s.Method = val
}

// SetName sets the value of Name.
func (s *DataQualityItem) SetName(val OptString) {
	s.Name = val
}

// SetSchedule sets the value of Schedule.
func (s *DataQualityItem) SetSchedule(val OptString) {
	s.Schedule = val
}

// SetScheduler sets the value of Scheduler.
func (s *DataQualityItem) SetScheduler(val OptString) {
	s.Scheduler = val
}

// SetSeverity sets the value of Severity.
func (s *DataQualityItem) SetSeverity(val OptString) {
	s.Severity = val
}

// SetUnit sets the value of Unit.
func (s *DataQualityItem) SetUnit(val OptString) {
	s.Unit = val
}

// SetTags sets the value of Tags.
func (s *DataQualityItem) SetTags(val []string) {
	s.Tags = val
}

// SetAuthoritativeDefinitions sets the value of AuthoritativeDefinitions.
func (s *DataQualityItem) SetAuthoritativeDefinitions(val []AuthorativeDefinition) {
	s.AuthoritativeDefinitions = val
}

// SetCustomProperties sets the value of CustomProperties.
func (s *DataQualityItem) SetCustomProperties(val []CustomProperty) {
	s.CustomProperties = val
}

// SetOneOf sets the value of OneOf.
func (s *DataQualityItem) SetOneOf(val DataQualityItemSum) {
	s.OneOf = val
}

// The key performance indicator (KPI) or dimension for data quality.
type DataQualityItemDimension string

const (
	DataQualityItemDimensionAccuracy     DataQualityItemDimension = "accuracy"
	DataQualityItemDimensionCompleteness DataQualityItemDimension = "completeness"
	DataQualityItemDimensionConformity   DataQualityItemDimension = "conformity"
	DataQualityItemDimensionConsistency  DataQualityItemDimension = "consistency"
	DataQualityItemDimensionCoverage     DataQualityItemDimension = "coverage"
	DataQualityItemDimensionTimeliness   DataQualityItemDimension = "timeliness"
	DataQualityItemDimensionUniqueness   DataQualityItemDimension = "uniqueness"
)

// AllValues returns all DataQualityItemDimension values.
func (DataQualityItemDimension) AllValues() []DataQualityItemDimension {
	return []DataQualityItemDimension{
		DataQualityItemDimensionAccuracy,
		DataQualityItemDimensionCompleteness,
		DataQualityItemDimensionConformity,
		DataQualityItemDimensionConsistency,
		DataQualityItemDimensionCoverage,
		DataQualityItemDimensionTimeliness,
		DataQualityItemDimensionUniqueness,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataQualityItemDimension) MarshalText() ([]byte, error) {
	switch s {
	case DataQualityItemDimensionAccuracy:
		return []byte(s), nil
	case DataQualityItemDimensionCompleteness:
		return []byte(s), nil
	case DataQualityItemDimensionConformity:
		return []byte(s), nil
	case DataQualityItemDimensionConsistency:
		return []byte(s), nil
	case DataQualityItemDimensionCoverage:
		return []byte(s), nil
	case DataQualityItemDimensionTimeliness:
		return []byte(s), nil
	case DataQualityItemDimensionUniqueness:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataQualityItemDimension) UnmarshalText(data []byte) error {
	switch DataQualityItemDimension(data) {
	case DataQualityItemDimensionAccuracy:
		*s = DataQualityItemDimensionAccuracy
		return nil
	case DataQualityItemDimensionCompleteness:
		*s = DataQualityItemDimensionCompleteness
		return nil
	case DataQualityItemDimensionConformity:
		*s = DataQualityItemDimensionConformity
		return nil
	case DataQualityItemDimensionConsistency:
		*s = DataQualityItemDimensionConsistency
		return nil
	case DataQualityItemDimensionCoverage:
		*s = DataQualityItemDimensionCoverage
		return nil
	case DataQualityItemDimensionTimeliness:
		*s = DataQualityItemDimensionTimeliness
		return nil
	case DataQualityItemDimensionUniqueness:
		*s = DataQualityItemDimensionUniqueness
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// DataQualityItemSum represents sum type.
type DataQualityItemSum struct {
	Type               DataQualityItemSumType // switch on this field
	DataQualityLibrary DataQualityLibrary
	DataQualitySql     DataQualitySql
}

// DataQualityItemSumType is oneOf type of DataQualityItemSum.
type DataQualityItemSumType string

// Possible values for DataQualityItemSumType.
const (
	DataQualityLibraryDataQualityItemSum DataQualityItemSumType = "library"
	DataQualitySqlDataQualityItemSum     DataQualityItemSumType = "sql"
)

// IsDataQualityLibrary reports whether DataQualityItemSum is DataQualityLibrary.
func (s DataQualityItemSum) IsDataQualityLibrary() bool {
	return s.Type == DataQualityLibraryDataQualityItemSum
}

// IsDataQualitySql reports whether DataQualityItemSum is DataQualitySql.
func (s DataQualityItemSum) IsDataQualitySql() bool {
	return s.Type == DataQualitySqlDataQualityItemSum
}

// SetDataQualityLibrary sets DataQualityItemSum to DataQualityLibrary.
func (s *DataQualityItemSum) SetDataQualityLibrary(v DataQualityLibrary) {
	s.Type = DataQualityLibraryDataQualityItemSum
	s.DataQualityLibrary = v
}

// GetDataQualityLibrary returns DataQualityLibrary and true boolean if DataQualityItemSum is DataQualityLibrary.
func (s DataQualityItemSum) GetDataQualityLibrary() (v DataQualityLibrary, ok bool) {
	if !s.IsDataQualityLibrary() {
		return v, false
	}
	return s.DataQualityLibrary, true
}

// NewDataQualityLibraryDataQualityItemSum returns new DataQualityItemSum from DataQualityLibrary.
func NewDataQualityLibraryDataQualityItemSum(v DataQualityLibrary) DataQualityItemSum {
	var s DataQualityItemSum
	s.SetDataQualityLibrary(v)
	return s
}

// SetDataQualitySql sets DataQualityItemSum to DataQualitySql.
func (s *DataQualityItemSum) SetDataQualitySql(v DataQualitySql) {
	s.Type = DataQualitySqlDataQualityItemSum
	s.DataQualitySql = v
}

// GetDataQualitySql returns DataQualitySql and true boolean if DataQualityItemSum is DataQualitySql.
func (s DataQualityItemSum) GetDataQualitySql() (v DataQualitySql, ok bool) {
	if !s.IsDataQualitySql() {
		return v, false
	}
	return s.DataQualitySql, true
}

// NewDataQualitySqlDataQualityItemSum returns new DataQualityItemSum from DataQualitySql.
func NewDataQualitySqlDataQualityItemSum(v DataQualitySql) DataQualityItemSum {
	var s DataQualityItemSum
	s.SetDataQualitySql(v)
	return s
}

// Ref: #
type DataQualityLibrary struct {
	// The type of quality check. 'text' is human-readable text that describes the quality of the data.
	// 'library' is a set of maintained predefined quality attributes such as row count or unique. 'sql'
	// is an individual SQL query that returns a value that can be compared. 'custom' is quality
	// attributes that are vendor-specific, such as Soda or Great Expectations.
	Type OptDataQualityLibraryType `json:"type"`
	// Define a data quality check based on the predefined rules as per ODCS.
	Rule string `json:"rule"`
	// Must be equal to the value to be valid. When using numbers, it is equivalent to '='.
	MustBe jx.Raw `json:"mustBe"`
	// Must not be equal to the value to be valid. When using numbers, it is equivalent to '!='.
	MustNotBe jx.Raw `json:"mustNotBe"`
	// Must be greater than the value to be valid. It is equivalent to '>'.
	MustBeGreaterThan OptFloat64 `json:"mustBeGreaterThan"`
	// Must be greater than or equal to the value to be valid. It is equivalent to '>='.
	MustBeGreaterOrEqualTo OptFloat64 `json:"mustBeGreaterOrEqualTo"`
	// Must be less than the value to be valid. It is equivalent to '<'.
	MustBeLessThan OptFloat64 `json:"mustBeLessThan"`
	// Must be less than or equal to the value to be valid. It is equivalent to '<='.
	MustBeLessOrEqualTo OptFloat64 `json:"mustBeLessOrEqualTo"`
	// Must be between the two numbers to be valid. Smallest number first in the array.
	MustBeBetween OptNilFloat64Array `json:"mustBeBetween"`
	// Must not be between the two numbers to be valid. Smallest number first in the array.
	MustNotBeBetween OptNilFloat64Array `json:"mustNotBeBetween"`
}

// GetType returns the value of Type.
func (s *DataQualityLibrary) GetType() OptDataQualityLibraryType {
	return s.Type
}

// GetRule returns the value of Rule.
func (s *DataQualityLibrary) GetRule() string {
	return s.Rule
}

// GetMustBe returns the value of MustBe.
func (s *DataQualityLibrary) GetMustBe() jx.Raw {
	return s.MustBe
}

// GetMustNotBe returns the value of MustNotBe.
func (s *DataQualityLibrary) GetMustNotBe() jx.Raw {
	return s.MustNotBe
}

// GetMustBeGreaterThan returns the value of MustBeGreaterThan.
func (s *DataQualityLibrary) GetMustBeGreaterThan() OptFloat64 {
	return s.MustBeGreaterThan
}

// GetMustBeGreaterOrEqualTo returns the value of MustBeGreaterOrEqualTo.
func (s *DataQualityLibrary) GetMustBeGreaterOrEqualTo() OptFloat64 {
	return s.MustBeGreaterOrEqualTo
}

// GetMustBeLessThan returns the value of MustBeLessThan.
func (s *DataQualityLibrary) GetMustBeLessThan() OptFloat64 {
	return s.MustBeLessThan
}

// GetMustBeLessOrEqualTo returns the value of MustBeLessOrEqualTo.
func (s *DataQualityLibrary) GetMustBeLessOrEqualTo() OptFloat64 {
	return s.MustBeLessOrEqualTo
}

// GetMustBeBetween returns the value of MustBeBetween.
func (s *DataQualityLibrary) GetMustBeBetween() OptNilFloat64Array {
	return s.MustBeBetween
}

// GetMustNotBeBetween returns the value of MustNotBeBetween.
func (s *DataQualityLibrary) GetMustNotBeBetween() OptNilFloat64Array {
	return s.MustNotBeBetween
}

// SetType sets the value of Type.
func (s *DataQualityLibrary) SetType(val OptDataQualityLibraryType) {
	s.Type = val
}

// SetRule sets the value of Rule.
func (s *DataQualityLibrary) SetRule(val string) {
	s.Rule = val
}

// SetMustBe sets the value of MustBe.
func (s *DataQualityLibrary) SetMustBe(val jx.Raw) {
	s.MustBe = val
}

// SetMustNotBe sets the value of MustNotBe.
func (s *DataQualityLibrary) SetMustNotBe(val jx.Raw) {
	s.MustNotBe = val
}

// SetMustBeGreaterThan sets the value of MustBeGreaterThan.
func (s *DataQualityLibrary) SetMustBeGreaterThan(val OptFloat64) {
	s.MustBeGreaterThan = val
}

// SetMustBeGreaterOrEqualTo sets the value of MustBeGreaterOrEqualTo.
func (s *DataQualityLibrary) SetMustBeGreaterOrEqualTo(val OptFloat64) {
	s.MustBeGreaterOrEqualTo = val
}

// SetMustBeLessThan sets the value of MustBeLessThan.
func (s *DataQualityLibrary) SetMustBeLessThan(val OptFloat64) {
	s.MustBeLessThan = val
}

// SetMustBeLessOrEqualTo sets the value of MustBeLessOrEqualTo.
func (s *DataQualityLibrary) SetMustBeLessOrEqualTo(val OptFloat64) {
	s.MustBeLessOrEqualTo = val
}

// SetMustBeBetween sets the value of MustBeBetween.
func (s *DataQualityLibrary) SetMustBeBetween(val OptNilFloat64Array) {
	s.MustBeBetween = val
}

// SetMustNotBeBetween sets the value of MustNotBeBetween.
func (s *DataQualityLibrary) SetMustNotBeBetween(val OptNilFloat64Array) {
	s.MustNotBeBetween = val
}

// The type of quality check. 'text' is human-readable text that describes the quality of the data.
// 'library' is a set of maintained predefined quality attributes such as row count or unique. 'sql'
// is an individual SQL query that returns a value that can be compared. 'custom' is quality
// attributes that are vendor-specific, such as Soda or Great Expectations.
type DataQualityLibraryType string

const (
	DataQualityLibraryTypeText    DataQualityLibraryType = "text"
	DataQualityLibraryTypeLibrary DataQualityLibraryType = "library"
	DataQualityLibraryTypeSQL     DataQualityLibraryType = "sql"
	DataQualityLibraryTypeCustom  DataQualityLibraryType = "custom"
)

// AllValues returns all DataQualityLibraryType values.
func (DataQualityLibraryType) AllValues() []DataQualityLibraryType {
	return []DataQualityLibraryType{
		DataQualityLibraryTypeText,
		DataQualityLibraryTypeLibrary,
		DataQualityLibraryTypeSQL,
		DataQualityLibraryTypeCustom,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataQualityLibraryType) MarshalText() ([]byte, error) {
	switch s {
	case DataQualityLibraryTypeText:
		return []byte(s), nil
	case DataQualityLibraryTypeLibrary:
		return []byte(s), nil
	case DataQualityLibraryTypeSQL:
		return []byte(s), nil
	case DataQualityLibraryTypeCustom:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataQualityLibraryType) UnmarshalText(data []byte) error {
	switch DataQualityLibraryType(data) {
	case DataQualityLibraryTypeText:
		*s = DataQualityLibraryTypeText
		return nil
	case DataQualityLibraryTypeLibrary:
		*s = DataQualityLibraryTypeLibrary
		return nil
	case DataQualityLibraryTypeSQL:
		*s = DataQualityLibraryTypeSQL
		return nil
	case DataQualityLibraryTypeCustom:
		*s = DataQualityLibraryTypeCustom
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #
type DataQualitySql struct {
	// The type of quality check. 'text' is human-readable text that describes the quality of the data.
	// 'library' is a set of maintained predefined quality attributes such as row count or unique. 'sql'
	// is an individual SQL query that returns a value that can be compared. 'custom' is quality
	// attributes that are vendor-specific, such as Soda or Great Expectations.
	Type OptDataQualitySqlType `json:"type"`
	// Query string that adheres to the dialect of the provided server.
	Query string `json:"query"`
}

// GetType returns the value of Type.
func (s *DataQualitySql) GetType() OptDataQualitySqlType {
	return s.Type
}

// GetQuery returns the value of Query.
func (s *DataQualitySql) GetQuery() string {
	return s.Query
}

// SetType sets the value of Type.
func (s *DataQualitySql) SetType(val OptDataQualitySqlType) {
	s.Type = val
}

// SetQuery sets the value of Query.
func (s *DataQualitySql) SetQuery(val string) {
	s.Query = val
}

// The type of quality check. 'text' is human-readable text that describes the quality of the data.
// 'library' is a set of maintained predefined quality attributes such as row count or unique. 'sql'
// is an individual SQL query that returns a value that can be compared. 'custom' is quality
// attributes that are vendor-specific, such as Soda or Great Expectations.
type DataQualitySqlType string

const (
	DataQualitySqlTypeText    DataQualitySqlType = "text"
	DataQualitySqlTypeLibrary DataQualitySqlType = "library"
	DataQualitySqlTypeSQL     DataQualitySqlType = "sql"
	DataQualitySqlTypeCustom  DataQualitySqlType = "custom"
)

// AllValues returns all DataQualitySqlType values.
func (DataQualitySqlType) AllValues() []DataQualitySqlType {
	return []DataQualitySqlType{
		DataQualitySqlTypeText,
		DataQualitySqlTypeLibrary,
		DataQualitySqlTypeSQL,
		DataQualitySqlTypeCustom,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DataQualitySqlType) MarshalText() ([]byte, error) {
	switch s {
	case DataQualitySqlTypeText:
		return []byte(s), nil
	case DataQualitySqlTypeLibrary:
		return []byte(s), nil
	case DataQualitySqlTypeSQL:
		return []byte(s), nil
	case DataQualitySqlTypeCustom:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DataQualitySqlType) UnmarshalText(data []byte) error {
	switch DataQualitySqlType(data) {
	case DataQualitySqlTypeText:
		*s = DataQualitySqlTypeText
		return nil
	case DataQualitySqlTypeLibrary:
		*s = DataQualitySqlTypeLibrary
		return nil
	case DataQualitySqlTypeSQL:
		*s = DataQualitySqlTypeSQL
		return nil
	case DataQualitySqlTypeCustom:
		*s = DataQualitySqlTypeCustom
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #
type Deployment struct {
	Status DeploymentStatus `json:"status"`
	Pods   []PodStatus      `json:"pods"`
}

// GetStatus returns the value of Status.
func (s *Deployment) GetStatus() DeploymentStatus {
	return s.Status
}

// GetPods returns the value of Pods.
func (s *Deployment) GetPods() []PodStatus {
	return s.Pods
}

// SetStatus sets the value of Status.
func (s *Deployment) SetStatus(val DeploymentStatus) {
	s.Status = val
}

// SetPods sets the value of Pods.
func (s *Deployment) SetPods(val []PodStatus) {
	s.Pods = val
}

// DeploymentHeaders wraps Deployment with response headers.
type DeploymentHeaders struct {
	Signature OptString
	Response  Deployment
}

// GetSignature returns the value of Signature.
func (s *DeploymentHeaders) GetSignature() OptString {
	return s.Signature
}

// GetResponse returns the value of Response.
func (s *DeploymentHeaders) GetResponse() Deployment {
	return s.Response
}

// SetSignature sets the value of Signature.
func (s *DeploymentHeaders) SetSignature(val OptString) {
	s.Signature = val
}

// SetResponse sets the value of Response.
func (s *DeploymentHeaders) SetResponse(val Deployment) {
	s.Response = val
}

func (*DeploymentHeaders) getDeploymentRes() {}

type DeploymentStatus string

const (
	DeploymentStatusDeployed DeploymentStatus = "deployed"
	DeploymentStatusFailed   DeploymentStatus = "failed"
	DeploymentStatusPending  DeploymentStatus = "pending"
	DeploymentStatusMissing  DeploymentStatus = "missing"
	DeploymentStatusUnknown  DeploymentStatus = "unknown"
)

// AllValues returns all DeploymentStatus values.
func (DeploymentStatus) AllValues() []DeploymentStatus {
	return []DeploymentStatus{
		DeploymentStatusDeployed,
		DeploymentStatusFailed,
		DeploymentStatusPending,
		DeploymentStatusMissing,
		DeploymentStatusUnknown,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s DeploymentStatus) MarshalText() ([]byte, error) {
	switch s {
	case DeploymentStatusDeployed:
		return []byte(s), nil
	case DeploymentStatusFailed:
		return []byte(s), nil
	case DeploymentStatusPending:
		return []byte(s), nil
	case DeploymentStatusMissing:
		return []byte(s), nil
	case DeploymentStatusUnknown:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DeploymentStatus) UnmarshalText(data []byte) error {
	switch DeploymentStatus(data) {
	case DeploymentStatusDeployed:
		*s = DeploymentStatusDeployed
		return nil
	case DeploymentStatusFailed:
		*s = DeploymentStatusFailed
		return nil
	case DeploymentStatusPending:
		*s = DeploymentStatusPending
		return nil
	case DeploymentStatusMissing:
		*s = DeploymentStatusMissing
		return nil
	case DeploymentStatusUnknown:
		*s = DeploymentStatusUnknown
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #
type Description struct {
	// Intended usage of the dataset.
	Usage OptString `json:"usage"`
	// Purpose of the dataset.
	Purpose OptString `json:"purpose"`
	// Limitations of the dataset.
	Limitations OptString `json:"limitations"`
}

// GetUsage returns the value of Usage.
func (s *Description) GetUsage() OptString {
	return s.Usage
}

// GetPurpose returns the value of Purpose.
func (s *Description) GetPurpose() OptString {
	return s.Purpose
}

// GetLimitations returns the value of Limitations.
func (s *Description) GetLimitations() OptString {
	return s.Limitations
}

// SetUsage sets the value of Usage.
func (s *Description) SetUsage(val OptString) {
	s.Usage = val
}

// SetPurpose sets the value of Purpose.
func (s *Description) SetPurpose(val OptString) {
	s.Purpose = val
}

// SetLimitations sets the value of Limitations.
func (s *Description) SetLimitations(val OptString) {
	s.Limitations = val
}

// Ref: #
type DvClient struct {
	Name  string `json:"name"`
	Label string `json:"label"`
}

// GetName returns the value of Name.
func (s *DvClient) GetName() string {
	return s.Name
}

// GetLabel returns the value of Label.
func (s *DvClient) GetLabel() string {
	return s.Label
}

// SetName sets the value of Name.
func (s *DvClient) SetName(val string) {
	s.Name = val
}

// SetLabel sets the value of Label.
func (s *DvClient) SetLabel(val string) {
	s.Label = val
}

func (*DvClient) getClientRes() {}

type GetAlgorithmLogsOKApplicationJSON []string

func (*GetAlgorithmLogsOKApplicationJSON) getAlgorithmLogsRes() {}

type GetAttestationReportNonce string

const (
	GetAttestationReportNonceFingerprint GetAttestationReportNonce = "fingerprint"
)

// AllValues returns all GetAttestationReportNonce values.
func (GetAttestationReportNonce) AllValues() []GetAttestationReportNonce {
	return []GetAttestationReportNonce{
		GetAttestationReportNonceFingerprint,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s GetAttestationReportNonce) MarshalText() ([]byte, error) {
	switch s {
	case GetAttestationReportNonceFingerprint:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *GetAttestationReportNonce) UnmarshalText(data []byte) error {
	switch GetAttestationReportNonce(data) {
	case GetAttestationReportNonceFingerprint:
		*s = GetAttestationReportNonceFingerprint
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type GetAttestationReportOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetAttestationReportOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetAttestationReportOK) getAttestationReportRes() {}

type GetCollaborationSpaceAppIdOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetCollaborationSpaceAppIdOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetCollaborationSpaceAppIdOK) getCollaborationSpaceAppIdRes() {}

type GetCollaborationSpaceWebIdOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetCollaborationSpaceWebIdOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetCollaborationSpaceWebIdOK) getCollaborationSpaceWebIdRes() {}

type GetCollaborationSpacesOKApplicationJSON []CollaborationSpace

func (*GetCollaborationSpacesOKApplicationJSON) getCollaborationSpacesRes() {}

type GetCollaboratorsOKApplicationJSON []Collaborator

func (*GetCollaboratorsOKApplicationJSON) getCollaboratorsRes() {}

// ODCS compliant description of a data contract with metadata fields added by Datavillage DCP.
// Ref: #
type GetDataContractOKApplicationYaml struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetDataContractOKApplicationYaml) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetDataContractOKApplicationYaml) getDataContractRes() {}

type GetDataContractsOKApplicationJSON []DataContractSummary

func (*GetDataContractsOKApplicationJSON) getDataContractsRes() {}

type GetDeploymentLogsOKApplicationJSON []string

func (*GetDeploymentLogsOKApplicationJSON) getDeploymentLogsRes() {}

type GetInvitesOKApplicationJSON []jx.Raw

func (*GetInvitesOKApplicationJSON) getInvitesRes() {}

type GetPublicClientOK struct {
	// The IDP the client uses to authenticate its developers.
	Issuer string `json:"issuer"`
}

// GetIssuer returns the value of Issuer.
func (s *GetPublicClientOK) GetIssuer() string {
	return s.Issuer
}

// SetIssuer sets the value of Issuer.
func (s *GetPublicClientOK) SetIssuer(val string) {
	s.Issuer = val
}

func (*GetPublicClientOK) getPublicClientRes() {}

type GetPublicKeyOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPublicKeyOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

func (*GetPublicKeyOK) getPublicKeyRes() {}

// Ref: #
type NoContent struct{}

func (*NoContent) deleteCageRes()               {}
func (*NoContent) deleteCollaborationSpaceRes() {}
func (*NoContent) deleteCollaboratorRes()       {}
func (*NoContent) deleteDataContractRes()       {}
func (*NoContent) deleteInviteRes()             {}
func (*NoContent) deletePropertyRes()           {}
func (*NoContent) deleteSchemaRes()             {}
func (*NoContent) deployCageRes()               {}
func (*NoContent) rotateKeysRes()               {}
func (*NoContent) storeSecretRes()              {}
func (*NoContent) updateCollaborationSpaceRes() {}
func (*NoContent) updateCollaboratorRes()       {}
func (*NoContent) updateDataContractRes()       {}
func (*NoContent) updateInviteRes()             {}
func (*NoContent) updateInviteStatusRes()       {}
func (*NoContent) updatePropertyRes()           {}
func (*NoContent) updateSchemaRes()             {}

type NotFoundError struct {
	ErrorMessage string `json:"error_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *NotFoundError) GetErrorMessage() string {
	return s.ErrorMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *NotFoundError) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

func (*NotFoundError) createCollaboratorRes()         {}
func (*NotFoundError) createPropertyRes()             {}
func (*NotFoundError) createSchemaRes()               {}
func (*NotFoundError) deleteCageRes()                 {}
func (*NotFoundError) deleteCollaborationSpaceRes()   {}
func (*NotFoundError) deleteCollaboratorRes()         {}
func (*NotFoundError) deleteDataContractRes()         {}
func (*NotFoundError) deleteInviteRes()               {}
func (*NotFoundError) deletePropertyRes()             {}
func (*NotFoundError) deleteSchemaRes()               {}
func (*NotFoundError) deployCageRes()                 {}
func (*NotFoundError) getAlgorithmLogsRes()           {}
func (*NotFoundError) getAttestationReportRes()       {}
func (*NotFoundError) getClientRes()                  {}
func (*NotFoundError) getCollaborationSpaceAppIdRes() {}
func (*NotFoundError) getCollaborationSpaceRes()      {}
func (*NotFoundError) getCollaborationSpaceWebIdRes() {}
func (*NotFoundError) getCollaboratorRes()            {}
func (*NotFoundError) getCollaboratorsRes()           {}
func (*NotFoundError) getDataContractRes()            {}
func (*NotFoundError) getDeploymentLogsRes()          {}
func (*NotFoundError) getDeploymentRes()              {}
func (*NotFoundError) getNotificationsRes()           {}
func (*NotFoundError) getPropertyRes()                {}
func (*NotFoundError) getPublicClientRes()            {}
func (*NotFoundError) getPublicKeyRes()               {}
func (*NotFoundError) getSchemaRes()                  {}
func (*NotFoundError) publishEventRes()               {}
func (*NotFoundError) rotateKeysRes()                 {}
func (*NotFoundError) storeSecretRes()                {}
func (*NotFoundError) updateCollaborationSpaceRes()   {}
func (*NotFoundError) updateCollaboratorRes()         {}
func (*NotFoundError) updateDataContractRes()         {}
func (*NotFoundError) updateInviteRes()               {}
func (*NotFoundError) updateInviteStatusRes()         {}
func (*NotFoundError) updatePropertyRes()             {}
func (*NotFoundError) updateSchemaRes()               {}

// Data source details of where data is physically stored.
// Ref: #
type ODCSServer struct {
	// Identifier of the server.
	Server string `json:"server"`
	// Description of the server.
	Description OptString `json:"description"`
	// Environment of the server.
	Environment OptString `json:"environment"`
	OneOf       ODCSServerSum
}

// GetServer returns the value of Server.
func (s *ODCSServer) GetServer() string {
	return s.Server
}

// GetDescription returns the value of Description.
func (s *ODCSServer) GetDescription() OptString {
	return s.Description
}

// GetEnvironment returns the value of Environment.
func (s *ODCSServer) GetEnvironment() OptString {
	return s.Environment
}

// GetOneOf returns the value of OneOf.
func (s *ODCSServer) GetOneOf() ODCSServerSum {
	return s.OneOf
}

// SetServer sets the value of Server.
func (s *ODCSServer) SetServer(val string) {
	s.Server = val
}

// SetDescription sets the value of Description.
func (s *ODCSServer) SetDescription(val OptString) {
	s.Description = val
}

// SetEnvironment sets the value of Environment.
func (s *ODCSServer) SetEnvironment(val OptString) {
	s.Environment = val
}

// SetOneOf sets the value of OneOf.
func (s *ODCSServer) SetOneOf(val ODCSServerSum) {
	s.OneOf = val
}

// ODCSServerSum represents sum type.
type ODCSServerSum struct {
	Type         ODCSServerSumType // switch on this field
	ApiServer    ApiServer
	CustomServer CustomServer
}

// ODCSServerSumType is oneOf type of ODCSServerSum.
type ODCSServerSumType string

// Possible values for ODCSServerSumType.
const (
	ApiServerODCSServerSum    ODCSServerSumType = "api"
	CustomServerODCSServerSum ODCSServerSumType = "custom"
)

// IsApiServer reports whether ODCSServerSum is ApiServer.
func (s ODCSServerSum) IsApiServer() bool { return s.Type == ApiServerODCSServerSum }

// IsCustomServer reports whether ODCSServerSum is CustomServer.
func (s ODCSServerSum) IsCustomServer() bool { return s.Type == CustomServerODCSServerSum }

// SetApiServer sets ODCSServerSum to ApiServer.
func (s *ODCSServerSum) SetApiServer(v ApiServer) {
	s.Type = ApiServerODCSServerSum
	s.ApiServer = v
}

// GetApiServer returns ApiServer and true boolean if ODCSServerSum is ApiServer.
func (s ODCSServerSum) GetApiServer() (v ApiServer, ok bool) {
	if !s.IsApiServer() {
		return v, false
	}
	return s.ApiServer, true
}

// NewApiServerODCSServerSum returns new ODCSServerSum from ApiServer.
func NewApiServerODCSServerSum(v ApiServer) ODCSServerSum {
	var s ODCSServerSum
	s.SetApiServer(v)
	return s
}

// SetCustomServer sets ODCSServerSum to CustomServer.
func (s *ODCSServerSum) SetCustomServer(v CustomServer) {
	s.Type = CustomServerODCSServerSum
	s.CustomServer = v
}

// GetCustomServer returns CustomServer and true boolean if ODCSServerSum is CustomServer.
func (s ODCSServerSum) GetCustomServer() (v CustomServer, ok bool) {
	if !s.IsCustomServer() {
		return v, false
	}
	return s.CustomServer, true
}

// NewCustomServerODCSServerSum returns new ODCSServerSum from CustomServer.
func NewCustomServerODCSServerSum(v CustomServer) ODCSServerSum {
	var s ODCSServerSum
	s.SetCustomServer(v)
	return s
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeProviderSettings returns new OptCodeProviderSettings with value set to v.
func NewOptCodeProviderSettings(v CodeProviderSettings) OptCodeProviderSettings {
	return OptCodeProviderSettings{
		Value: v,
		Set:   true,
	}
}

// OptCodeProviderSettings is optional CodeProviderSettings.
type OptCodeProviderSettings struct {
	Value CodeProviderSettings
	Set   bool
}

// IsSet returns true if OptCodeProviderSettings was set.
func (o OptCodeProviderSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeProviderSettings) Reset() {
	var v CodeProviderSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeProviderSettings) SetTo(v CodeProviderSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeProviderSettings) Get() (v CodeProviderSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeProviderSettings) Or(d CodeProviderSettings) CodeProviderSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCodeProviderSource returns new OptCodeProviderSource with value set to v.
func NewOptCodeProviderSource(v CodeProviderSource) OptCodeProviderSource {
	return OptCodeProviderSource{
		Value: v,
		Set:   true,
	}
}

// OptCodeProviderSource is optional CodeProviderSource.
type OptCodeProviderSource struct {
	Value CodeProviderSource
	Set   bool
}

// IsSet returns true if OptCodeProviderSource was set.
func (o OptCodeProviderSource) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCodeProviderSource) Reset() {
	var v CodeProviderSource
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCodeProviderSource) SetTo(v CodeProviderSource) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCodeProviderSource) Get() (v CodeProviderSource, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCodeProviderSource) Or(d CodeProviderSource) CodeProviderSource {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollaboratorConfiguration returns new OptCollaboratorConfiguration with value set to v.
func NewOptCollaboratorConfiguration(v CollaboratorConfiguration) OptCollaboratorConfiguration {
	return OptCollaboratorConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptCollaboratorConfiguration is optional CollaboratorConfiguration.
type OptCollaboratorConfiguration struct {
	Value CollaboratorConfiguration
	Set   bool
}

// IsSet returns true if OptCollaboratorConfiguration was set.
func (o OptCollaboratorConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollaboratorConfiguration) Reset() {
	var v CollaboratorConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollaboratorConfiguration) SetTo(v CollaboratorConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollaboratorConfiguration) Get() (v CollaboratorConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollaboratorConfiguration) Or(d CollaboratorConfiguration) CollaboratorConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollaboratorCreateConfiguration returns new OptCollaboratorCreateConfiguration with value set to v.
func NewOptCollaboratorCreateConfiguration(v CollaboratorCreateConfiguration) OptCollaboratorCreateConfiguration {
	return OptCollaboratorCreateConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptCollaboratorCreateConfiguration is optional CollaboratorCreateConfiguration.
type OptCollaboratorCreateConfiguration struct {
	Value CollaboratorCreateConfiguration
	Set   bool
}

// IsSet returns true if OptCollaboratorCreateConfiguration was set.
func (o OptCollaboratorCreateConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollaboratorCreateConfiguration) Reset() {
	var v CollaboratorCreateConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollaboratorCreateConfiguration) SetTo(v CollaboratorCreateConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollaboratorCreateConfiguration) Get() (v CollaboratorCreateConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollaboratorCreateConfiguration) Or(d CollaboratorCreateConfiguration) CollaboratorCreateConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCollaboratorUpdateConfiguration returns new OptCollaboratorUpdateConfiguration with value set to v.
func NewOptCollaboratorUpdateConfiguration(v CollaboratorUpdateConfiguration) OptCollaboratorUpdateConfiguration {
	return OptCollaboratorUpdateConfiguration{
		Value: v,
		Set:   true,
	}
}

// OptCollaboratorUpdateConfiguration is optional CollaboratorUpdateConfiguration.
type OptCollaboratorUpdateConfiguration struct {
	Value CollaboratorUpdateConfiguration
	Set   bool
}

// IsSet returns true if OptCollaboratorUpdateConfiguration was set.
func (o OptCollaboratorUpdateConfiguration) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCollaboratorUpdateConfiguration) Reset() {
	var v CollaboratorUpdateConfiguration
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCollaboratorUpdateConfiguration) SetTo(v CollaboratorUpdateConfiguration) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCollaboratorUpdateConfiguration) Get() (v CollaboratorUpdateConfiguration, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCollaboratorUpdateConfiguration) Or(d CollaboratorUpdateConfiguration) CollaboratorUpdateConfiguration {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataConsumerSettings returns new OptDataConsumerSettings with value set to v.
func NewOptDataConsumerSettings(v DataConsumerSettings) OptDataConsumerSettings {
	return OptDataConsumerSettings{
		Value: v,
		Set:   true,
	}
}

// OptDataConsumerSettings is optional DataConsumerSettings.
type OptDataConsumerSettings struct {
	Value DataConsumerSettings
	Set   bool
}

// IsSet returns true if OptDataConsumerSettings was set.
func (o OptDataConsumerSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataConsumerSettings) Reset() {
	var v DataConsumerSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataConsumerSettings) SetTo(v DataConsumerSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataConsumerSettings) Get() (v DataConsumerSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataConsumerSettings) Or(d DataConsumerSettings) DataConsumerSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataContractUpdateApiVersion returns new OptDataContractUpdateApiVersion with value set to v.
func NewOptDataContractUpdateApiVersion(v DataContractUpdateApiVersion) OptDataContractUpdateApiVersion {
	return OptDataContractUpdateApiVersion{
		Value: v,
		Set:   true,
	}
}

// OptDataContractUpdateApiVersion is optional DataContractUpdateApiVersion.
type OptDataContractUpdateApiVersion struct {
	Value DataContractUpdateApiVersion
	Set   bool
}

// IsSet returns true if OptDataContractUpdateApiVersion was set.
func (o OptDataContractUpdateApiVersion) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataContractUpdateApiVersion) Reset() {
	var v DataContractUpdateApiVersion
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataContractUpdateApiVersion) SetTo(v DataContractUpdateApiVersion) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataContractUpdateApiVersion) Get() (v DataContractUpdateApiVersion, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataContractUpdateApiVersion) Or(d DataContractUpdateApiVersion) DataContractUpdateApiVersion {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataContractUpdateKind returns new OptDataContractUpdateKind with value set to v.
func NewOptDataContractUpdateKind(v DataContractUpdateKind) OptDataContractUpdateKind {
	return OptDataContractUpdateKind{
		Value: v,
		Set:   true,
	}
}

// OptDataContractUpdateKind is optional DataContractUpdateKind.
type OptDataContractUpdateKind struct {
	Value DataContractUpdateKind
	Set   bool
}

// IsSet returns true if OptDataContractUpdateKind was set.
func (o OptDataContractUpdateKind) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataContractUpdateKind) Reset() {
	var v DataContractUpdateKind
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataContractUpdateKind) SetTo(v DataContractUpdateKind) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataContractUpdateKind) Get() (v DataContractUpdateKind, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataContractUpdateKind) Or(d DataContractUpdateKind) DataContractUpdateKind {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataProviderSettings returns new OptDataProviderSettings with value set to v.
func NewOptDataProviderSettings(v DataProviderSettings) OptDataProviderSettings {
	return OptDataProviderSettings{
		Value: v,
		Set:   true,
	}
}

// OptDataProviderSettings is optional DataProviderSettings.
type OptDataProviderSettings struct {
	Value DataProviderSettings
	Set   bool
}

// IsSet returns true if OptDataProviderSettings was set.
func (o OptDataProviderSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataProviderSettings) Reset() {
	var v DataProviderSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataProviderSettings) SetTo(v DataProviderSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataProviderSettings) Get() (v DataProviderSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataProviderSettings) Or(d DataProviderSettings) DataProviderSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataQualityItemDimension returns new OptDataQualityItemDimension with value set to v.
func NewOptDataQualityItemDimension(v DataQualityItemDimension) OptDataQualityItemDimension {
	return OptDataQualityItemDimension{
		Value: v,
		Set:   true,
	}
}

// OptDataQualityItemDimension is optional DataQualityItemDimension.
type OptDataQualityItemDimension struct {
	Value DataQualityItemDimension
	Set   bool
}

// IsSet returns true if OptDataQualityItemDimension was set.
func (o OptDataQualityItemDimension) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataQualityItemDimension) Reset() {
	var v DataQualityItemDimension
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataQualityItemDimension) SetTo(v DataQualityItemDimension) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataQualityItemDimension) Get() (v DataQualityItemDimension, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataQualityItemDimension) Or(d DataQualityItemDimension) DataQualityItemDimension {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataQualityLibraryType returns new OptDataQualityLibraryType with value set to v.
func NewOptDataQualityLibraryType(v DataQualityLibraryType) OptDataQualityLibraryType {
	return OptDataQualityLibraryType{
		Value: v,
		Set:   true,
	}
}

// OptDataQualityLibraryType is optional DataQualityLibraryType.
type OptDataQualityLibraryType struct {
	Value DataQualityLibraryType
	Set   bool
}

// IsSet returns true if OptDataQualityLibraryType was set.
func (o OptDataQualityLibraryType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataQualityLibraryType) Reset() {
	var v DataQualityLibraryType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataQualityLibraryType) SetTo(v DataQualityLibraryType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataQualityLibraryType) Get() (v DataQualityLibraryType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataQualityLibraryType) Or(d DataQualityLibraryType) DataQualityLibraryType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDataQualitySqlType returns new OptDataQualitySqlType with value set to v.
func NewOptDataQualitySqlType(v DataQualitySqlType) OptDataQualitySqlType {
	return OptDataQualitySqlType{
		Value: v,
		Set:   true,
	}
}

// OptDataQualitySqlType is optional DataQualitySqlType.
type OptDataQualitySqlType struct {
	Value DataQualitySqlType
	Set   bool
}

// IsSet returns true if OptDataQualitySqlType was set.
func (o OptDataQualitySqlType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDataQualitySqlType) Reset() {
	var v DataQualitySqlType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDataQualitySqlType) SetTo(v DataQualitySqlType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDataQualitySqlType) Get() (v DataQualitySqlType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDataQualitySqlType) Or(d DataQualitySqlType) DataQualitySqlType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDescription returns new OptDescription with value set to v.
func NewOptDescription(v Description) OptDescription {
	return OptDescription{
		Value: v,
		Set:   true,
	}
}

// OptDescription is optional Description.
type OptDescription struct {
	Value Description
	Set   bool
}

// IsSet returns true if OptDescription was set.
func (o OptDescription) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDescription) Reset() {
	var v Description
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDescription) SetTo(v Description) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDescription) Get() (v Description, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDescription) Or(d Description) Description {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptGetAttestationReportNonce returns new OptGetAttestationReportNonce with value set to v.
func NewOptGetAttestationReportNonce(v GetAttestationReportNonce) OptGetAttestationReportNonce {
	return OptGetAttestationReportNonce{
		Value: v,
		Set:   true,
	}
}

// OptGetAttestationReportNonce is optional GetAttestationReportNonce.
type OptGetAttestationReportNonce struct {
	Value GetAttestationReportNonce
	Set   bool
}

// IsSet returns true if OptGetAttestationReportNonce was set.
func (o OptGetAttestationReportNonce) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptGetAttestationReportNonce) Reset() {
	var v GetAttestationReportNonce
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptGetAttestationReportNonce) SetTo(v GetAttestationReportNonce) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptGetAttestationReportNonce) Get() (v GetAttestationReportNonce, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptGetAttestationReportNonce) Or(d GetAttestationReportNonce) GetAttestationReportNonce {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilAnyType returns new OptNilAnyType with value set to v.
func NewOptNilAnyType(v AnyType) OptNilAnyType {
	return OptNilAnyType{
		Value: v,
		Set:   true,
	}
}

// OptNilAnyType is optional nullable AnyType.
type OptNilAnyType struct {
	Value AnyType
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilAnyType was set.
func (o OptNilAnyType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilAnyType) Reset() {
	var v AnyType
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilAnyType) SetTo(v AnyType) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilAnyType) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilAnyType) SetToNull() {
	o.Set = true
	o.Null = true
	var v AnyType
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilAnyType) Get() (v AnyType, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilAnyType) Or(d AnyType) AnyType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFloat64Array returns new OptNilFloat64Array with value set to v.
func NewOptNilFloat64Array(v []float64) OptNilFloat64Array {
	return OptNilFloat64Array{
		Value: v,
		Set:   true,
	}
}

// OptNilFloat64Array is optional nullable []float64.
type OptNilFloat64Array struct {
	Value []float64
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFloat64Array was set.
func (o OptNilFloat64Array) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFloat64Array) Reset() {
	var v []float64
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFloat64Array) SetTo(v []float64) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilFloat64Array) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilFloat64Array) SetToNull() {
	o.Set = true
	o.Null = true
	var v []float64
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFloat64Array) Get() (v []float64, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFloat64Array) Or(d []float64) []float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPrice returns new OptPrice with value set to v.
func NewOptPrice(v Price) OptPrice {
	return OptPrice{
		Value: v,
		Set:   true,
	}
}

// OptPrice is optional Price.
type OptPrice struct {
	Value Price
	Set   bool
}

// IsSet returns true if OptPrice was set.
func (o OptPrice) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPrice) Reset() {
	var v Price
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPrice) SetTo(v Price) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPrice) Get() (v Price, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPrice) Or(d Price) Price {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPropertyCreateLogicalType returns new OptPropertyCreateLogicalType with value set to v.
func NewOptPropertyCreateLogicalType(v PropertyCreateLogicalType) OptPropertyCreateLogicalType {
	return OptPropertyCreateLogicalType{
		Value: v,
		Set:   true,
	}
}

// OptPropertyCreateLogicalType is optional PropertyCreateLogicalType.
type OptPropertyCreateLogicalType struct {
	Value PropertyCreateLogicalType
	Set   bool
}

// IsSet returns true if OptPropertyCreateLogicalType was set.
func (o OptPropertyCreateLogicalType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPropertyCreateLogicalType) Reset() {
	var v PropertyCreateLogicalType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPropertyCreateLogicalType) SetTo(v PropertyCreateLogicalType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPropertyCreateLogicalType) Get() (v PropertyCreateLogicalType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPropertyCreateLogicalType) Or(d PropertyCreateLogicalType) PropertyCreateLogicalType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPropertyLogicalType returns new OptPropertyLogicalType with value set to v.
func NewOptPropertyLogicalType(v PropertyLogicalType) OptPropertyLogicalType {
	return OptPropertyLogicalType{
		Value: v,
		Set:   true,
	}
}

// OptPropertyLogicalType is optional PropertyLogicalType.
type OptPropertyLogicalType struct {
	Value PropertyLogicalType
	Set   bool
}

// IsSet returns true if OptPropertyLogicalType was set.
func (o OptPropertyLogicalType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPropertyLogicalType) Reset() {
	var v PropertyLogicalType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPropertyLogicalType) SetTo(v PropertyLogicalType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPropertyLogicalType) Get() (v PropertyLogicalType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPropertyLogicalType) Or(d PropertyLogicalType) PropertyLogicalType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptPropertyUpdateLogicalType returns new OptPropertyUpdateLogicalType with value set to v.
func NewOptPropertyUpdateLogicalType(v PropertyUpdateLogicalType) OptPropertyUpdateLogicalType {
	return OptPropertyUpdateLogicalType{
		Value: v,
		Set:   true,
	}
}

// OptPropertyUpdateLogicalType is optional PropertyUpdateLogicalType.
type OptPropertyUpdateLogicalType struct {
	Value PropertyUpdateLogicalType
	Set   bool
}

// IsSet returns true if OptPropertyUpdateLogicalType was set.
func (o OptPropertyUpdateLogicalType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptPropertyUpdateLogicalType) Reset() {
	var v PropertyUpdateLogicalType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptPropertyUpdateLogicalType) SetTo(v PropertyUpdateLogicalType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptPropertyUpdateLogicalType) Get() (v PropertyUpdateLogicalType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptPropertyUpdateLogicalType) Or(d PropertyUpdateLogicalType) PropertyUpdateLogicalType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSchemaCreateLogicalType returns new OptSchemaCreateLogicalType with value set to v.
func NewOptSchemaCreateLogicalType(v SchemaCreateLogicalType) OptSchemaCreateLogicalType {
	return OptSchemaCreateLogicalType{
		Value: v,
		Set:   true,
	}
}

// OptSchemaCreateLogicalType is optional SchemaCreateLogicalType.
type OptSchemaCreateLogicalType struct {
	Value SchemaCreateLogicalType
	Set   bool
}

// IsSet returns true if OptSchemaCreateLogicalType was set.
func (o OptSchemaCreateLogicalType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSchemaCreateLogicalType) Reset() {
	var v SchemaCreateLogicalType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSchemaCreateLogicalType) SetTo(v SchemaCreateLogicalType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSchemaCreateLogicalType) Get() (v SchemaCreateLogicalType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSchemaCreateLogicalType) Or(d SchemaCreateLogicalType) SchemaCreateLogicalType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSchemaLogicalType returns new OptSchemaLogicalType with value set to v.
func NewOptSchemaLogicalType(v SchemaLogicalType) OptSchemaLogicalType {
	return OptSchemaLogicalType{
		Value: v,
		Set:   true,
	}
}

// OptSchemaLogicalType is optional SchemaLogicalType.
type OptSchemaLogicalType struct {
	Value SchemaLogicalType
	Set   bool
}

// IsSet returns true if OptSchemaLogicalType was set.
func (o OptSchemaLogicalType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSchemaLogicalType) Reset() {
	var v SchemaLogicalType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSchemaLogicalType) SetTo(v SchemaLogicalType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSchemaLogicalType) Get() (v SchemaLogicalType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSchemaLogicalType) Or(d SchemaLogicalType) SchemaLogicalType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSchemaUpdateLogicalType returns new OptSchemaUpdateLogicalType with value set to v.
func NewOptSchemaUpdateLogicalType(v SchemaUpdateLogicalType) OptSchemaUpdateLogicalType {
	return OptSchemaUpdateLogicalType{
		Value: v,
		Set:   true,
	}
}

// OptSchemaUpdateLogicalType is optional SchemaUpdateLogicalType.
type OptSchemaUpdateLogicalType struct {
	Value SchemaUpdateLogicalType
	Set   bool
}

// IsSet returns true if OptSchemaUpdateLogicalType was set.
func (o OptSchemaUpdateLogicalType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSchemaUpdateLogicalType) Reset() {
	var v SchemaUpdateLogicalType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSchemaUpdateLogicalType) SetTo(v SchemaUpdateLogicalType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSchemaUpdateLogicalType) Get() (v SchemaUpdateLogicalType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSchemaUpdateLogicalType) Or(d SchemaUpdateLogicalType) SchemaUpdateLogicalType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #
type PodStatus struct {
	Name        string      `json:"name"`
	Status      string      `json:"status"`
	StatusSince OptDateTime `json:"status_since"`
	ImageIds    []string    `json:"imageIds"`
}

// GetName returns the value of Name.
func (s *PodStatus) GetName() string {
	return s.Name
}

// GetStatus returns the value of Status.
func (s *PodStatus) GetStatus() string {
	return s.Status
}

// GetStatusSince returns the value of StatusSince.
func (s *PodStatus) GetStatusSince() OptDateTime {
	return s.StatusSince
}

// GetImageIds returns the value of ImageIds.
func (s *PodStatus) GetImageIds() []string {
	return s.ImageIds
}

// SetName sets the value of Name.
func (s *PodStatus) SetName(val string) {
	s.Name = val
}

// SetStatus sets the value of Status.
func (s *PodStatus) SetStatus(val string) {
	s.Status = val
}

// SetStatusSince sets the value of StatusSince.
func (s *PodStatus) SetStatusSince(val OptDateTime) {
	s.StatusSince = val
}

// SetImageIds sets the value of ImageIds.
func (s *PodStatus) SetImageIds(val []string) {
	s.ImageIds = val
}

// Ref: #
type Price struct {
	// Subscription price per unit of measure in `priceUnit`.
	PriceAmount OptFloat64 `json:"priceAmount"`
	// Currency of the subscription price in `priceAmount`.
	PriceCurrency OptString `json:"priceCurrency"`
	// The unit of measure for calculating cost. Examples megabyte, gigabyte.
	PriceUnit OptString `json:"priceUnit"`
}

// GetPriceAmount returns the value of PriceAmount.
func (s *Price) GetPriceAmount() OptFloat64 {
	return s.PriceAmount
}

// GetPriceCurrency returns the value of PriceCurrency.
func (s *Price) GetPriceCurrency() OptString {
	return s.PriceCurrency
}

// GetPriceUnit returns the value of PriceUnit.
func (s *Price) GetPriceUnit() OptString {
	return s.PriceUnit
}

// SetPriceAmount sets the value of PriceAmount.
func (s *Price) SetPriceAmount(val OptFloat64) {
	s.PriceAmount = val
}

// SetPriceCurrency sets the value of PriceCurrency.
func (s *Price) SetPriceCurrency(val OptString) {
	s.PriceCurrency = val
}

// SetPriceUnit sets the value of PriceUnit.
func (s *Price) SetPriceUnit(val OptString) {
	s.PriceUnit = val
}

// Merged schema.
// Ref: #
type Property struct {
	// Name of the element.
	Name string `json:"name"`
	// Merged property.
	PhysicalType OptString `json:"physicalType"`
	// Description of the element.
	Description OptString `json:"description"`
	// The business name of the element.
	BusinessName OptString `json:"businessName"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags    []string    `json:"tags"`
	Quality DataQuality `json:"quality"`
	// Boolean value specifying whether the element is primary or not. Default is false.
	PrimaryKey OptBool `json:"primaryKey"`
	// If element is a primary key, the position of the primary key element. Starts from 1. Example of
	// `account_id, name` being primary key columns, `account_id` has primaryKeyPosition 1 and `name`
	// primaryKeyPosition 2. Default to -1.
	PrimaryKeyPosition OptInt `json:"primaryKeyPosition"`
	// The logical element data type.
	LogicalType OptPropertyLogicalType `json:"logicalType"`
	// Additional optional metadata to describe the logical type.
	LogicalTypeOptions *PropertyLogicalTypeOptions `json:"logicalTypeOptions"`
	// Indicates if the element may contain Null values; possible values are true and false. Default is
	// false.
	Required OptBool `json:"required"`
	// Indicates if the element contains unique values; possible values are true and false. Default is
	// false.
	Unique OptBool `json:"unique"`
	// Indicates if the element is partitioned; possible values are true and false.
	Partitioned OptBool `json:"partitioned"`
	// If element is used for partitioning, the position of the partition element. Starts from 1. Example
	// of `country, year` being partition columns, `country` has partitionKeyPosition 1 and `year`
	// partitionKeyPosition 2. Default to -1.
	PartitionKeyPosition OptInt `json:"partitionKeyPosition"`
	// Can be anything, like confidential, restricted, and public to more advanced categorization. Some
	// companies like PayPal, use data classification indicating the class of data in the element;
	// expected values are 1, 2, 3, 4, or 5.
	Classification OptString `json:"classification"`
	// The element name within the dataset that contains the encrypted element value. For example,
	// unencrypted element `email_address` might have an encryptedName of `email_address_encrypt`.
	EncryptedName OptString `json:"encryptedName"`
	// List of objects in the data source used in the transformation.
	TransformSourceObjects []string `json:"transformSourceObjects"`
	// Logic used in the element transformation.
	TransformLogic OptString `json:"transformLogic"`
	// Describes the transform logic in very simple terms.
	TransformDescription OptString `json:"transformDescription"`
	// True or false indicator; If element is considered a critical data element (CDE) then true else
	// false.
	CriticalDataElement OptBool `json:"criticalDataElement"`
	ID                  string  `json:"_id"`
}

// GetName returns the value of Name.
func (s *Property) GetName() string {
	return s.Name
}

// GetPhysicalType returns the value of PhysicalType.
func (s *Property) GetPhysicalType() OptString {
	return s.PhysicalType
}

// GetDescription returns the value of Description.
func (s *Property) GetDescription() OptString {
	return s.Description
}

// GetBusinessName returns the value of BusinessName.
func (s *Property) GetBusinessName() OptString {
	return s.BusinessName
}

// GetTags returns the value of Tags.
func (s *Property) GetTags() []string {
	return s.Tags
}

// GetQuality returns the value of Quality.
func (s *Property) GetQuality() DataQuality {
	return s.Quality
}

// GetPrimaryKey returns the value of PrimaryKey.
func (s *Property) GetPrimaryKey() OptBool {
	return s.PrimaryKey
}

// GetPrimaryKeyPosition returns the value of PrimaryKeyPosition.
func (s *Property) GetPrimaryKeyPosition() OptInt {
	return s.PrimaryKeyPosition
}

// GetLogicalType returns the value of LogicalType.
func (s *Property) GetLogicalType() OptPropertyLogicalType {
	return s.LogicalType
}

// GetLogicalTypeOptions returns the value of LogicalTypeOptions.
func (s *Property) GetLogicalTypeOptions() *PropertyLogicalTypeOptions {
	return s.LogicalTypeOptions
}

// GetRequired returns the value of Required.
func (s *Property) GetRequired() OptBool {
	return s.Required
}

// GetUnique returns the value of Unique.
func (s *Property) GetUnique() OptBool {
	return s.Unique
}

// GetPartitioned returns the value of Partitioned.
func (s *Property) GetPartitioned() OptBool {
	return s.Partitioned
}

// GetPartitionKeyPosition returns the value of PartitionKeyPosition.
func (s *Property) GetPartitionKeyPosition() OptInt {
	return s.PartitionKeyPosition
}

// GetClassification returns the value of Classification.
func (s *Property) GetClassification() OptString {
	return s.Classification
}

// GetEncryptedName returns the value of EncryptedName.
func (s *Property) GetEncryptedName() OptString {
	return s.EncryptedName
}

// GetTransformSourceObjects returns the value of TransformSourceObjects.
func (s *Property) GetTransformSourceObjects() []string {
	return s.TransformSourceObjects
}

// GetTransformLogic returns the value of TransformLogic.
func (s *Property) GetTransformLogic() OptString {
	return s.TransformLogic
}

// GetTransformDescription returns the value of TransformDescription.
func (s *Property) GetTransformDescription() OptString {
	return s.TransformDescription
}

// GetCriticalDataElement returns the value of CriticalDataElement.
func (s *Property) GetCriticalDataElement() OptBool {
	return s.CriticalDataElement
}

// GetID returns the value of ID.
func (s *Property) GetID() string {
	return s.ID
}

// SetName sets the value of Name.
func (s *Property) SetName(val string) {
	s.Name = val
}

// SetPhysicalType sets the value of PhysicalType.
func (s *Property) SetPhysicalType(val OptString) {
	s.PhysicalType = val
}

// SetDescription sets the value of Description.
func (s *Property) SetDescription(val OptString) {
	s.Description = val
}

// SetBusinessName sets the value of BusinessName.
func (s *Property) SetBusinessName(val OptString) {
	s.BusinessName = val
}

// SetTags sets the value of Tags.
func (s *Property) SetTags(val []string) {
	s.Tags = val
}

// SetQuality sets the value of Quality.
func (s *Property) SetQuality(val DataQuality) {
	s.Quality = val
}

// SetPrimaryKey sets the value of PrimaryKey.
func (s *Property) SetPrimaryKey(val OptBool) {
	s.PrimaryKey = val
}

// SetPrimaryKeyPosition sets the value of PrimaryKeyPosition.
func (s *Property) SetPrimaryKeyPosition(val OptInt) {
	s.PrimaryKeyPosition = val
}

// SetLogicalType sets the value of LogicalType.
func (s *Property) SetLogicalType(val OptPropertyLogicalType) {
	s.LogicalType = val
}

// SetLogicalTypeOptions sets the value of LogicalTypeOptions.
func (s *Property) SetLogicalTypeOptions(val *PropertyLogicalTypeOptions) {
	s.LogicalTypeOptions = val
}

// SetRequired sets the value of Required.
func (s *Property) SetRequired(val OptBool) {
	s.Required = val
}

// SetUnique sets the value of Unique.
func (s *Property) SetUnique(val OptBool) {
	s.Unique = val
}

// SetPartitioned sets the value of Partitioned.
func (s *Property) SetPartitioned(val OptBool) {
	s.Partitioned = val
}

// SetPartitionKeyPosition sets the value of PartitionKeyPosition.
func (s *Property) SetPartitionKeyPosition(val OptInt) {
	s.PartitionKeyPosition = val
}

// SetClassification sets the value of Classification.
func (s *Property) SetClassification(val OptString) {
	s.Classification = val
}

// SetEncryptedName sets the value of EncryptedName.
func (s *Property) SetEncryptedName(val OptString) {
	s.EncryptedName = val
}

// SetTransformSourceObjects sets the value of TransformSourceObjects.
func (s *Property) SetTransformSourceObjects(val []string) {
	s.TransformSourceObjects = val
}

// SetTransformLogic sets the value of TransformLogic.
func (s *Property) SetTransformLogic(val OptString) {
	s.TransformLogic = val
}

// SetTransformDescription sets the value of TransformDescription.
func (s *Property) SetTransformDescription(val OptString) {
	s.TransformDescription = val
}

// SetCriticalDataElement sets the value of CriticalDataElement.
func (s *Property) SetCriticalDataElement(val OptBool) {
	s.CriticalDataElement = val
}

// SetID sets the value of ID.
func (s *Property) SetID(val string) {
	s.ID = val
}

func (*Property) getPropertyRes() {}

// Merged schema.
// Ref: #
type PropertyCreate struct {
	// Name of the element.
	Name string `json:"name"`
	// Merged property.
	PhysicalType OptString `json:"physicalType"`
	// Description of the element.
	Description OptString `json:"description"`
	// The business name of the element.
	BusinessName OptString `json:"businessName"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags    []string    `json:"tags"`
	Quality DataQuality `json:"quality"`
	// Boolean value specifying whether the element is primary or not. Default is false.
	PrimaryKey OptBool `json:"primaryKey"`
	// If element is a primary key, the position of the primary key element. Starts from 1. Example of
	// `account_id, name` being primary key columns, `account_id` has primaryKeyPosition 1 and `name`
	// primaryKeyPosition 2. Default to -1.
	PrimaryKeyPosition OptInt `json:"primaryKeyPosition"`
	// The logical element data type.
	LogicalType OptPropertyCreateLogicalType `json:"logicalType"`
	// Additional optional metadata to describe the logical type.
	LogicalTypeOptions *PropertyCreateLogicalTypeOptions `json:"logicalTypeOptions"`
	// Indicates if the element may contain Null values; possible values are true and false. Default is
	// false.
	Required OptBool `json:"required"`
	// Indicates if the element contains unique values; possible values are true and false. Default is
	// false.
	Unique OptBool `json:"unique"`
	// Indicates if the element is partitioned; possible values are true and false.
	Partitioned OptBool `json:"partitioned"`
	// If element is used for partitioning, the position of the partition element. Starts from 1. Example
	// of `country, year` being partition columns, `country` has partitionKeyPosition 1 and `year`
	// partitionKeyPosition 2. Default to -1.
	PartitionKeyPosition OptInt `json:"partitionKeyPosition"`
	// Can be anything, like confidential, restricted, and public to more advanced categorization. Some
	// companies like PayPal, use data classification indicating the class of data in the element;
	// expected values are 1, 2, 3, 4, or 5.
	Classification OptString `json:"classification"`
	// The element name within the dataset that contains the encrypted element value. For example,
	// unencrypted element `email_address` might have an encryptedName of `email_address_encrypt`.
	EncryptedName OptString `json:"encryptedName"`
	// List of objects in the data source used in the transformation.
	TransformSourceObjects []string `json:"transformSourceObjects"`
	// Logic used in the element transformation.
	TransformLogic OptString `json:"transformLogic"`
	// Describes the transform logic in very simple terms.
	TransformDescription OptString `json:"transformDescription"`
	// True or false indicator; If element is considered a critical data element (CDE) then true else
	// false.
	CriticalDataElement OptBool `json:"criticalDataElement"`
}

// GetName returns the value of Name.
func (s *PropertyCreate) GetName() string {
	return s.Name
}

// GetPhysicalType returns the value of PhysicalType.
func (s *PropertyCreate) GetPhysicalType() OptString {
	return s.PhysicalType
}

// GetDescription returns the value of Description.
func (s *PropertyCreate) GetDescription() OptString {
	return s.Description
}

// GetBusinessName returns the value of BusinessName.
func (s *PropertyCreate) GetBusinessName() OptString {
	return s.BusinessName
}

// GetTags returns the value of Tags.
func (s *PropertyCreate) GetTags() []string {
	return s.Tags
}

// GetQuality returns the value of Quality.
func (s *PropertyCreate) GetQuality() DataQuality {
	return s.Quality
}

// GetPrimaryKey returns the value of PrimaryKey.
func (s *PropertyCreate) GetPrimaryKey() OptBool {
	return s.PrimaryKey
}

// GetPrimaryKeyPosition returns the value of PrimaryKeyPosition.
func (s *PropertyCreate) GetPrimaryKeyPosition() OptInt {
	return s.PrimaryKeyPosition
}

// GetLogicalType returns the value of LogicalType.
func (s *PropertyCreate) GetLogicalType() OptPropertyCreateLogicalType {
	return s.LogicalType
}

// GetLogicalTypeOptions returns the value of LogicalTypeOptions.
func (s *PropertyCreate) GetLogicalTypeOptions() *PropertyCreateLogicalTypeOptions {
	return s.LogicalTypeOptions
}

// GetRequired returns the value of Required.
func (s *PropertyCreate) GetRequired() OptBool {
	return s.Required
}

// GetUnique returns the value of Unique.
func (s *PropertyCreate) GetUnique() OptBool {
	return s.Unique
}

// GetPartitioned returns the value of Partitioned.
func (s *PropertyCreate) GetPartitioned() OptBool {
	return s.Partitioned
}

// GetPartitionKeyPosition returns the value of PartitionKeyPosition.
func (s *PropertyCreate) GetPartitionKeyPosition() OptInt {
	return s.PartitionKeyPosition
}

// GetClassification returns the value of Classification.
func (s *PropertyCreate) GetClassification() OptString {
	return s.Classification
}

// GetEncryptedName returns the value of EncryptedName.
func (s *PropertyCreate) GetEncryptedName() OptString {
	return s.EncryptedName
}

// GetTransformSourceObjects returns the value of TransformSourceObjects.
func (s *PropertyCreate) GetTransformSourceObjects() []string {
	return s.TransformSourceObjects
}

// GetTransformLogic returns the value of TransformLogic.
func (s *PropertyCreate) GetTransformLogic() OptString {
	return s.TransformLogic
}

// GetTransformDescription returns the value of TransformDescription.
func (s *PropertyCreate) GetTransformDescription() OptString {
	return s.TransformDescription
}

// GetCriticalDataElement returns the value of CriticalDataElement.
func (s *PropertyCreate) GetCriticalDataElement() OptBool {
	return s.CriticalDataElement
}

// SetName sets the value of Name.
func (s *PropertyCreate) SetName(val string) {
	s.Name = val
}

// SetPhysicalType sets the value of PhysicalType.
func (s *PropertyCreate) SetPhysicalType(val OptString) {
	s.PhysicalType = val
}

// SetDescription sets the value of Description.
func (s *PropertyCreate) SetDescription(val OptString) {
	s.Description = val
}

// SetBusinessName sets the value of BusinessName.
func (s *PropertyCreate) SetBusinessName(val OptString) {
	s.BusinessName = val
}

// SetTags sets the value of Tags.
func (s *PropertyCreate) SetTags(val []string) {
	s.Tags = val
}

// SetQuality sets the value of Quality.
func (s *PropertyCreate) SetQuality(val DataQuality) {
	s.Quality = val
}

// SetPrimaryKey sets the value of PrimaryKey.
func (s *PropertyCreate) SetPrimaryKey(val OptBool) {
	s.PrimaryKey = val
}

// SetPrimaryKeyPosition sets the value of PrimaryKeyPosition.
func (s *PropertyCreate) SetPrimaryKeyPosition(val OptInt) {
	s.PrimaryKeyPosition = val
}

// SetLogicalType sets the value of LogicalType.
func (s *PropertyCreate) SetLogicalType(val OptPropertyCreateLogicalType) {
	s.LogicalType = val
}

// SetLogicalTypeOptions sets the value of LogicalTypeOptions.
func (s *PropertyCreate) SetLogicalTypeOptions(val *PropertyCreateLogicalTypeOptions) {
	s.LogicalTypeOptions = val
}

// SetRequired sets the value of Required.
func (s *PropertyCreate) SetRequired(val OptBool) {
	s.Required = val
}

// SetUnique sets the value of Unique.
func (s *PropertyCreate) SetUnique(val OptBool) {
	s.Unique = val
}

// SetPartitioned sets the value of Partitioned.
func (s *PropertyCreate) SetPartitioned(val OptBool) {
	s.Partitioned = val
}

// SetPartitionKeyPosition sets the value of PartitionKeyPosition.
func (s *PropertyCreate) SetPartitionKeyPosition(val OptInt) {
	s.PartitionKeyPosition = val
}

// SetClassification sets the value of Classification.
func (s *PropertyCreate) SetClassification(val OptString) {
	s.Classification = val
}

// SetEncryptedName sets the value of EncryptedName.
func (s *PropertyCreate) SetEncryptedName(val OptString) {
	s.EncryptedName = val
}

// SetTransformSourceObjects sets the value of TransformSourceObjects.
func (s *PropertyCreate) SetTransformSourceObjects(val []string) {
	s.TransformSourceObjects = val
}

// SetTransformLogic sets the value of TransformLogic.
func (s *PropertyCreate) SetTransformLogic(val OptString) {
	s.TransformLogic = val
}

// SetTransformDescription sets the value of TransformDescription.
func (s *PropertyCreate) SetTransformDescription(val OptString) {
	s.TransformDescription = val
}

// SetCriticalDataElement sets the value of CriticalDataElement.
func (s *PropertyCreate) SetCriticalDataElement(val OptBool) {
	s.CriticalDataElement = val
}

// The logical element data type.
type PropertyCreateLogicalType string

const (
	PropertyCreateLogicalTypeString  PropertyCreateLogicalType = "string"
	PropertyCreateLogicalTypeDate    PropertyCreateLogicalType = "date"
	PropertyCreateLogicalTypeNumber  PropertyCreateLogicalType = "number"
	PropertyCreateLogicalTypeInteger PropertyCreateLogicalType = "integer"
	PropertyCreateLogicalTypeObject  PropertyCreateLogicalType = "object"
	PropertyCreateLogicalTypeArray   PropertyCreateLogicalType = "array"
	PropertyCreateLogicalTypeBoolean PropertyCreateLogicalType = "boolean"
)

// AllValues returns all PropertyCreateLogicalType values.
func (PropertyCreateLogicalType) AllValues() []PropertyCreateLogicalType {
	return []PropertyCreateLogicalType{
		PropertyCreateLogicalTypeString,
		PropertyCreateLogicalTypeDate,
		PropertyCreateLogicalTypeNumber,
		PropertyCreateLogicalTypeInteger,
		PropertyCreateLogicalTypeObject,
		PropertyCreateLogicalTypeArray,
		PropertyCreateLogicalTypeBoolean,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PropertyCreateLogicalType) MarshalText() ([]byte, error) {
	switch s {
	case PropertyCreateLogicalTypeString:
		return []byte(s), nil
	case PropertyCreateLogicalTypeDate:
		return []byte(s), nil
	case PropertyCreateLogicalTypeNumber:
		return []byte(s), nil
	case PropertyCreateLogicalTypeInteger:
		return []byte(s), nil
	case PropertyCreateLogicalTypeObject:
		return []byte(s), nil
	case PropertyCreateLogicalTypeArray:
		return []byte(s), nil
	case PropertyCreateLogicalTypeBoolean:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PropertyCreateLogicalType) UnmarshalText(data []byte) error {
	switch PropertyCreateLogicalType(data) {
	case PropertyCreateLogicalTypeString:
		*s = PropertyCreateLogicalTypeString
		return nil
	case PropertyCreateLogicalTypeDate:
		*s = PropertyCreateLogicalTypeDate
		return nil
	case PropertyCreateLogicalTypeNumber:
		*s = PropertyCreateLogicalTypeNumber
		return nil
	case PropertyCreateLogicalTypeInteger:
		*s = PropertyCreateLogicalTypeInteger
		return nil
	case PropertyCreateLogicalTypeObject:
		*s = PropertyCreateLogicalTypeObject
		return nil
	case PropertyCreateLogicalTypeArray:
		*s = PropertyCreateLogicalTypeArray
		return nil
	case PropertyCreateLogicalTypeBoolean:
		*s = PropertyCreateLogicalTypeBoolean
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional optional metadata to describe the logical type.
type PropertyCreateLogicalTypeOptions struct{}

// The logical element data type.
type PropertyLogicalType string

const (
	PropertyLogicalTypeString  PropertyLogicalType = "string"
	PropertyLogicalTypeDate    PropertyLogicalType = "date"
	PropertyLogicalTypeNumber  PropertyLogicalType = "number"
	PropertyLogicalTypeInteger PropertyLogicalType = "integer"
	PropertyLogicalTypeObject  PropertyLogicalType = "object"
	PropertyLogicalTypeArray   PropertyLogicalType = "array"
	PropertyLogicalTypeBoolean PropertyLogicalType = "boolean"
)

// AllValues returns all PropertyLogicalType values.
func (PropertyLogicalType) AllValues() []PropertyLogicalType {
	return []PropertyLogicalType{
		PropertyLogicalTypeString,
		PropertyLogicalTypeDate,
		PropertyLogicalTypeNumber,
		PropertyLogicalTypeInteger,
		PropertyLogicalTypeObject,
		PropertyLogicalTypeArray,
		PropertyLogicalTypeBoolean,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PropertyLogicalType) MarshalText() ([]byte, error) {
	switch s {
	case PropertyLogicalTypeString:
		return []byte(s), nil
	case PropertyLogicalTypeDate:
		return []byte(s), nil
	case PropertyLogicalTypeNumber:
		return []byte(s), nil
	case PropertyLogicalTypeInteger:
		return []byte(s), nil
	case PropertyLogicalTypeObject:
		return []byte(s), nil
	case PropertyLogicalTypeArray:
		return []byte(s), nil
	case PropertyLogicalTypeBoolean:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PropertyLogicalType) UnmarshalText(data []byte) error {
	switch PropertyLogicalType(data) {
	case PropertyLogicalTypeString:
		*s = PropertyLogicalTypeString
		return nil
	case PropertyLogicalTypeDate:
		*s = PropertyLogicalTypeDate
		return nil
	case PropertyLogicalTypeNumber:
		*s = PropertyLogicalTypeNumber
		return nil
	case PropertyLogicalTypeInteger:
		*s = PropertyLogicalTypeInteger
		return nil
	case PropertyLogicalTypeObject:
		*s = PropertyLogicalTypeObject
		return nil
	case PropertyLogicalTypeArray:
		*s = PropertyLogicalTypeArray
		return nil
	case PropertyLogicalTypeBoolean:
		*s = PropertyLogicalTypeBoolean
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional optional metadata to describe the logical type.
type PropertyLogicalTypeOptions struct{}

// Merged schema.
// Ref: #
type PropertyUpdate struct {
	// Name of the element.
	Name OptString `json:"name"`
	// Merged property.
	PhysicalType OptString `json:"physicalType"`
	// Description of the element.
	Description OptString `json:"description"`
	// The business name of the element.
	BusinessName OptString `json:"businessName"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags    []string    `json:"tags"`
	Quality DataQuality `json:"quality"`
	// Boolean value specifying whether the element is primary or not. Default is false.
	PrimaryKey OptBool `json:"primaryKey"`
	// If element is a primary key, the position of the primary key element. Starts from 1. Example of
	// `account_id, name` being primary key columns, `account_id` has primaryKeyPosition 1 and `name`
	// primaryKeyPosition 2. Default to -1.
	PrimaryKeyPosition OptInt `json:"primaryKeyPosition"`
	// The logical element data type.
	LogicalType OptPropertyUpdateLogicalType `json:"logicalType"`
	// Additional optional metadata to describe the logical type.
	LogicalTypeOptions *PropertyUpdateLogicalTypeOptions `json:"logicalTypeOptions"`
	// Indicates if the element may contain Null values; possible values are true and false. Default is
	// false.
	Required OptBool `json:"required"`
	// Indicates if the element contains unique values; possible values are true and false. Default is
	// false.
	Unique OptBool `json:"unique"`
	// Indicates if the element is partitioned; possible values are true and false.
	Partitioned OptBool `json:"partitioned"`
	// If element is used for partitioning, the position of the partition element. Starts from 1. Example
	// of `country, year` being partition columns, `country` has partitionKeyPosition 1 and `year`
	// partitionKeyPosition 2. Default to -1.
	PartitionKeyPosition OptInt `json:"partitionKeyPosition"`
	// Can be anything, like confidential, restricted, and public to more advanced categorization. Some
	// companies like PayPal, use data classification indicating the class of data in the element;
	// expected values are 1, 2, 3, 4, or 5.
	Classification OptString `json:"classification"`
	// The element name within the dataset that contains the encrypted element value. For example,
	// unencrypted element `email_address` might have an encryptedName of `email_address_encrypt`.
	EncryptedName OptString `json:"encryptedName"`
	// List of objects in the data source used in the transformation.
	TransformSourceObjects []string `json:"transformSourceObjects"`
	// Logic used in the element transformation.
	TransformLogic OptString `json:"transformLogic"`
	// Describes the transform logic in very simple terms.
	TransformDescription OptString `json:"transformDescription"`
	// True or false indicator; If element is considered a critical data element (CDE) then true else
	// false.
	CriticalDataElement OptBool `json:"criticalDataElement"`
}

// GetName returns the value of Name.
func (s *PropertyUpdate) GetName() OptString {
	return s.Name
}

// GetPhysicalType returns the value of PhysicalType.
func (s *PropertyUpdate) GetPhysicalType() OptString {
	return s.PhysicalType
}

// GetDescription returns the value of Description.
func (s *PropertyUpdate) GetDescription() OptString {
	return s.Description
}

// GetBusinessName returns the value of BusinessName.
func (s *PropertyUpdate) GetBusinessName() OptString {
	return s.BusinessName
}

// GetTags returns the value of Tags.
func (s *PropertyUpdate) GetTags() []string {
	return s.Tags
}

// GetQuality returns the value of Quality.
func (s *PropertyUpdate) GetQuality() DataQuality {
	return s.Quality
}

// GetPrimaryKey returns the value of PrimaryKey.
func (s *PropertyUpdate) GetPrimaryKey() OptBool {
	return s.PrimaryKey
}

// GetPrimaryKeyPosition returns the value of PrimaryKeyPosition.
func (s *PropertyUpdate) GetPrimaryKeyPosition() OptInt {
	return s.PrimaryKeyPosition
}

// GetLogicalType returns the value of LogicalType.
func (s *PropertyUpdate) GetLogicalType() OptPropertyUpdateLogicalType {
	return s.LogicalType
}

// GetLogicalTypeOptions returns the value of LogicalTypeOptions.
func (s *PropertyUpdate) GetLogicalTypeOptions() *PropertyUpdateLogicalTypeOptions {
	return s.LogicalTypeOptions
}

// GetRequired returns the value of Required.
func (s *PropertyUpdate) GetRequired() OptBool {
	return s.Required
}

// GetUnique returns the value of Unique.
func (s *PropertyUpdate) GetUnique() OptBool {
	return s.Unique
}

// GetPartitioned returns the value of Partitioned.
func (s *PropertyUpdate) GetPartitioned() OptBool {
	return s.Partitioned
}

// GetPartitionKeyPosition returns the value of PartitionKeyPosition.
func (s *PropertyUpdate) GetPartitionKeyPosition() OptInt {
	return s.PartitionKeyPosition
}

// GetClassification returns the value of Classification.
func (s *PropertyUpdate) GetClassification() OptString {
	return s.Classification
}

// GetEncryptedName returns the value of EncryptedName.
func (s *PropertyUpdate) GetEncryptedName() OptString {
	return s.EncryptedName
}

// GetTransformSourceObjects returns the value of TransformSourceObjects.
func (s *PropertyUpdate) GetTransformSourceObjects() []string {
	return s.TransformSourceObjects
}

// GetTransformLogic returns the value of TransformLogic.
func (s *PropertyUpdate) GetTransformLogic() OptString {
	return s.TransformLogic
}

// GetTransformDescription returns the value of TransformDescription.
func (s *PropertyUpdate) GetTransformDescription() OptString {
	return s.TransformDescription
}

// GetCriticalDataElement returns the value of CriticalDataElement.
func (s *PropertyUpdate) GetCriticalDataElement() OptBool {
	return s.CriticalDataElement
}

// SetName sets the value of Name.
func (s *PropertyUpdate) SetName(val OptString) {
	s.Name = val
}

// SetPhysicalType sets the value of PhysicalType.
func (s *PropertyUpdate) SetPhysicalType(val OptString) {
	s.PhysicalType = val
}

// SetDescription sets the value of Description.
func (s *PropertyUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetBusinessName sets the value of BusinessName.
func (s *PropertyUpdate) SetBusinessName(val OptString) {
	s.BusinessName = val
}

// SetTags sets the value of Tags.
func (s *PropertyUpdate) SetTags(val []string) {
	s.Tags = val
}

// SetQuality sets the value of Quality.
func (s *PropertyUpdate) SetQuality(val DataQuality) {
	s.Quality = val
}

// SetPrimaryKey sets the value of PrimaryKey.
func (s *PropertyUpdate) SetPrimaryKey(val OptBool) {
	s.PrimaryKey = val
}

// SetPrimaryKeyPosition sets the value of PrimaryKeyPosition.
func (s *PropertyUpdate) SetPrimaryKeyPosition(val OptInt) {
	s.PrimaryKeyPosition = val
}

// SetLogicalType sets the value of LogicalType.
func (s *PropertyUpdate) SetLogicalType(val OptPropertyUpdateLogicalType) {
	s.LogicalType = val
}

// SetLogicalTypeOptions sets the value of LogicalTypeOptions.
func (s *PropertyUpdate) SetLogicalTypeOptions(val *PropertyUpdateLogicalTypeOptions) {
	s.LogicalTypeOptions = val
}

// SetRequired sets the value of Required.
func (s *PropertyUpdate) SetRequired(val OptBool) {
	s.Required = val
}

// SetUnique sets the value of Unique.
func (s *PropertyUpdate) SetUnique(val OptBool) {
	s.Unique = val
}

// SetPartitioned sets the value of Partitioned.
func (s *PropertyUpdate) SetPartitioned(val OptBool) {
	s.Partitioned = val
}

// SetPartitionKeyPosition sets the value of PartitionKeyPosition.
func (s *PropertyUpdate) SetPartitionKeyPosition(val OptInt) {
	s.PartitionKeyPosition = val
}

// SetClassification sets the value of Classification.
func (s *PropertyUpdate) SetClassification(val OptString) {
	s.Classification = val
}

// SetEncryptedName sets the value of EncryptedName.
func (s *PropertyUpdate) SetEncryptedName(val OptString) {
	s.EncryptedName = val
}

// SetTransformSourceObjects sets the value of TransformSourceObjects.
func (s *PropertyUpdate) SetTransformSourceObjects(val []string) {
	s.TransformSourceObjects = val
}

// SetTransformLogic sets the value of TransformLogic.
func (s *PropertyUpdate) SetTransformLogic(val OptString) {
	s.TransformLogic = val
}

// SetTransformDescription sets the value of TransformDescription.
func (s *PropertyUpdate) SetTransformDescription(val OptString) {
	s.TransformDescription = val
}

// SetCriticalDataElement sets the value of CriticalDataElement.
func (s *PropertyUpdate) SetCriticalDataElement(val OptBool) {
	s.CriticalDataElement = val
}

// The logical element data type.
type PropertyUpdateLogicalType string

const (
	PropertyUpdateLogicalTypeString  PropertyUpdateLogicalType = "string"
	PropertyUpdateLogicalTypeDate    PropertyUpdateLogicalType = "date"
	PropertyUpdateLogicalTypeNumber  PropertyUpdateLogicalType = "number"
	PropertyUpdateLogicalTypeInteger PropertyUpdateLogicalType = "integer"
	PropertyUpdateLogicalTypeObject  PropertyUpdateLogicalType = "object"
	PropertyUpdateLogicalTypeArray   PropertyUpdateLogicalType = "array"
	PropertyUpdateLogicalTypeBoolean PropertyUpdateLogicalType = "boolean"
)

// AllValues returns all PropertyUpdateLogicalType values.
func (PropertyUpdateLogicalType) AllValues() []PropertyUpdateLogicalType {
	return []PropertyUpdateLogicalType{
		PropertyUpdateLogicalTypeString,
		PropertyUpdateLogicalTypeDate,
		PropertyUpdateLogicalTypeNumber,
		PropertyUpdateLogicalTypeInteger,
		PropertyUpdateLogicalTypeObject,
		PropertyUpdateLogicalTypeArray,
		PropertyUpdateLogicalTypeBoolean,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s PropertyUpdateLogicalType) MarshalText() ([]byte, error) {
	switch s {
	case PropertyUpdateLogicalTypeString:
		return []byte(s), nil
	case PropertyUpdateLogicalTypeDate:
		return []byte(s), nil
	case PropertyUpdateLogicalTypeNumber:
		return []byte(s), nil
	case PropertyUpdateLogicalTypeInteger:
		return []byte(s), nil
	case PropertyUpdateLogicalTypeObject:
		return []byte(s), nil
	case PropertyUpdateLogicalTypeArray:
		return []byte(s), nil
	case PropertyUpdateLogicalTypeBoolean:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *PropertyUpdateLogicalType) UnmarshalText(data []byte) error {
	switch PropertyUpdateLogicalType(data) {
	case PropertyUpdateLogicalTypeString:
		*s = PropertyUpdateLogicalTypeString
		return nil
	case PropertyUpdateLogicalTypeDate:
		*s = PropertyUpdateLogicalTypeDate
		return nil
	case PropertyUpdateLogicalTypeNumber:
		*s = PropertyUpdateLogicalTypeNumber
		return nil
	case PropertyUpdateLogicalTypeInteger:
		*s = PropertyUpdateLogicalTypeInteger
		return nil
	case PropertyUpdateLogicalTypeObject:
		*s = PropertyUpdateLogicalTypeObject
		return nil
	case PropertyUpdateLogicalTypeArray:
		*s = PropertyUpdateLogicalTypeArray
		return nil
	case PropertyUpdateLogicalTypeBoolean:
		*s = PropertyUpdateLogicalTypeBoolean
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional optional metadata to describe the logical type.
type PropertyUpdateLogicalTypeOptions struct{}

type PublishEventOK struct {
	MessageId string `json:"messageId"`
}

// GetMessageId returns the value of MessageId.
func (s *PublishEventOK) GetMessageId() string {
	return s.MessageId
}

// SetMessageId sets the value of MessageId.
func (s *PublishEventOK) SetMessageId(val string) {
	s.MessageId = val
}

func (*PublishEventOK) publishEventRes() {}

type PublishEventReq struct {
	Type            string `json:"type"`
	AdditionalProps PublishEventReqAdditional
}

// GetType returns the value of Type.
func (s *PublishEventReq) GetType() string {
	return s.Type
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *PublishEventReq) GetAdditionalProps() PublishEventReqAdditional {
	return s.AdditionalProps
}

// SetType sets the value of Type.
func (s *PublishEventReq) SetType(val string) {
	s.Type = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *PublishEventReq) SetAdditionalProps(val PublishEventReqAdditional) {
	s.AdditionalProps = val
}

type PublishEventReqAdditional map[string]jx.Raw

func (s *PublishEventReqAdditional) init() PublishEventReqAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Merged schema.
// Ref: #
type Schema struct {
	// Name of the element.
	Name string `json:"name"`
	// The physical element data type in the data source.
	PhysicalType OptString `json:"physicalType"`
	// Description of the element.
	Description OptString `json:"description"`
	// The business name of the element.
	BusinessName OptString `json:"businessName"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags    []string    `json:"tags"`
	Quality DataQuality `json:"quality"`
	// The logical element data type.
	LogicalType OptSchemaLogicalType `json:"logicalType"`
	// Physical name.
	PhysicalName OptString `json:"physicalName"`
	// Granular level of the data in the object.
	DataGranularityDescription OptString  `json:"dataGranularityDescription"`
	ID                         string     `json:"_id"`
	Properties                 []Property `json:"properties"`
}

// GetName returns the value of Name.
func (s *Schema) GetName() string {
	return s.Name
}

// GetPhysicalType returns the value of PhysicalType.
func (s *Schema) GetPhysicalType() OptString {
	return s.PhysicalType
}

// GetDescription returns the value of Description.
func (s *Schema) GetDescription() OptString {
	return s.Description
}

// GetBusinessName returns the value of BusinessName.
func (s *Schema) GetBusinessName() OptString {
	return s.BusinessName
}

// GetTags returns the value of Tags.
func (s *Schema) GetTags() []string {
	return s.Tags
}

// GetQuality returns the value of Quality.
func (s *Schema) GetQuality() DataQuality {
	return s.Quality
}

// GetLogicalType returns the value of LogicalType.
func (s *Schema) GetLogicalType() OptSchemaLogicalType {
	return s.LogicalType
}

// GetPhysicalName returns the value of PhysicalName.
func (s *Schema) GetPhysicalName() OptString {
	return s.PhysicalName
}

// GetDataGranularityDescription returns the value of DataGranularityDescription.
func (s *Schema) GetDataGranularityDescription() OptString {
	return s.DataGranularityDescription
}

// GetID returns the value of ID.
func (s *Schema) GetID() string {
	return s.ID
}

// GetProperties returns the value of Properties.
func (s *Schema) GetProperties() []Property {
	return s.Properties
}

// SetName sets the value of Name.
func (s *Schema) SetName(val string) {
	s.Name = val
}

// SetPhysicalType sets the value of PhysicalType.
func (s *Schema) SetPhysicalType(val OptString) {
	s.PhysicalType = val
}

// SetDescription sets the value of Description.
func (s *Schema) SetDescription(val OptString) {
	s.Description = val
}

// SetBusinessName sets the value of BusinessName.
func (s *Schema) SetBusinessName(val OptString) {
	s.BusinessName = val
}

// SetTags sets the value of Tags.
func (s *Schema) SetTags(val []string) {
	s.Tags = val
}

// SetQuality sets the value of Quality.
func (s *Schema) SetQuality(val DataQuality) {
	s.Quality = val
}

// SetLogicalType sets the value of LogicalType.
func (s *Schema) SetLogicalType(val OptSchemaLogicalType) {
	s.LogicalType = val
}

// SetPhysicalName sets the value of PhysicalName.
func (s *Schema) SetPhysicalName(val OptString) {
	s.PhysicalName = val
}

// SetDataGranularityDescription sets the value of DataGranularityDescription.
func (s *Schema) SetDataGranularityDescription(val OptString) {
	s.DataGranularityDescription = val
}

// SetID sets the value of ID.
func (s *Schema) SetID(val string) {
	s.ID = val
}

// SetProperties sets the value of Properties.
func (s *Schema) SetProperties(val []Property) {
	s.Properties = val
}

func (*Schema) getSchemaRes() {}

// Merged schema.
// Ref: #
type SchemaCreate struct {
	// Name of the element.
	Name string `json:"name"`
	// The physical element data type in the data source.
	PhysicalType OptString `json:"physicalType"`
	// Description of the element.
	Description OptString `json:"description"`
	// The business name of the element.
	BusinessName OptString `json:"businessName"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags    []string    `json:"tags"`
	Quality DataQuality `json:"quality"`
	// The logical element data type.
	LogicalType OptSchemaCreateLogicalType `json:"logicalType"`
	// Physical name.
	PhysicalName OptString `json:"physicalName"`
	// Granular level of the data in the object.
	DataGranularityDescription OptString        `json:"dataGranularityDescription"`
	Properties                 []PropertyCreate `json:"properties"`
}

// GetName returns the value of Name.
func (s *SchemaCreate) GetName() string {
	return s.Name
}

// GetPhysicalType returns the value of PhysicalType.
func (s *SchemaCreate) GetPhysicalType() OptString {
	return s.PhysicalType
}

// GetDescription returns the value of Description.
func (s *SchemaCreate) GetDescription() OptString {
	return s.Description
}

// GetBusinessName returns the value of BusinessName.
func (s *SchemaCreate) GetBusinessName() OptString {
	return s.BusinessName
}

// GetTags returns the value of Tags.
func (s *SchemaCreate) GetTags() []string {
	return s.Tags
}

// GetQuality returns the value of Quality.
func (s *SchemaCreate) GetQuality() DataQuality {
	return s.Quality
}

// GetLogicalType returns the value of LogicalType.
func (s *SchemaCreate) GetLogicalType() OptSchemaCreateLogicalType {
	return s.LogicalType
}

// GetPhysicalName returns the value of PhysicalName.
func (s *SchemaCreate) GetPhysicalName() OptString {
	return s.PhysicalName
}

// GetDataGranularityDescription returns the value of DataGranularityDescription.
func (s *SchemaCreate) GetDataGranularityDescription() OptString {
	return s.DataGranularityDescription
}

// GetProperties returns the value of Properties.
func (s *SchemaCreate) GetProperties() []PropertyCreate {
	return s.Properties
}

// SetName sets the value of Name.
func (s *SchemaCreate) SetName(val string) {
	s.Name = val
}

// SetPhysicalType sets the value of PhysicalType.
func (s *SchemaCreate) SetPhysicalType(val OptString) {
	s.PhysicalType = val
}

// SetDescription sets the value of Description.
func (s *SchemaCreate) SetDescription(val OptString) {
	s.Description = val
}

// SetBusinessName sets the value of BusinessName.
func (s *SchemaCreate) SetBusinessName(val OptString) {
	s.BusinessName = val
}

// SetTags sets the value of Tags.
func (s *SchemaCreate) SetTags(val []string) {
	s.Tags = val
}

// SetQuality sets the value of Quality.
func (s *SchemaCreate) SetQuality(val DataQuality) {
	s.Quality = val
}

// SetLogicalType sets the value of LogicalType.
func (s *SchemaCreate) SetLogicalType(val OptSchemaCreateLogicalType) {
	s.LogicalType = val
}

// SetPhysicalName sets the value of PhysicalName.
func (s *SchemaCreate) SetPhysicalName(val OptString) {
	s.PhysicalName = val
}

// SetDataGranularityDescription sets the value of DataGranularityDescription.
func (s *SchemaCreate) SetDataGranularityDescription(val OptString) {
	s.DataGranularityDescription = val
}

// SetProperties sets the value of Properties.
func (s *SchemaCreate) SetProperties(val []PropertyCreate) {
	s.Properties = val
}

// The logical element data type.
type SchemaCreateLogicalType string

const (
	SchemaCreateLogicalTypeObject SchemaCreateLogicalType = "object"
)

// AllValues returns all SchemaCreateLogicalType values.
func (SchemaCreateLogicalType) AllValues() []SchemaCreateLogicalType {
	return []SchemaCreateLogicalType{
		SchemaCreateLogicalTypeObject,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SchemaCreateLogicalType) MarshalText() ([]byte, error) {
	switch s {
	case SchemaCreateLogicalTypeObject:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SchemaCreateLogicalType) UnmarshalText(data []byte) error {
	switch SchemaCreateLogicalType(data) {
	case SchemaCreateLogicalTypeObject:
		*s = SchemaCreateLogicalTypeObject
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// The logical element data type.
type SchemaLogicalType string

const (
	SchemaLogicalTypeObject SchemaLogicalType = "object"
)

// AllValues returns all SchemaLogicalType values.
func (SchemaLogicalType) AllValues() []SchemaLogicalType {
	return []SchemaLogicalType{
		SchemaLogicalTypeObject,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SchemaLogicalType) MarshalText() ([]byte, error) {
	switch s {
	case SchemaLogicalTypeObject:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SchemaLogicalType) UnmarshalText(data []byte) error {
	switch SchemaLogicalType(data) {
	case SchemaLogicalTypeObject:
		*s = SchemaLogicalTypeObject
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Merged schema.
// Ref: #
type SchemaUpdate struct {
	// Name of the element.
	Name OptString `json:"name"`
	// The physical element data type in the data source.
	PhysicalType OptString `json:"physicalType"`
	// Description of the element.
	Description OptString `json:"description"`
	// The business name of the element.
	BusinessName OptString `json:"businessName"`
	// A list of tags that may be assigned to the elements (object or property); the tags keyword may
	// appear at any level.
	Tags    []string    `json:"tags"`
	Quality DataQuality `json:"quality"`
	// The logical element data type.
	LogicalType OptSchemaUpdateLogicalType `json:"logicalType"`
	// Physical name.
	PhysicalName OptString `json:"physicalName"`
	// Granular level of the data in the object.
	DataGranularityDescription OptString        `json:"dataGranularityDescription"`
	Properties                 []PropertyCreate `json:"properties"`
}

// GetName returns the value of Name.
func (s *SchemaUpdate) GetName() OptString {
	return s.Name
}

// GetPhysicalType returns the value of PhysicalType.
func (s *SchemaUpdate) GetPhysicalType() OptString {
	return s.PhysicalType
}

// GetDescription returns the value of Description.
func (s *SchemaUpdate) GetDescription() OptString {
	return s.Description
}

// GetBusinessName returns the value of BusinessName.
func (s *SchemaUpdate) GetBusinessName() OptString {
	return s.BusinessName
}

// GetTags returns the value of Tags.
func (s *SchemaUpdate) GetTags() []string {
	return s.Tags
}

// GetQuality returns the value of Quality.
func (s *SchemaUpdate) GetQuality() DataQuality {
	return s.Quality
}

// GetLogicalType returns the value of LogicalType.
func (s *SchemaUpdate) GetLogicalType() OptSchemaUpdateLogicalType {
	return s.LogicalType
}

// GetPhysicalName returns the value of PhysicalName.
func (s *SchemaUpdate) GetPhysicalName() OptString {
	return s.PhysicalName
}

// GetDataGranularityDescription returns the value of DataGranularityDescription.
func (s *SchemaUpdate) GetDataGranularityDescription() OptString {
	return s.DataGranularityDescription
}

// GetProperties returns the value of Properties.
func (s *SchemaUpdate) GetProperties() []PropertyCreate {
	return s.Properties
}

// SetName sets the value of Name.
func (s *SchemaUpdate) SetName(val OptString) {
	s.Name = val
}

// SetPhysicalType sets the value of PhysicalType.
func (s *SchemaUpdate) SetPhysicalType(val OptString) {
	s.PhysicalType = val
}

// SetDescription sets the value of Description.
func (s *SchemaUpdate) SetDescription(val OptString) {
	s.Description = val
}

// SetBusinessName sets the value of BusinessName.
func (s *SchemaUpdate) SetBusinessName(val OptString) {
	s.BusinessName = val
}

// SetTags sets the value of Tags.
func (s *SchemaUpdate) SetTags(val []string) {
	s.Tags = val
}

// SetQuality sets the value of Quality.
func (s *SchemaUpdate) SetQuality(val DataQuality) {
	s.Quality = val
}

// SetLogicalType sets the value of LogicalType.
func (s *SchemaUpdate) SetLogicalType(val OptSchemaUpdateLogicalType) {
	s.LogicalType = val
}

// SetPhysicalName sets the value of PhysicalName.
func (s *SchemaUpdate) SetPhysicalName(val OptString) {
	s.PhysicalName = val
}

// SetDataGranularityDescription sets the value of DataGranularityDescription.
func (s *SchemaUpdate) SetDataGranularityDescription(val OptString) {
	s.DataGranularityDescription = val
}

// SetProperties sets the value of Properties.
func (s *SchemaUpdate) SetProperties(val []PropertyCreate) {
	s.Properties = val
}

// The logical element data type.
type SchemaUpdateLogicalType string

const (
	SchemaUpdateLogicalTypeObject SchemaUpdateLogicalType = "object"
)

// AllValues returns all SchemaUpdateLogicalType values.
func (SchemaUpdateLogicalType) AllValues() []SchemaUpdateLogicalType {
	return []SchemaUpdateLogicalType{
		SchemaUpdateLogicalTypeObject,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SchemaUpdateLogicalType) MarshalText() ([]byte, error) {
	switch s {
	case SchemaUpdateLogicalTypeObject:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SchemaUpdateLogicalType) UnmarshalText(data []byte) error {
	switch SchemaUpdateLogicalType(data) {
	case SchemaUpdateLogicalTypeObject:
		*s = SchemaUpdateLogicalTypeObject
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

type StoreSecretReq struct {
	// The secret to store in the secret-manager. It is stored 'as-is'. These files should be encrypted
	// with the public key obtained via the `/public-key` endpoint.
	Secret ht.MultipartFile `json:"secret"`
}

// GetSecret returns the value of Secret.
func (s *StoreSecretReq) GetSecret() ht.MultipartFile {
	return s.Secret
}

// SetSecret sets the value of Secret.
func (s *StoreSecretReq) SetSecret(val ht.MultipartFile) {
	s.Secret = val
}

type UnauthorizedError struct {
	ErrorMessage string `json:"error_message"`
}

// GetErrorMessage returns the value of ErrorMessage.
func (s *UnauthorizedError) GetErrorMessage() string {
	return s.ErrorMessage
}

// SetErrorMessage sets the value of ErrorMessage.
func (s *UnauthorizedError) SetErrorMessage(val string) {
	s.ErrorMessage = val
}

func (*UnauthorizedError) createCollaborationSpaceRes() {}
func (*UnauthorizedError) createCollaboratorRes()       {}
func (*UnauthorizedError) createDataContractRes()       {}
func (*UnauthorizedError) createPropertyRes()           {}
func (*UnauthorizedError) createSchemaRes()             {}
func (*UnauthorizedError) deleteCageRes()               {}
func (*UnauthorizedError) deleteCollaborationSpaceRes() {}
func (*UnauthorizedError) deleteCollaboratorRes()       {}
func (*UnauthorizedError) deleteDataContractRes()       {}
func (*UnauthorizedError) deleteInviteRes()             {}
func (*UnauthorizedError) deletePropertyRes()           {}
func (*UnauthorizedError) deleteSchemaRes()             {}
func (*UnauthorizedError) deployCageRes()               {}
func (*UnauthorizedError) getAlgorithmLogsRes()         {}
func (*UnauthorizedError) getAttestationReportRes()     {}
func (*UnauthorizedError) getClientRes()                {}
func (*UnauthorizedError) getCollaborationSpaceRes()    {}
func (*UnauthorizedError) getCollaborationSpacesRes()   {}
func (*UnauthorizedError) getCollaboratorRes()          {}
func (*UnauthorizedError) getCollaboratorsRes()         {}
func (*UnauthorizedError) getDataContractRes()          {}
func (*UnauthorizedError) getDataContractsRes()         {}
func (*UnauthorizedError) getDeploymentLogsRes()        {}
func (*UnauthorizedError) getInvitesRes()               {}
func (*UnauthorizedError) getNotificationsRes()         {}
func (*UnauthorizedError) getPropertyRes()              {}
func (*UnauthorizedError) getPublicKeyRes()             {}
func (*UnauthorizedError) getSchemaRes()                {}
func (*UnauthorizedError) publishEventRes()             {}
func (*UnauthorizedError) rotateKeysRes()               {}
func (*UnauthorizedError) storeSecretRes()              {}
func (*UnauthorizedError) updateCollaboratorRes()       {}
func (*UnauthorizedError) updateDataContractRes()       {}
func (*UnauthorizedError) updatePropertyRes()           {}
func (*UnauthorizedError) updateSchemaRes()             {}
