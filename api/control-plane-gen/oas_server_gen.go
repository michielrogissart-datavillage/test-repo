// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	ClientsHandler
	CollaborationSpacesHandler
	DataContractsHandler
	InvitesHandler
	WellKnownHandler
	// CreateCollaborator implements CreateCollaborator operation.
	//
	// Add a new collaborator to a collaboration space. Allowed if the client owns the space.
	//
	// POST /collaboration-spaces/{spaceId}/collaborators
	CreateCollaborator(ctx context.Context, req *CollaboratorCreate, params CreateCollaboratorParams) (CreateCollaboratorRes, error)
	// DeleteDataContract implements DeleteDataContract operation.
	//
	// Delete a data contract by ID. Allowed if the client owns the contract.
	//
	// DELETE /data-contracts/{contractId}
	DeleteDataContract(ctx context.Context, params DeleteDataContractParams) (DeleteDataContractRes, error)
	// DeleteSchema implements DeleteSchema operation.
	//
	// Delete a schema by ID. Allowed if the client owns the contract.
	//
	// DELETE /data-contracts/{contractId}/schema/{schemaId}
	DeleteSchema(ctx context.Context, params DeleteSchemaParams) (DeleteSchemaRes, error)
	// UpdateSchema implements UpdateSchema operation.
	//
	// Update ODCS properties of a schema by ID. Nested fields will be overwritten if specified. Allowed
	// if the client owns the contract.
	//
	// PATCH /data-contracts/{contractId}/schema/{schemaId}
	UpdateSchema(ctx context.Context, req *SchemaUpdate, params UpdateSchemaParams) (UpdateSchemaRes, error)
}

// ClientsHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Clients
type ClientsHandler interface {
	// GetClient implements GetClient operation.
	//
	// Get all information related to a client.
	//
	// GET /clients/{clientId}
	GetClient(ctx context.Context, params GetClientParams) (GetClientRes, error)
	// GetNotifications implements GetNotifications operation.
	//
	// Get all notifications related to a client.
	//
	// GET /clients/{clientId}/notifications
	GetNotifications(ctx context.Context, params GetNotificationsParams) (GetNotificationsRes, error)
}

// CollaborationSpacesHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: CollaborationSpaces
type CollaborationSpacesHandler interface {
	// CreateCollaborationSpace implements CreateCollaborationSpace operation.
	//
	// Create a new collaboration space owned by the client the user is authenticated for.
	//
	// POST /collaboration-spaces
	CreateCollaborationSpace(ctx context.Context, req *CollaborationSpaceCreate) (CreateCollaborationSpaceRes, error)
	// DeleteCage implements DeleteCage operation.
	//
	// Shut down the confidential cluster running the algorithm of a collaboration space.
	//
	// DELETE /collaboration-spaces/{spaceId}/deployment
	DeleteCage(ctx context.Context, params DeleteCageParams) (DeleteCageRes, error)
	// DeleteCollaborationSpace implements DeleteCollaborationSpace operation.
	//
	// Delete a collaboration space by id. Allowed if the client owns the space.
	//
	// DELETE /collaboration-spaces/{spaceId}
	DeleteCollaborationSpace(ctx context.Context, params DeleteCollaborationSpaceParams) (DeleteCollaborationSpaceRes, error)
	// DeleteCollaborator implements DeleteCollaborator operation.
	//
	// Delete a collaborator by ID. Allowed if the client owns the collaborator.
	//
	// DELETE /collaboration-spaces/{spaceId}/collaborators/{collaboratorId}
	DeleteCollaborator(ctx context.Context, params DeleteCollaboratorParams) (DeleteCollaboratorRes, error)
	// DeployCage implements DeployCage operation.
	//
	// Starts a confidential cluster if necessary and deploys the version of the algorithm as configured
	// in the collaboration space model.
	//
	// POST /collaboration-spaces/{spaceId}/deployment
	DeployCage(ctx context.Context, params DeployCageParams) (DeployCageRes, error)
	// GetAlgorithmLogs implements GetAlgorithmLogs operation.
	//
	// Get `tail_lines` most recent lines of the output written by the algorithm.
	//
	// GET /collaboration-spaces/{spaceId}/algo/logs
	GetAlgorithmLogs(ctx context.Context, params GetAlgorithmLogsParams) (GetAlgorithmLogsRes, error)
	// GetAttestationReport implements GetAttestationReport operation.
	//
	// Get an attestation report of the virtual machine.
	//
	// GET /collaboration-spaces/{spaceId}/attestation-token
	GetAttestationReport(ctx context.Context, params GetAttestationReportParams) (GetAttestationReportRes, error)
	// GetCollaborationSpace implements GetCollaborationSpace operation.
	//
	// Get a collaboration space by ID. Allowed if the client either owns it or is a collaborator.
	//
	// GET /collaboration-spaces/{spaceId}
	GetCollaborationSpace(ctx context.Context, params GetCollaborationSpaceParams) (GetCollaborationSpaceRes, error)
	// GetCollaborationSpaces implements GetCollaborationSpaces operation.
	//
	// Get all collaboration spaces the user has access to.
	//
	// GET /collaboration-spaces
	GetCollaborationSpaces(ctx context.Context) (GetCollaborationSpacesRes, error)
	// GetCollaborator implements GetCollaborator operation.
	//
	// Get a collaborator by ID. Allowed if the client is owner or collaborator of the collaboration
	// space.
	//
	// GET /collaboration-spaces/{spaceId}/collaborators/{collaboratorId}
	GetCollaborator(ctx context.Context, params GetCollaboratorParams) (GetCollaboratorRes, error)
	// GetCollaborators implements GetCollaborators operation.
	//
	// Get all collaborators of a collaboration space. Allowed if the client owns it or is a collaborator.
	//
	// GET /collaboration-spaces/{spaceId}/collaborators
	GetCollaborators(ctx context.Context, params GetCollaboratorsParams) (GetCollaboratorsRes, error)
	// GetDeployment implements GetDeployment operation.
	//
	// Get information of the current deployment of the cage. An object is returned that contains the
	// status of the deployment as well as the status of individual pods of the platform.
	//
	// GET /collaboration-spaces/{spaceId}/deployment
	GetDeployment(ctx context.Context, params GetDeploymentParams) (GetDeploymentRes, error)
	// GetDeploymentLogs implements GetDeploymentLogs operation.
	//
	// Get `tail_lines` most recent lines of the output generated by the deployment of a cage.
	//
	// GET /collaboration-spaces/{spaceId}/deployment/logs
	GetDeploymentLogs(ctx context.Context, params GetDeploymentLogsParams) (GetDeploymentLogsRes, error)
	// GetPublicKey implements GetPublicKey operation.
	//
	// Get the public key linked to a collaboration space.
	//
	// GET /collaboration-spaces/{spaceId}/keys/public-key
	GetPublicKey(ctx context.Context, params GetPublicKeyParams) (GetPublicKeyRes, error)
	// PublishEvent implements PublishEvent operation.
	//
	// Publish an event to the confidential environment of the collaboration space.
	//
	// POST /collaboration-spaces/{spaceId}/event
	PublishEvent(ctx context.Context, req *PublishEventReq, params PublishEventParams) (PublishEventRes, error)
	// RotateKeys implements RotateKeys operation.
	//
	// Rotates the keys of the secret manager supporting the space.
	//
	// POST /collaboration-spaces/{spaceId}/keys
	RotateKeys(ctx context.Context, params RotateKeysParams) (RotateKeysRes, error)
	// StoreSecret implements StoreSecret operation.
	//
	// Stores the content of the request as a secret in the cage. Secrets that already exist will be
	// overwritten.  A secret can be encrypted with the public key of the cage. The cage will then have
	// access to the decrypted version. This encryption should be done client side such that the platform
	// never sees the decrypted data.
	//
	// PUT /collaboration-spaces/{spaceId}/secrets/{secretId}
	StoreSecret(ctx context.Context, req *StoreSecretReq, params StoreSecretParams) (StoreSecretRes, error)
	// UpdateCollaborationSpace implements UpdateCollaborationSpace operation.
	//
	// Update a collaboration space by ID. Allowed if the client owns the space.
	//
	// PATCH /collaboration-spaces/{spaceId}
	UpdateCollaborationSpace(ctx context.Context, req *CollaborationSpaceUpdate, params UpdateCollaborationSpaceParams) (UpdateCollaborationSpaceRes, error)
	// UpdateCollaborator implements UpdateCollaborator operation.
	//
	// Update a collaborator by ID. Allowed if the client owns the collaborator.
	//
	// PATCH /collaboration-spaces/{spaceId}/collaborators/{collaboratorId}
	UpdateCollaborator(ctx context.Context, req *CollaboratorUpdate, params UpdateCollaboratorParams) (UpdateCollaboratorRes, error)
}

// DataContractsHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: DataContracts
type DataContractsHandler interface {
	// CreateDataContract implements CreateDataContract operation.
	//
	// Create a new data contract based on an ODCS description. It will be owned by the client the
	// account is authenticated for.
	//
	// POST /data-contracts
	CreateDataContract(ctx context.Context, req CreateDataContractReq) (CreateDataContractRes, error)
	// CreateProperty implements CreateProperty operation.
	//
	// Create a new property based on an ODCS description. Allowed if the client is the owner of the
	// contract.
	//
	// POST /data-contracts/{contractId}/schema/{schemaId}/properties
	CreateProperty(ctx context.Context, req *PropertyCreate, params CreatePropertyParams) (CreatePropertyRes, error)
	// CreateSchema implements CreateSchema operation.
	//
	// Create a new schema based on an ODCS description. Allowed if the client is the owner of the
	// contract.
	//
	// POST /data-contracts/{contractId}/schema
	CreateSchema(ctx context.Context, req *SchemaCreate, params CreateSchemaParams) (CreateSchemaRes, error)
	// DeleteProperty implements DeleteProperty operation.
	//
	// Delete a property by ID. Allowed if the client owns the contract.
	//
	// DELETE /data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}
	DeleteProperty(ctx context.Context, params DeletePropertyParams) (DeletePropertyRes, error)
	// GetDataContract implements GetDataContract operation.
	//
	// Get a data contract by ID.
	//
	// GET /data-contracts/{contractId}
	GetDataContract(ctx context.Context, params GetDataContractParams) (GetDataContractRes, error)
	// GetDataContracts implements GetDataContracts operation.
	//
	// Get all data contracts your account has access to, optionally filtering by name.
	//
	// GET /data-contracts
	GetDataContracts(ctx context.Context, params GetDataContractsParams) (GetDataContractsRes, error)
	// GetProperty implements GetProperty operation.
	//
	// Get the ODCS description of a property by ID.
	//
	// GET /data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}
	GetProperty(ctx context.Context, params GetPropertyParams) (GetPropertyRes, error)
	// GetSchema implements GetSchema operation.
	//
	// Get the ODCS description of a schema by ID.
	//
	// GET /data-contracts/{contractId}/schema/{schemaId}
	GetSchema(ctx context.Context, params GetSchemaParams) (GetSchemaRes, error)
	// UpdateDataContract implements UpdateDataContract operation.
	//
	// Update ODCS properties of a data contract by ID. Nested fields are overwritten when specified.
	// Allowed if the client is the owner.
	//
	// PATCH /data-contracts/{contractId}
	UpdateDataContract(ctx context.Context, req *DataContractUpdate, params UpdateDataContractParams) (UpdateDataContractRes, error)
	// UpdateProperty implements UpdateProperty operation.
	//
	// Update ODCS properties of a property by ID. Allowed if the client owns the contract.
	//
	// PATCH /data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}
	UpdateProperty(ctx context.Context, req *PropertyUpdate, params UpdatePropertyParams) (UpdatePropertyRes, error)
}

// InvitesHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: Invites
type InvitesHandler interface {
	// CreateInvites implements CreateInvites operation.
	//
	// Invite another client as a collaborator of a space.
	//
	// POST /invites
	CreateInvites(ctx context.Context) error
	// DeleteInvite implements DeleteInvite operation.
	//
	// Delete invite.
	//
	// DELETE /invites/{inviteId}
	DeleteInvite(ctx context.Context, params DeleteInviteParams) (DeleteInviteRes, error)
	// GetInvite implements GetInvite operation.
	//
	// GET /invites/{inviteId}
	GetInvite(ctx context.Context, params GetInviteParams) error
	// GetInviteStatus implements GetInviteStatus operation.
	//
	// GET /invites/{inviteId}/status
	GetInviteStatus(ctx context.Context, params GetInviteStatusParams) error
	// GetInvites implements GetInvites operation.
	//
	// GET /invites
	GetInvites(ctx context.Context) (GetInvitesRes, error)
	// UpdateInvite implements UpdateInvite operation.
	//
	// PATCH /invites/{inviteId}
	UpdateInvite(ctx context.Context, params UpdateInviteParams) (UpdateInviteRes, error)
	// UpdateInviteStatus implements UpdateInviteStatus operation.
	//
	// PATCH /invites/{inviteId}/status
	UpdateInviteStatus(ctx context.Context, params UpdateInviteStatusParams) (UpdateInviteStatusRes, error)
}

// WellKnownHandler handles operations described by OpenAPI v3 specification.
//
// x-ogen-operation-group: WellKnown
type WellKnownHandler interface {
	// GetCollaborationSpaceAppId implements GetCollaborationSpaceAppId operation.
	//
	// Get the JSON-LD application document to authenticate the application in a Solid eco-system.
	//
	// GET /.well-known/collaboration-spaces/{spaceId}/appid
	GetCollaborationSpaceAppId(ctx context.Context, params GetCollaborationSpaceAppIdParams) (GetCollaborationSpaceAppIdRes, error)
	// GetCollaborationSpaceWebId implements GetCollaborationSpaceWebId operation.
	//
	// Get the turtle document describing the collaboration space as an agent in a Solid eco-system. The
	// URI serves as WebID of the agent.
	//
	// GET /.well-known/collaboration-spaces/{spaceId}/webid
	GetCollaborationSpaceWebId(ctx context.Context, params GetCollaborationSpaceWebIdParams) (GetCollaborationSpaceWebIdRes, error)
	// GetPublicClient implements GetPublicClient operation.
	//
	// Get public information about a client based on a human readable label.
	//
	// GET /.well-known/clients/{clientLabel}
	GetPublicClient(ctx context.Context, params GetPublicClientParams) (GetPublicClientRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
