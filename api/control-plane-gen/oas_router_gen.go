// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '.': // Prefix: ".well-known/c"
				origElem := elem
				if l := len(".well-known/c"); len(elem) >= l && elem[0:l] == ".well-known/c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "lients/"
					origElem := elem
					if l := len("lients/"); len(elem) >= l && elem[0:l] == "lients/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "clientLabel"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleGetPublicClientRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}

					elem = origElem
				case 'o': // Prefix: "ollaboration-spaces/"
					origElem := elem
					if l := len("ollaboration-spaces/"); len(elem) >= l && elem[0:l] == "ollaboration-spaces/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "spaceId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "appid"
							origElem := elem
							if l := len("appid"); len(elem) >= l && elem[0:l] == "appid" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetCollaborationSpaceAppIdRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						case 'w': // Prefix: "webid"
							origElem := elem
							if l := len("webid"); len(elem) >= l && elem[0:l] == "webid" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleGetCollaborationSpaceWebIdRequest([1]string{
										args[0],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "c"
				origElem := elem
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "lients/"
					origElem := elem
					if l := len("lients/"); len(elem) >= l && elem[0:l] == "lients/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "clientId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetClientRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/notifications"
						origElem := elem
						if l := len("/notifications"); len(elem) >= l && elem[0:l] == "/notifications" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetNotificationsRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "ollaboration-spaces"
					origElem := elem
					if l := len("ollaboration-spaces"); len(elem) >= l && elem[0:l] == "ollaboration-spaces" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleGetCollaborationSpacesRequest([0]string{}, elemIsEscaped, w, r)
						case "POST":
							s.handleCreateCollaborationSpaceRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "GET,POST")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "spaceId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "DELETE":
								s.handleDeleteCollaborationSpaceRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "GET":
								s.handleGetCollaborationSpaceRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateCollaborationSpaceRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "DELETE,GET,PATCH")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "a"
								origElem := elem
								if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'l': // Prefix: "lgo/logs"
									origElem := elem
									if l := len("lgo/logs"); len(elem) >= l && elem[0:l] == "lgo/logs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetAlgorithmLogsRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								case 't': // Prefix: "ttestation-token"
									origElem := elem
									if l := len("ttestation-token"); len(elem) >= l && elem[0:l] == "ttestation-token" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetAttestationReportRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "collaborators"
								origElem := elem
								if l := len("collaborators"); len(elem) >= l && elem[0:l] == "collaborators" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleGetCollaboratorsRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleCreateCollaboratorRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "collaboratorId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeleteCollaboratorRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetCollaboratorRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										case "PATCH":
											s.handleUpdateCollaboratorRequest([2]string{
												args[0],
												args[1],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PATCH")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'd': // Prefix: "deployment"
								origElem := elem
								if l := len("deployment"); len(elem) >= l && elem[0:l] == "deployment" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "DELETE":
										s.handleDeleteCageRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "GET":
										s.handleGetDeploymentRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									case "POST":
										s.handleDeployCageRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "DELETE,GET,POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/logs"
									origElem := elem
									if l := len("/logs"); len(elem) >= l && elem[0:l] == "/logs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetDeploymentLogsRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 'e': // Prefix: "event"
								origElem := elem
								if l := len("event"); len(elem) >= l && elem[0:l] == "event" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "POST":
										s.handlePublishEventRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}

								elem = origElem
							case 'k': // Prefix: "keys"
								origElem := elem
								if l := len("keys"); len(elem) >= l && elem[0:l] == "keys" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleRotateKeysRequest([1]string{
											args[0],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/public-key"
									origElem := elem
									if l := len("/public-key"); len(elem) >= l && elem[0:l] == "/public-key" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleGetPublicKeyRequest([1]string{
												args[0],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "secrets/"
								origElem := elem
								if l := len("secrets/"); len(elem) >= l && elem[0:l] == "secrets/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "secretId"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "PUT":
										s.handleStoreSecretRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "PUT")
									}

									return
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'd': // Prefix: "data-contracts"
				origElem := elem
				if l := len("data-contracts"); len(elem) >= l && elem[0:l] == "data-contracts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetDataContractsRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateDataContractRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "contractId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteDataContractRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetDataContractRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateDataContractRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/schema"
						origElem := elem
						if l := len("/schema"); len(elem) >= l && elem[0:l] == "/schema" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleCreateSchemaRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "schemaId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch r.Method {
								case "DELETE":
									s.handleDeleteSchemaRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "GET":
									s.handleGetSchemaRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								case "PATCH":
									s.handleUpdateSchemaRequest([2]string{
										args[0],
										args[1],
									}, elemIsEscaped, w, r)
								default:
									s.notAllowed(w, r, "DELETE,GET,PATCH")
								}

								return
							}
							switch elem[0] {
							case '/': // Prefix: "/properties"
								origElem := elem
								if l := len("/properties"); len(elem) >= l && elem[0:l] == "/properties" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch r.Method {
									case "POST":
										s.handleCreatePropertyRequest([2]string{
											args[0],
											args[1],
										}, elemIsEscaped, w, r)
									default:
										s.notAllowed(w, r, "POST")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "propertyId"
									// Leaf parameter
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "DELETE":
											s.handleDeletePropertyRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "GET":
											s.handleGetPropertyRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										case "PATCH":
											s.handleUpdatePropertyRequest([3]string{
												args[0],
												args[1],
												args[2],
											}, elemIsEscaped, w, r)
										default:
											s.notAllowed(w, r, "DELETE,GET,PATCH")
										}

										return
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "invites"
				origElem := elem
				if l := len("invites"); len(elem) >= l && elem[0:l] == "invites" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetInvitesRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleCreateInvitesRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "inviteId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "DELETE":
							s.handleDeleteInviteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "GET":
							s.handleGetInviteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						case "PATCH":
							s.handleUpdateInviteRequest([1]string{
								args[0],
							}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "DELETE,GET,PATCH")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/status"
						origElem := elem
						if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetInviteStatusRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							case "PATCH":
								s.handleUpdateInviteStatusRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET,PATCH")
							}

							return
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '.': // Prefix: ".well-known/c"
				origElem := elem
				if l := len(".well-known/c"); len(elem) >= l && elem[0:l] == ".well-known/c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "lients/"
					origElem := elem
					if l := len("lients/"); len(elem) >= l && elem[0:l] == "lients/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "clientLabel"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "GET":
							r.name = GetPublicClientOperation
							r.summary = "Get Client Info"
							r.operationID = "GetPublicClient"
							r.pathPattern = "/.well-known/clients/{clientLabel}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'o': // Prefix: "ollaboration-spaces/"
					origElem := elem
					if l := len("ollaboration-spaces/"); len(elem) >= l && elem[0:l] == "ollaboration-spaces/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "spaceId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "appid"
							origElem := elem
							if l := len("appid"); len(elem) >= l && elem[0:l] == "appid" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetCollaborationSpaceAppIdOperation
									r.summary = "Get AppId Document"
									r.operationID = "GetCollaborationSpaceAppId"
									r.pathPattern = "/.well-known/collaboration-spaces/{spaceId}/appid"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						case 'w': // Prefix: "webid"
							origElem := elem
							if l := len("webid"); len(elem) >= l && elem[0:l] == "webid" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch method {
								case "GET":
									r.name = GetCollaborationSpaceWebIdOperation
									r.summary = "Get WebId Document"
									r.operationID = "GetCollaborationSpaceWebId"
									r.pathPattern = "/.well-known/collaboration-spaces/{spaceId}/webid"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'c': // Prefix: "c"
				origElem := elem
				if l := len("c"); len(elem) >= l && elem[0:l] == "c" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "lients/"
					origElem := elem
					if l := len("lients/"); len(elem) >= l && elem[0:l] == "lients/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "clientId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetClientOperation
							r.summary = "Get client"
							r.operationID = "GetClient"
							r.pathPattern = "/clients/{clientId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/notifications"
						origElem := elem
						if l := len("/notifications"); len(elem) >= l && elem[0:l] == "/notifications" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetNotificationsOperation
								r.summary = "Get Notifications"
								r.operationID = "GetNotifications"
								r.pathPattern = "/clients/{clientId}/notifications"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				case 'o': // Prefix: "ollaboration-spaces"
					origElem := elem
					if l := len("ollaboration-spaces"); len(elem) >= l && elem[0:l] == "ollaboration-spaces" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = GetCollaborationSpacesOperation
							r.summary = "Get Collaboration Spaces"
							r.operationID = "GetCollaborationSpaces"
							r.pathPattern = "/collaboration-spaces"
							r.args = args
							r.count = 0
							return r, true
						case "POST":
							r.name = CreateCollaborationSpaceOperation
							r.summary = "Create Collaboration Space"
							r.operationID = "CreateCollaborationSpace"
							r.pathPattern = "/collaboration-spaces"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						origElem := elem
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "spaceId"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "DELETE":
								r.name = DeleteCollaborationSpaceOperation
								r.summary = "Delete Collaboration Space"
								r.operationID = "DeleteCollaborationSpace"
								r.pathPattern = "/collaboration-spaces/{spaceId}"
								r.args = args
								r.count = 1
								return r, true
							case "GET":
								r.name = GetCollaborationSpaceOperation
								r.summary = "Get Collaboration Space"
								r.operationID = "GetCollaborationSpace"
								r.pathPattern = "/collaboration-spaces/{spaceId}"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = UpdateCollaborationSpaceOperation
								r.summary = "Update a collaboration space by ID. Allowed if the client owns the space."
								r.operationID = "UpdateCollaborationSpace"
								r.pathPattern = "/collaboration-spaces/{spaceId}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "a"
								origElem := elem
								if l := len("a"); len(elem) >= l && elem[0:l] == "a" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'l': // Prefix: "lgo/logs"
									origElem := elem
									if l := len("lgo/logs"); len(elem) >= l && elem[0:l] == "lgo/logs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetAlgorithmLogsOperation
											r.summary = "Get Algorithm Logs"
											r.operationID = "GetAlgorithmLogs"
											r.pathPattern = "/collaboration-spaces/{spaceId}/algo/logs"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								case 't': // Prefix: "ttestation-token"
									origElem := elem
									if l := len("ttestation-token"); len(elem) >= l && elem[0:l] == "ttestation-token" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetAttestationReportOperation
											r.summary = "Get Attestation Report"
											r.operationID = "GetAttestationReport"
											r.pathPattern = "/collaboration-spaces/{spaceId}/attestation-token"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'c': // Prefix: "collaborators"
								origElem := elem
								if l := len("collaborators"); len(elem) >= l && elem[0:l] == "collaborators" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = GetCollaboratorsOperation
										r.summary = "Get Collaborators"
										r.operationID = "GetCollaborators"
										r.pathPattern = "/collaboration-spaces/{spaceId}/collaborators"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = CreateCollaboratorOperation
										r.summary = "Create Collaborator"
										r.operationID = "CreateCollaborator"
										r.pathPattern = "/collaboration-spaces/{spaceId}/collaborators"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "collaboratorId"
									// Leaf parameter
									args[1] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = DeleteCollaboratorOperation
											r.summary = "Delete Collaborator"
											r.operationID = "DeleteCollaborator"
											r.pathPattern = "/collaboration-spaces/{spaceId}/collaborators/{collaboratorId}"
											r.args = args
											r.count = 2
											return r, true
										case "GET":
											r.name = GetCollaboratorOperation
											r.summary = "Get Collaborator"
											r.operationID = "GetCollaborator"
											r.pathPattern = "/collaboration-spaces/{spaceId}/collaborators/{collaboratorId}"
											r.args = args
											r.count = 2
											return r, true
										case "PATCH":
											r.name = UpdateCollaboratorOperation
											r.summary = "Update Collaborator"
											r.operationID = "UpdateCollaborator"
											r.pathPattern = "/collaboration-spaces/{spaceId}/collaborators/{collaboratorId}"
											r.args = args
											r.count = 2
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'd': // Prefix: "deployment"
								origElem := elem
								if l := len("deployment"); len(elem) >= l && elem[0:l] == "deployment" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "DELETE":
										r.name = DeleteCageOperation
										r.summary = "Delete Cage"
										r.operationID = "DeleteCage"
										r.pathPattern = "/collaboration-spaces/{spaceId}/deployment"
										r.args = args
										r.count = 1
										return r, true
									case "GET":
										r.name = GetDeploymentOperation
										r.summary = "Get deployment"
										r.operationID = "GetDeployment"
										r.pathPattern = "/collaboration-spaces/{spaceId}/deployment"
										r.args = args
										r.count = 1
										return r, true
									case "POST":
										r.name = DeployCageOperation
										r.summary = "Deploy Cage"
										r.operationID = "DeployCage"
										r.pathPattern = "/collaboration-spaces/{spaceId}/deployment"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/logs"
									origElem := elem
									if l := len("/logs"); len(elem) >= l && elem[0:l] == "/logs" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetDeploymentLogsOperation
											r.summary = "Get Deployment Logs"
											r.operationID = "GetDeploymentLogs"
											r.pathPattern = "/collaboration-spaces/{spaceId}/deployment/logs"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 'e': // Prefix: "event"
								origElem := elem
								if l := len("event"); len(elem) >= l && elem[0:l] == "event" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "POST":
										r.name = PublishEventOperation
										r.summary = "Publish Event"
										r.operationID = "PublishEvent"
										r.pathPattern = "/collaboration-spaces/{spaceId}/event"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}

								elem = origElem
							case 'k': // Prefix: "keys"
								origElem := elem
								if l := len("keys"); len(elem) >= l && elem[0:l] == "keys" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = RotateKeysOperation
										r.summary = "Rotate keys"
										r.operationID = "RotateKeys"
										r.pathPattern = "/collaboration-spaces/{spaceId}/keys"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/public-key"
									origElem := elem
									if l := len("/public-key"); len(elem) >= l && elem[0:l] == "/public-key" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "GET":
											r.name = GetPublicKeyOperation
											r.summary = ""
											r.operationID = "GetPublicKey"
											r.pathPattern = "/collaboration-spaces/{spaceId}/keys/public-key"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							case 's': // Prefix: "secrets/"
								origElem := elem
								if l := len("secrets/"); len(elem) >= l && elem[0:l] == "secrets/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "secretId"
								// Leaf parameter
								args[1] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch method {
									case "PUT":
										r.name = StoreSecretOperation
										r.summary = "Store secret"
										r.operationID = "StoreSecret"
										r.pathPattern = "/collaboration-spaces/{spaceId}/secrets/{secretId}"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'd': // Prefix: "data-contracts"
				origElem := elem
				if l := len("data-contracts"); len(elem) >= l && elem[0:l] == "data-contracts" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetDataContractsOperation
						r.summary = "Get Data Contracts"
						r.operationID = "GetDataContracts"
						r.pathPattern = "/data-contracts"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateDataContractOperation
						r.summary = "Create Data Contract"
						r.operationID = "CreateDataContract"
						r.pathPattern = "/data-contracts"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "contractId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = DeleteDataContractOperation
							r.summary = "Delete Data Contract"
							r.operationID = "DeleteDataContract"
							r.pathPattern = "/data-contracts/{contractId}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetDataContractOperation
							r.summary = "Get Data Contract"
							r.operationID = "GetDataContract"
							r.pathPattern = "/data-contracts/{contractId}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = UpdateDataContractOperation
							r.summary = "Update Data Contract"
							r.operationID = "UpdateDataContract"
							r.pathPattern = "/data-contracts/{contractId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/schema"
						origElem := elem
						if l := len("/schema"); len(elem) >= l && elem[0:l] == "/schema" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = CreateSchemaOperation
								r.summary = "Create Schema"
								r.operationID = "CreateSchema"
								r.pathPattern = "/data-contracts/{contractId}/schema"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							origElem := elem
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "schemaId"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[1] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								switch method {
								case "DELETE":
									r.name = DeleteSchemaOperation
									r.summary = "Delete Schema"
									r.operationID = "DeleteSchema"
									r.pathPattern = "/data-contracts/{contractId}/schema/{schemaId}"
									r.args = args
									r.count = 2
									return r, true
								case "GET":
									r.name = GetSchemaOperation
									r.summary = "Get Schema"
									r.operationID = "GetSchema"
									r.pathPattern = "/data-contracts/{contractId}/schema/{schemaId}"
									r.args = args
									r.count = 2
									return r, true
								case "PATCH":
									r.name = UpdateSchemaOperation
									r.summary = "Update Schema"
									r.operationID = "UpdateSchema"
									r.pathPattern = "/data-contracts/{contractId}/schema/{schemaId}"
									r.args = args
									r.count = 2
									return r, true
								default:
									return
								}
							}
							switch elem[0] {
							case '/': // Prefix: "/properties"
								origElem := elem
								if l := len("/properties"); len(elem) >= l && elem[0:l] == "/properties" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "POST":
										r.name = CreatePropertyOperation
										r.summary = "Create Property"
										r.operationID = "CreateProperty"
										r.pathPattern = "/data-contracts/{contractId}/schema/{schemaId}/properties"
										r.args = args
										r.count = 2
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/"
									origElem := elem
									if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
										elem = elem[l:]
									} else {
										break
									}

									// Param: "propertyId"
									// Leaf parameter
									args[2] = elem
									elem = ""

									if len(elem) == 0 {
										// Leaf node.
										switch method {
										case "DELETE":
											r.name = DeletePropertyOperation
											r.summary = "Delete Property"
											r.operationID = "DeleteProperty"
											r.pathPattern = "/data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}"
											r.args = args
											r.count = 3
											return r, true
										case "GET":
											r.name = GetPropertyOperation
											r.summary = "Get Property"
											r.operationID = "GetProperty"
											r.pathPattern = "/data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}"
											r.args = args
											r.count = 3
											return r, true
										case "PATCH":
											r.name = UpdatePropertyOperation
											r.summary = "Update Property"
											r.operationID = "UpdateProperty"
											r.pathPattern = "/data-contracts/{contractId}/schema/{schemaId}/properties/{propertyId}"
											r.args = args
											r.count = 3
											return r, true
										default:
											return
										}
									}

									elem = origElem
								}

								elem = origElem
							}

							elem = origElem
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			case 'i': // Prefix: "invites"
				origElem := elem
				if l := len("invites"); len(elem) >= l && elem[0:l] == "invites" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetInvitesOperation
						r.summary = ""
						r.operationID = "GetInvites"
						r.pathPattern = "/invites"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = CreateInvitesOperation
						r.summary = "Invite Collaborator"
						r.operationID = "CreateInvites"
						r.pathPattern = "/invites"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					origElem := elem
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "inviteId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "DELETE":
							r.name = DeleteInviteOperation
							r.summary = "Delete invite"
							r.operationID = "DeleteInvite"
							r.pathPattern = "/invites/{inviteId}"
							r.args = args
							r.count = 1
							return r, true
						case "GET":
							r.name = GetInviteOperation
							r.summary = ""
							r.operationID = "GetInvite"
							r.pathPattern = "/invites/{inviteId}"
							r.args = args
							r.count = 1
							return r, true
						case "PATCH":
							r.name = UpdateInviteOperation
							r.summary = ""
							r.operationID = "UpdateInvite"
							r.pathPattern = "/invites/{inviteId}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/status"
						origElem := elem
						if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetInviteStatusOperation
								r.summary = ""
								r.operationID = "GetInviteStatus"
								r.pathPattern = "/invites/{inviteId}/status"
								r.args = args
								r.count = 1
								return r, true
							case "PATCH":
								r.name = UpdateInviteStatusOperation
								r.summary = ""
								r.operationID = "UpdateInviteStatus"
								r.pathPattern = "/invites/{inviteId}/status"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

						elem = origElem
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
