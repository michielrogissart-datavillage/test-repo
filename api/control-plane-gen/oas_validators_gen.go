// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/validate"
)

func (s AnyType) Validate() error {
	switch s.Type {
	case StringAnyType:
		return nil // no validation needed
	case Float64AnyType:
		if err := (validate.Float{}).Validate(float64(s.Float64)); err != nil {
			return errors.Wrap(err, "float")
		}
		return nil
	case IntAnyType:
		return nil // no validation needed
	case BoolAnyType:
		return nil // no validation needed
	case AnyArrayAnyType:
		if s.AnyArray == nil {
			return errors.New("nil is invalid value")
		}
		return nil
	case AnyType5AnyType:
		return nil // no validation needed
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *CustomProperty) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Value.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "value",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DataContract) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.DataContract.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dataContract",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DataContractCreate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.ApiVersion.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiVersion",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Kind.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Price.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "price",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Schema {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schema",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DataContractCreateApiVersion) Validate() error {
	switch s {
	case "v3.0.0":
		return nil
	case "v2.2.2":
		return nil
	case "v2.2.1":
		return nil
	case "v2.2.0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DataContractCreateKind) Validate() error {
	switch s {
	case "DataContract":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *DataContractDataContract) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.ApiVersion.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiVersion",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.Kind.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Price.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "price",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Schema {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schema",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DataContractDataContractApiVersion) Validate() error {
	switch s {
	case "v3.0.0":
		return nil
	case "v2.2.2":
		return nil
	case "v2.2.1":
		return nil
	case "v2.2.0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DataContractDataContractKind) Validate() error {
	switch s {
	case "DataContract":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *DataContractUpdate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.ApiVersion.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "apiVersion",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Kind.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "kind",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Price.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "price",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Schema {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "schema",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DataContractUpdateApiVersion) Validate() error {
	switch s {
	case "v3.0.0":
		return nil
	case "v2.2.2":
		return nil
	case "v2.2.1":
		return nil
	case "v2.2.0":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DataContractUpdateKind) Validate() error {
	switch s {
	case "DataContract":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DataQuality) Validate() error {
	alias := ([]DataQualityItem)(s)
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DataQualityItem) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Dimension.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "dimension",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.CustomProperties {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "customProperties",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.OneOf.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "OneOf",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DataQualityItemDimension) Validate() error {
	switch s {
	case "accuracy":
		return nil
	case "completeness":
		return nil
	case "conformity":
		return nil
	case "consistency":
		return nil
	case "coverage":
		return nil
	case "timeliness":
		return nil
	case "uniqueness":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s DataQualityItemSum) Validate() error {
	switch s.Type {
	case DataQualityLibraryDataQualityItemSum:
		if err := s.DataQualityLibrary.Validate(); err != nil {
			return err
		}
		return nil
	case DataQualitySqlDataQualityItemSum:
		if err := s.DataQualitySql.Validate(); err != nil {
			return err
		}
		return nil
	default:
		return errors.Errorf("invalid type %q", s.Type)
	}
}

func (s *DataQualityLibrary) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MustBeGreaterThan.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mustBeGreaterThan",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MustBeGreaterOrEqualTo.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mustBeGreaterOrEqualTo",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MustBeLessThan.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mustBeLessThan",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MustBeLessOrEqualTo.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mustBeLessOrEqualTo",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MustBeBetween.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				if err := (validate.Array{
					MinLength:    2,
					MinLengthSet: true,
					MaxLength:    2,
					MaxLengthSet: true,
				}).ValidateLength(len(value)); err != nil {
					return errors.Wrap(err, "array")
				}
				if err := validate.UniqueItems(value); err != nil {
					return errors.Wrap(err, "array")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mustBeBetween",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MustNotBeBetween.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				if err := (validate.Array{
					MinLength:    2,
					MinLengthSet: true,
					MaxLength:    2,
					MaxLengthSet: true,
				}).ValidateLength(len(value)); err != nil {
					return errors.Wrap(err, "array")
				}
				if err := validate.UniqueItems(value); err != nil {
					return errors.Wrap(err, "array")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := (validate.Float{}).Validate(float64(elem)); err != nil {
							return errors.Wrap(err, "float")
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mustNotBeBetween",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DataQualityLibraryType) Validate() error {
	switch s {
	case "text":
		return nil
	case "library":
		return nil
	case "sql":
		return nil
	case "custom":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *DataQualitySql) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DataQualitySqlType) Validate() error {
	switch s {
	case "text":
		return nil
	case "library":
		return nil
	case "sql":
		return nil
	case "custom":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Deployment) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Status.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "status",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DeploymentHeaders) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Response.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "Response",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DeploymentStatus) Validate() error {
	switch s {
	case "deployed":
		return nil
	case "failed":
		return nil
	case "pending":
		return nil
	case "missing":
		return nil
	case "unknown":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetAlgorithmLogsOKApplicationJSON) Validate() error {
	alias := ([]string)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s GetAttestationReportNonce) Validate() error {
	switch s {
	case "fingerprint":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GetCollaborationSpacesOKApplicationJSON) Validate() error {
	alias := ([]CollaborationSpace)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s GetCollaboratorsOKApplicationJSON) Validate() error {
	alias := ([]Collaborator)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s GetDataContractsOKApplicationJSON) Validate() error {
	alias := ([]DataContractSummary)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s GetDeploymentLogsOKApplicationJSON) Validate() error {
	alias := ([]string)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s GetInvitesOKApplicationJSON) Validate() error {
	alias := ([]jx.Raw)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s *Price) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PriceAmount.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "priceAmount",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Property) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Quality.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "quality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogicalType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "logicalType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PropertyCreate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Quality.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "quality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogicalType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "logicalType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PropertyCreateLogicalType) Validate() error {
	switch s {
	case "string":
		return nil
	case "date":
		return nil
	case "number":
		return nil
	case "integer":
		return nil
	case "object":
		return nil
	case "array":
		return nil
	case "boolean":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s PropertyLogicalType) Validate() error {
	switch s {
	case "string":
		return nil
	case "date":
		return nil
	case "number":
		return nil
	case "integer":
		return nil
	case "object":
		return nil
	case "array":
		return nil
	case "boolean":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *PropertyUpdate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Quality.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "quality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogicalType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "logicalType",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s PropertyUpdateLogicalType) Validate() error {
	switch s {
	case "string":
		return nil
	case "date":
		return nil
	case "number":
		return nil
	case "integer":
		return nil
	case "object":
		return nil
	case "array":
		return nil
	case "boolean":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *Schema) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Quality.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "quality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogicalType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "logicalType",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Properties {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "properties",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SchemaCreate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Quality.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "quality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogicalType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "logicalType",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Properties {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "properties",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SchemaCreateLogicalType) Validate() error {
	switch s {
	case "object":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s SchemaLogicalType) Validate() error {
	switch s {
	case "object":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SchemaUpdate) Validate() error {
	if s == nil {
		return validate.ErrNilPointer
	}

	var failures []validate.FieldError
	if err := func() error {
		if err := s.Quality.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "quality",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.LogicalType.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "logicalType",
			Error: err,
		})
	}
	if err := func() error {
		var failures []validate.FieldError
		for i, elem := range s.Properties {
			if err := func() error {
				if err := elem.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				failures = append(failures, validate.FieldError{
					Name:  fmt.Sprintf("[%d]", i),
					Error: err,
				})
			}
		}
		if len(failures) > 0 {
			return &validate.Error{Fields: failures}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "properties",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SchemaUpdateLogicalType) Validate() error {
	switch s {
	case "object":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
