// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// CreateCollaboratorParams is parameters of CreateCollaborator operation.
type CreateCollaboratorParams struct {
	// The ID of the collaboration space to add a collaborator to.
	SpaceId string
}

func unpackCreateCollaboratorParams(packed middleware.Parameters) (params CreateCollaboratorParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeCreateCollaboratorParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateCollaboratorParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreatePropertyParams is parameters of CreateProperty operation.
type CreatePropertyParams struct {
	// The ID of the data contract to add a property to.
	ContractId string
	// The ID of the schema in the contract where to add the property to.
	SchemaId string
}

func unpackCreatePropertyParams(packed middleware.Parameters) (params CreatePropertyParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "schemaId",
			In:   "path",
		}
		params.SchemaId = packed[key].(string)
	}
	return params
}

func decodeCreatePropertyParams(args [2]string, argsEscaped bool, r *http.Request) (params CreatePropertyParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: schemaId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schemaId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SchemaId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schemaId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// CreateSchemaParams is parameters of CreateSchema operation.
type CreateSchemaParams struct {
	// The ID of the data contract to add the schema to.
	ContractId string
}

func unpackCreateSchemaParams(packed middleware.Parameters) (params CreateSchemaParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	return params
}

func decodeCreateSchemaParams(args [1]string, argsEscaped bool, r *http.Request) (params CreateSchemaParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteCageParams is parameters of DeleteCage operation.
type DeleteCageParams struct {
	// The ID of the collaboration space associated with the trusted environment.
	SpaceId string
}

func unpackDeleteCageParams(packed middleware.Parameters) (params DeleteCageParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeDeleteCageParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteCageParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteCollaborationSpaceParams is parameters of DeleteCollaborationSpace operation.
type DeleteCollaborationSpaceParams struct {
	// The ID of the collaboration space to delete.
	SpaceId string
}

func unpackDeleteCollaborationSpaceParams(packed middleware.Parameters) (params DeleteCollaborationSpaceParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeDeleteCollaborationSpaceParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteCollaborationSpaceParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteCollaboratorParams is parameters of DeleteCollaborator operation.
type DeleteCollaboratorParams struct {
	// The ID of the collaboration space of the collaborator.
	SpaceId string
	// The ID of the requested collaborator.
	CollaboratorId string
}

func unpackDeleteCollaboratorParams(packed middleware.Parameters) (params DeleteCollaboratorParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "collaboratorId",
			In:   "path",
		}
		params.CollaboratorId = packed[key].(string)
	}
	return params
}

func decodeDeleteCollaboratorParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteCollaboratorParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: collaboratorId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collaboratorId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CollaboratorId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collaboratorId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteDataContractParams is parameters of DeleteDataContract operation.
type DeleteDataContractParams struct {
	// The ID of the data contract to delete.
	ContractId string
}

func unpackDeleteDataContractParams(packed middleware.Parameters) (params DeleteDataContractParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	return params
}

func decodeDeleteDataContractParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteDataContractParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteInviteParams is parameters of DeleteInvite operation.
type DeleteInviteParams struct {
	InviteId string
}

func unpackDeleteInviteParams(packed middleware.Parameters) (params DeleteInviteParams) {
	{
		key := middleware.ParameterKey{
			Name: "inviteId",
			In:   "path",
		}
		params.InviteId = packed[key].(string)
	}
	return params
}

func decodeDeleteInviteParams(args [1]string, argsEscaped bool, r *http.Request) (params DeleteInviteParams, _ error) {
	// Decode path: inviteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "inviteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.InviteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "inviteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeletePropertyParams is parameters of DeleteProperty operation.
type DeletePropertyParams struct {
	// The ID of the data contract where the property can be found.
	ContractId string
	// The ID of the schema in the contract where the property can be found.
	SchemaId string
	// The ID of the property to delete.
	PropertyId string
}

func unpackDeletePropertyParams(packed middleware.Parameters) (params DeletePropertyParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "schemaId",
			In:   "path",
		}
		params.SchemaId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "propertyId",
			In:   "path",
		}
		params.PropertyId = packed[key].(string)
	}
	return params
}

func decodeDeletePropertyParams(args [3]string, argsEscaped bool, r *http.Request) (params DeletePropertyParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: schemaId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schemaId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SchemaId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schemaId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: propertyId.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "propertyId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PropertyId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "propertyId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeleteSchemaParams is parameters of DeleteSchema operation.
type DeleteSchemaParams struct {
	// The ID of the data contract where the schema can be found.
	ContractId string
	// The ID of the schema to delete.
	SchemaId string
}

func unpackDeleteSchemaParams(packed middleware.Parameters) (params DeleteSchemaParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "schemaId",
			In:   "path",
		}
		params.SchemaId = packed[key].(string)
	}
	return params
}

func decodeDeleteSchemaParams(args [2]string, argsEscaped bool, r *http.Request) (params DeleteSchemaParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: schemaId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schemaId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SchemaId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schemaId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// DeployCageParams is parameters of DeployCage operation.
type DeployCageParams struct {
	// The ID of the collaboration space for which to deploy a cage.
	SpaceId string
}

func unpackDeployCageParams(packed middleware.Parameters) (params DeployCageParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeDeployCageParams(args [1]string, argsEscaped bool, r *http.Request) (params DeployCageParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetAlgorithmLogsParams is parameters of GetAlgorithmLogs operation.
type GetAlgorithmLogsParams struct {
	// The ID of the collaboration space associated with the cage.
	SpaceId string
	// Number of lines to return.
	TailLines OptInt
}

func unpackGetAlgorithmLogsParams(packed middleware.Parameters) (params GetAlgorithmLogsParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "tail_lines",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TailLines = v.(OptInt)
		}
	}
	return params
}

func decodeGetAlgorithmLogsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAlgorithmLogsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: tail_lines.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tail_lines",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTailLinesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTailLinesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TailLines.SetTo(paramsDotTailLinesVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tail_lines",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetAttestationReportParams is parameters of GetAttestationReport operation.
type GetAttestationReportParams struct {
	// The ID of the requested collaboration space.
	SpaceId string
	// A nonce to add to the attestation report: * fingerpint: Attach a hex-encoded SHA-256 fingerprint
	// of the public key.
	Nonce OptGetAttestationReportNonce
}

func unpackGetAttestationReportParams(packed middleware.Parameters) (params GetAttestationReportParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "nonce",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Nonce = v.(OptGetAttestationReportNonce)
		}
	}
	return params
}

func decodeGetAttestationReportParams(args [1]string, argsEscaped bool, r *http.Request) (params GetAttestationReportParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: nonce.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "nonce",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNonceVal GetAttestationReportNonce
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNonceVal = GetAttestationReportNonce(c)
					return nil
				}(); err != nil {
					return err
				}
				params.Nonce.SetTo(paramsDotNonceVal)
				return nil
			}); err != nil {
				return err
			}
			if err := func() error {
				if value, ok := params.Nonce.Get(); ok {
					if err := func() error {
						if err := value.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						return err
					}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "nonce",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetClientParams is parameters of GetClient operation.
type GetClientParams struct {
	// The requested client.
	ClientId string
}

func unpackGetClientParams(packed middleware.Parameters) (params GetClientParams) {
	{
		key := middleware.ParameterKey{
			Name: "clientId",
			In:   "path",
		}
		params.ClientId = packed[key].(string)
	}
	return params
}

func decodeGetClientParams(args [1]string, argsEscaped bool, r *http.Request) (params GetClientParams, _ error) {
	// Decode path: clientId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "clientId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "clientId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCollaborationSpaceParams is parameters of GetCollaborationSpace operation.
type GetCollaborationSpaceParams struct {
	// The ID of the requested collaboration space.
	SpaceId string
}

func unpackGetCollaborationSpaceParams(packed middleware.Parameters) (params GetCollaborationSpaceParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeGetCollaborationSpaceParams(args [1]string, argsEscaped bool, r *http.Request) (params GetCollaborationSpaceParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCollaborationSpaceAppIdParams is parameters of GetCollaborationSpaceAppId operation.
type GetCollaborationSpaceAppIdParams struct {
	// The ID of the requested collaboration space associated with the AppID.
	SpaceId string
}

func unpackGetCollaborationSpaceAppIdParams(packed middleware.Parameters) (params GetCollaborationSpaceAppIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeGetCollaborationSpaceAppIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetCollaborationSpaceAppIdParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCollaborationSpaceWebIdParams is parameters of GetCollaborationSpaceWebId operation.
type GetCollaborationSpaceWebIdParams struct {
	// The ID of the collaboration space associated with the WebID.
	SpaceId string
}

func unpackGetCollaborationSpaceWebIdParams(packed middleware.Parameters) (params GetCollaborationSpaceWebIdParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeGetCollaborationSpaceWebIdParams(args [1]string, argsEscaped bool, r *http.Request) (params GetCollaborationSpaceWebIdParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCollaboratorParams is parameters of GetCollaborator operation.
type GetCollaboratorParams struct {
	// The ID of the collaboration space of the collaborator.
	SpaceId string
	// The ID of the requested collaborator.
	CollaboratorId string
}

func unpackGetCollaboratorParams(packed middleware.Parameters) (params GetCollaboratorParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "collaboratorId",
			In:   "path",
		}
		params.CollaboratorId = packed[key].(string)
	}
	return params
}

func decodeGetCollaboratorParams(args [2]string, argsEscaped bool, r *http.Request) (params GetCollaboratorParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: collaboratorId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collaboratorId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CollaboratorId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collaboratorId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetCollaboratorsParams is parameters of GetCollaborators operation.
type GetCollaboratorsParams struct {
	// The ID of the requested collaboration space.
	SpaceId string
}

func unpackGetCollaboratorsParams(packed middleware.Parameters) (params GetCollaboratorsParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeGetCollaboratorsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetCollaboratorsParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDataContractParams is parameters of GetDataContract operation.
type GetDataContractParams struct {
	// The ID of the requested data contract.
	ContractId string
}

func unpackGetDataContractParams(packed middleware.Parameters) (params GetDataContractParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	return params
}

func decodeGetDataContractParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDataContractParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDataContractsParams is parameters of GetDataContracts operation.
type GetDataContractsParams struct {
	// The name filter. Filtering is case insensitive.
	Name OptString
}

func unpackGetDataContractsParams(packed middleware.Parameters) (params GetDataContractsParams) {
	{
		key := middleware.ParameterKey{
			Name: "name",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Name = v.(OptString)
		}
	}
	return params
}

func decodeGetDataContractsParams(args [0]string, argsEscaped bool, r *http.Request) (params GetDataContractsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: name.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "name",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotNameVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotNameVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Name.SetTo(paramsDotNameVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "name",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetDeploymentParams is parameters of GetDeployment operation.
type GetDeploymentParams struct {
	// The ID of the collaboration space associated with the confidential cluster.
	SpaceId string
}

func unpackGetDeploymentParams(packed middleware.Parameters) (params GetDeploymentParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeGetDeploymentParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDeploymentParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetDeploymentLogsParams is parameters of GetDeploymentLogs operation.
type GetDeploymentLogsParams struct {
	// The ID of the collaboration space associated with the cage.
	SpaceId string
	// Number of lines to return.
	TailLines OptInt
}

func unpackGetDeploymentLogsParams(packed middleware.Parameters) (params GetDeploymentLogsParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "tail_lines",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.TailLines = v.(OptInt)
		}
	}
	return params
}

func decodeGetDeploymentLogsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetDeploymentLogsParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: tail_lines.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "tail_lines",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotTailLinesVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					paramsDotTailLinesVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.TailLines.SetTo(paramsDotTailLinesVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "tail_lines",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetInviteParams is parameters of GetInvite operation.
type GetInviteParams struct {
	InviteId string
}

func unpackGetInviteParams(packed middleware.Parameters) (params GetInviteParams) {
	{
		key := middleware.ParameterKey{
			Name: "inviteId",
			In:   "path",
		}
		params.InviteId = packed[key].(string)
	}
	return params
}

func decodeGetInviteParams(args [1]string, argsEscaped bool, r *http.Request) (params GetInviteParams, _ error) {
	// Decode path: inviteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "inviteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.InviteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "inviteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetInviteStatusParams is parameters of GetInviteStatus operation.
type GetInviteStatusParams struct {
	InviteId string
}

func unpackGetInviteStatusParams(packed middleware.Parameters) (params GetInviteStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "inviteId",
			In:   "path",
		}
		params.InviteId = packed[key].(string)
	}
	return params
}

func decodeGetInviteStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params GetInviteStatusParams, _ error) {
	// Decode path: inviteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "inviteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.InviteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "inviteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetNotificationsParams is parameters of GetNotifications operation.
type GetNotificationsParams struct {
	// The requested client.
	ClientId string
}

func unpackGetNotificationsParams(packed middleware.Parameters) (params GetNotificationsParams) {
	{
		key := middleware.ParameterKey{
			Name: "clientId",
			In:   "path",
		}
		params.ClientId = packed[key].(string)
	}
	return params
}

func decodeGetNotificationsParams(args [1]string, argsEscaped bool, r *http.Request) (params GetNotificationsParams, _ error) {
	// Decode path: clientId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "clientId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "clientId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPropertyParams is parameters of GetProperty operation.
type GetPropertyParams struct {
	// The ID of the data contract where the property can be found.
	ContractId string
	// The ID of the schema in the contract where the property can be found.
	SchemaId string
	// The ID of the requested property.
	PropertyId string
}

func unpackGetPropertyParams(packed middleware.Parameters) (params GetPropertyParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "schemaId",
			In:   "path",
		}
		params.SchemaId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "propertyId",
			In:   "path",
		}
		params.PropertyId = packed[key].(string)
	}
	return params
}

func decodeGetPropertyParams(args [3]string, argsEscaped bool, r *http.Request) (params GetPropertyParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: schemaId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schemaId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SchemaId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schemaId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: propertyId.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "propertyId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PropertyId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "propertyId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPublicClientParams is parameters of GetPublicClient operation.
type GetPublicClientParams struct {
	// A human readable label that uniquely identifies the client.
	ClientLabel string
}

func unpackGetPublicClientParams(packed middleware.Parameters) (params GetPublicClientParams) {
	{
		key := middleware.ParameterKey{
			Name: "clientLabel",
			In:   "path",
		}
		params.ClientLabel = packed[key].(string)
	}
	return params
}

func decodeGetPublicClientParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPublicClientParams, _ error) {
	// Decode path: clientLabel.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "clientLabel",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ClientLabel = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "clientLabel",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetPublicKeyParams is parameters of GetPublicKey operation.
type GetPublicKeyParams struct {
	// The ID of the requested collaboration space.
	SpaceId string
}

func unpackGetPublicKeyParams(packed middleware.Parameters) (params GetPublicKeyParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeGetPublicKeyParams(args [1]string, argsEscaped bool, r *http.Request) (params GetPublicKeyParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// GetSchemaParams is parameters of GetSchema operation.
type GetSchemaParams struct {
	// The ID of the data contract where the schema can be found.
	ContractId string
	// The ID of the requested schema.
	SchemaId string
}

func unpackGetSchemaParams(packed middleware.Parameters) (params GetSchemaParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "schemaId",
			In:   "path",
		}
		params.SchemaId = packed[key].(string)
	}
	return params
}

func decodeGetSchemaParams(args [2]string, argsEscaped bool, r *http.Request) (params GetSchemaParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: schemaId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schemaId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SchemaId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schemaId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// PublishEventParams is parameters of PublishEvent operation.
type PublishEventParams struct {
	// The ID of the collaboration space to handle the event.
	SpaceId string
	// The stream to add the event to.
	Stream OptString
}

func unpackPublishEventParams(packed middleware.Parameters) (params PublishEventParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "stream",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Stream = v.(OptString)
		}
	}
	return params
}

func decodePublishEventParams(args [1]string, argsEscaped bool, r *http.Request) (params PublishEventParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: stream.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "stream",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotStreamVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotStreamVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Stream.SetTo(paramsDotStreamVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "stream",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// RotateKeysParams is parameters of RotateKeys operation.
type RotateKeysParams struct {
	// The ID of the collaboration space to handle the event.
	SpaceId string
}

func unpackRotateKeysParams(packed middleware.Parameters) (params RotateKeysParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeRotateKeysParams(args [1]string, argsEscaped bool, r *http.Request) (params RotateKeysParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// StoreSecretParams is parameters of StoreSecret operation.
type StoreSecretParams struct {
	// The ID of the collaboration space associated with the cage.
	SpaceId string
	// The id of the secret that is saved.
	SecretId string
}

func unpackStoreSecretParams(packed middleware.Parameters) (params StoreSecretParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "secretId",
			In:   "path",
		}
		params.SecretId = packed[key].(string)
	}
	return params
}

func decodeStoreSecretParams(args [2]string, argsEscaped bool, r *http.Request) (params StoreSecretParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: secretId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "secretId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SecretId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "secretId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateCollaborationSpaceParams is parameters of UpdateCollaborationSpace operation.
type UpdateCollaborationSpaceParams struct {
	// The ID of the collaboration space to update.
	SpaceId string
}

func unpackUpdateCollaborationSpaceParams(packed middleware.Parameters) (params UpdateCollaborationSpaceParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	return params
}

func decodeUpdateCollaborationSpaceParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateCollaborationSpaceParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateCollaboratorParams is parameters of UpdateCollaborator operation.
type UpdateCollaboratorParams struct {
	// The ID of the collaboration space of the collaborator.
	SpaceId string
	// The ID of the collaborator to update.
	CollaboratorId string
}

func unpackUpdateCollaboratorParams(packed middleware.Parameters) (params UpdateCollaboratorParams) {
	{
		key := middleware.ParameterKey{
			Name: "spaceId",
			In:   "path",
		}
		params.SpaceId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "collaboratorId",
			In:   "path",
		}
		params.CollaboratorId = packed[key].(string)
	}
	return params
}

func decodeUpdateCollaboratorParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateCollaboratorParams, _ error) {
	// Decode path: spaceId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "spaceId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SpaceId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "spaceId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: collaboratorId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "collaboratorId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CollaboratorId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "collaboratorId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateDataContractParams is parameters of UpdateDataContract operation.
type UpdateDataContractParams struct {
	// The ID of the data contract to update.
	ContractId string
}

func unpackUpdateDataContractParams(packed middleware.Parameters) (params UpdateDataContractParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	return params
}

func decodeUpdateDataContractParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateDataContractParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateInviteParams is parameters of UpdateInvite operation.
type UpdateInviteParams struct {
	InviteId string
}

func unpackUpdateInviteParams(packed middleware.Parameters) (params UpdateInviteParams) {
	{
		key := middleware.ParameterKey{
			Name: "inviteId",
			In:   "path",
		}
		params.InviteId = packed[key].(string)
	}
	return params
}

func decodeUpdateInviteParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateInviteParams, _ error) {
	// Decode path: inviteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "inviteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.InviteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "inviteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateInviteStatusParams is parameters of UpdateInviteStatus operation.
type UpdateInviteStatusParams struct {
	InviteId string
}

func unpackUpdateInviteStatusParams(packed middleware.Parameters) (params UpdateInviteStatusParams) {
	{
		key := middleware.ParameterKey{
			Name: "inviteId",
			In:   "path",
		}
		params.InviteId = packed[key].(string)
	}
	return params
}

func decodeUpdateInviteStatusParams(args [1]string, argsEscaped bool, r *http.Request) (params UpdateInviteStatusParams, _ error) {
	// Decode path: inviteId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "inviteId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.InviteId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "inviteId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdatePropertyParams is parameters of UpdateProperty operation.
type UpdatePropertyParams struct {
	// The ID of the data contract where the property can be found.
	ContractId string
	// The ID of the schema in the data contract where the property can be found.
	SchemaId string
	// The ID of the property to update.
	PropertyId string
}

func unpackUpdatePropertyParams(packed middleware.Parameters) (params UpdatePropertyParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "schemaId",
			In:   "path",
		}
		params.SchemaId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "propertyId",
			In:   "path",
		}
		params.PropertyId = packed[key].(string)
	}
	return params
}

func decodeUpdatePropertyParams(args [3]string, argsEscaped bool, r *http.Request) (params UpdatePropertyParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: schemaId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schemaId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SchemaId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schemaId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: propertyId.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "propertyId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PropertyId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "propertyId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// UpdateSchemaParams is parameters of UpdateSchema operation.
type UpdateSchemaParams struct {
	// The ID of the data contract where the schema can be found.
	ContractId string
	// The ID of the schema to update.
	SchemaId string
}

func unpackUpdateSchemaParams(packed middleware.Parameters) (params UpdateSchemaParams) {
	{
		key := middleware.ParameterKey{
			Name: "contractId",
			In:   "path",
		}
		params.ContractId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "schemaId",
			In:   "path",
		}
		params.SchemaId = packed[key].(string)
	}
	return params
}

func decodeUpdateSchemaParams(args [2]string, argsEscaped bool, r *http.Request) (params UpdateSchemaParams, _ error) {
	// Decode path: contractId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "contractId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ContractId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "contractId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: schemaId.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "schemaId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.SchemaId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "schemaId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}
